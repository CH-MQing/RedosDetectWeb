id:null
正则表达式:null
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:1
正则表达式: *('.+') *=> *
是否是ReDos漏洞：RESULT-TRUE
攻击字符串如下:
------------------------
编号：1
攻击字符串："'"+"\u0000'"*10000+"@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1007
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置： *(?P<key>'▻.+'◅)▻ *◅=> *
漏洞原因：β1 = .+ β2 = ' * (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：2
攻击字符串："'\u0000"+"\u0000'"*10000+"@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1005
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置： *(?P<key>'▻.+'◅)▻ *◅=> *
漏洞原因：β1 = .+ β2 = ' * (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：3
攻击字符串："'"+"\u0000'"*10000+" "
攻击是否成功：ATTACK_SUCCESS
攻击时间：1001
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置： *(?P<key>'▻.+'◅)▻ *◅=> *
漏洞原因：β1 = .+ β2 = ' * (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：4
攻击字符串："'\u0000"+"\u0000'"*10000+" "
攻击是否成功：ATTACK_SUCCESS
攻击时间：1008
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置： *(?P<key>'▻.+'◅)▻ *◅=> *
漏洞原因：β1 = .+ β2 = ' * (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：5
攻击字符串："'"+"\u0000'"*10000+"◎ ◎"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1006
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置： *(?P<key>'▻.+'◅)▻ *◅=> *
漏洞原因：β1 = .+ β2 = ' * (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：6
攻击字符串："'\u0000"+"\u0000'"*10000+"◎ ◎"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1013
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置： *(?P<key>'▻.+'◅)▻ *◅=> *
漏洞原因：β1 = .+ β2 = ' * (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：7
攻击字符串："'"+"\u0000'"*10000+"◎\n◎\n◎"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1007
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置： *(?P<key>'▻.+'◅)▻ *◅=> *
漏洞原因：β1 = .+ β2 = ' * (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：8
攻击字符串："'\u0000"+"\u0000'"*10000+"◎\n◎\n◎"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1006
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置： *(?P<key>'▻.+'◅)▻ *◅=> *
漏洞原因：β1 = .+ β2 = ' * (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：9
攻击字符串：""+" "*20000+"\u0000"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1001
时间复杂度：POLYNOMIAL
漏洞模式：SLQ2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：10
攻击字符串：""+"'"*10000+"\u0000"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1013
时间复杂度：POLYNOMIAL
漏洞模式：SLQ2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：11
攻击字符串：""+" "*20000+"@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1007
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_1
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：12
攻击字符串：""+"'"*10000+"\n@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1013
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：13
攻击字符串：""+" '1'"*5000+"@@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1014
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:2
正则表达式:# Invalid object specification: '(.+)'
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:3
正则表达式:#([^']+?)# \(qv\)
是否是ReDos漏洞：RESULT-TRUE
攻击字符串如下:
------------------------
编号：1
攻击字符串：""+"#"*10000+"\u0000"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1009
时间复杂度：POLYNOMIAL
漏洞模式：SLQ2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：2
攻击字符串：""+"#"*10000+"'"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1002
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:4
正则表达式:#prefs.add\('python_path', '~/python/'\)
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:5
正则表达式:'
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:6
正则表达式:''
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:7
正则表达式:'''(.+?)'''
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:8
正则表达式:''(.*?)''
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:9
正则表达式:''(.+?)''
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:10
正则表达式:''([^\s']+( +[^\s']+)*)''
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:11
正则表达式:''([^\s']+(?: +[^\s']+)*)''
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:12
正则表达式:''|\\([0-7]{1,3}|.)
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:13
正则表达式:'((?:[^']|(?:''))*)'
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:14
正则表达式:'(.*)'
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:15
正则表达式:'(.*)'$
是否是ReDos漏洞：RESULT-TRUE
攻击字符串如下:
------------------------
编号：1
攻击字符串：""+"'"*10000+"\u0000"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1011
时间复杂度：POLYNOMIAL
漏洞模式：SLQ2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：2
攻击字符串：""+"'"*10000+"\n@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1010
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:16
正则表达式:'(.*?)(?<!\\)',?
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:17
正则表达式:'(..+)'\s+(..+$)
是否是ReDos漏洞：RESULT-TRUE
攻击字符串如下:
------------------------
编号：1
攻击字符串："'\u0000\u0000"+"\u0000'\t"*5000+"\n!\n!\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1010
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：'(.▻.+◅)▻'\s+◅(..+$)
漏洞原因：β1 = .+ β2 = '\s+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：2
攻击字符串："'\u0000\u0000"+"\u0000' "*5000+"\n!\n!\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1006
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：'(.▻.+◅)▻'\s+◅(..+$)
漏洞原因：β1 = .+ β2 = '\s+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：3
攻击字符串："'1"+"\u0000'\t"*5000+"\n!\n!\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1010
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：'(.▻.+◅)▻'\s+◅(..+$)
漏洞原因：β1 = .+ β2 = '\s+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：4
攻击字符串："'1"+"\u0000' "*5000+"\n!\n!\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1008
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：'(.▻.+◅)▻'\s+◅(..+$)
漏洞原因：β1 = .+ β2 = '\s+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：5
攻击字符串："'\u0000\u0000"+"\u0000'\t"*5000+"\n1\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1006
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：'(.▻.+◅)▻'\s+◅(..+$)
漏洞原因：β1 = .+ β2 = '\s+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：6
攻击字符串："'\u0000\u0000"+"\u0000' "*5000+"\n1\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1008
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：'(.▻.+◅)▻'\s+◅(..+$)
漏洞原因：β1 = .+ β2 = '\s+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：7
攻击字符串："'1"+"\u0000'\t"*5000+"\n1\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1004
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：'(.▻.+◅)▻'\s+◅(..+$)
漏洞原因：β1 = .+ β2 = '\s+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：8
攻击字符串："'1"+"\u0000' "*5000+"\n1\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1007
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：'(.▻.+◅)▻'\s+◅(..+$)
漏洞原因：β1 = .+ β2 = '\s+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：9
攻击字符串："'\u0000\u0000"+"\u0000'\t\u0000\u0000"*5000+"\n!\n!\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1008
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：'(.▻.+◅)▻'\s+◅(▻..+◅$)
漏洞原因：β1 = .+ β2 = '\s+..+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：10
攻击字符串："'1"+"\u0000'\t\u0000\u0000"*5000+"\n!\n!\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1015
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：'(.▻.+◅)▻'\s+◅(▻..+◅$)
漏洞原因：β1 = .+ β2 = '\s+..+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：11
攻击字符串："'\u0000\u0000"+"\u0000'\t\u0000\u0000"*5000+"\n1\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1002
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：'(.▻.+◅)▻'\s+◅(▻..+◅$)
漏洞原因：β1 = .+ β2 = '\s+..+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：12
攻击字符串："'1"+"\u0000'\t\u0000\u0000"*5000+"\n1\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1005
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：'(.▻.+◅)▻'\s+◅(▻..+◅$)
漏洞原因：β1 = .+ β2 = '\s+..+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：13
攻击字符串："'\u0000\u0000"+"\u0000'\t\u0000\u0000"*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1014
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：'(.▻.+◅)▻'\s+◅(▻..+◅$)
漏洞原因：β1 = .+ β2 = '\s+..+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：14
攻击字符串："'1"+"\u0000'\t\u0000\u0000"*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1014
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：'(.▻.+◅)▻'\s+◅(▻..+◅$)
漏洞原因：β1 = .+ β2 = '\s+..+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：15
攻击字符串："'11'"+"\t\t "*5000+"\n!\n!\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1014
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：'(..+)'▻\s+◅(▻..+◅$)
漏洞原因：β1 = \s+ β2 = ..+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：16
攻击字符串："'11'"+"\t\t\t"*5000+"\n!\n!\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1012
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：'(..+)'▻\s+◅(▻..+◅$)
漏洞原因：β1 = \s+ β2 = ..+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：17
攻击字符串："'\u0000\u0000' "+"\t\t "*5000+"\n!\n!\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1014
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：'(..+)'▻\s+◅(▻..+◅$)
漏洞原因：β1 = \s+ β2 = ..+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：18
攻击字符串："'\u0000\u0000' "+"\t\t\t"*5000+"\n!\n!\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1006
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：'(..+)'▻\s+◅(▻..+◅$)
漏洞原因：β1 = \s+ β2 = ..+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：19
攻击字符串："'11'"+"\t\t "*5000+"\n1\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1005
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：'(..+)'▻\s+◅(▻..+◅$)
漏洞原因：β1 = \s+ β2 = ..+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：20
攻击字符串："'11'"+"\t\t\t"*5000+"\n1\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1014
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：'(..+)'▻\s+◅(▻..+◅$)
漏洞原因：β1 = \s+ β2 = ..+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：21
攻击字符串："'\u0000\u0000' "+"\t\t "*5000+"\n1\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1001
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：'(..+)'▻\s+◅(▻..+◅$)
漏洞原因：β1 = \s+ β2 = ..+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：22
攻击字符串："'\u0000\u0000' "+"\t\t\t"*5000+"\n1\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1001
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：'(..+)'▻\s+◅(▻..+◅$)
漏洞原因：β1 = \s+ β2 = ..+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：23
攻击字符串："'11'"+"\t\t "*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1010
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：'(..+)'▻\s+◅(▻..+◅$)
漏洞原因：β1 = \s+ β2 = ..+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：24
攻击字符串："'11'"+"\t\t\t"*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1006
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：'(..+)'▻\s+◅(▻..+◅$)
漏洞原因：β1 = \s+ β2 = ..+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：25
攻击字符串："'\u0000\u0000' "+"\t\t "*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1005
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：'(..+)'▻\s+◅(▻..+◅$)
漏洞原因：β1 = \s+ β2 = ..+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：26
攻击字符串："'\u0000\u0000' "+"\t\t\t"*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1003
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：'(..+)'▻\s+◅(▻..+◅$)
漏洞原因：β1 = \s+ β2 = ..+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：27
攻击字符串：""+"'1"*10000+"\n@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1004
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：28
攻击字符串：""+"'11'"*5000+"!@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1012
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：29
攻击字符串：""+"'11' 1"*5000+"!\n@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1002
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:18
正则表达式:'(?:[^'\\]|\\.)*'
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:19
正则表达式:'(?:[^']|'')*'$
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:20
正则表达式:'([^:]*)'\:([^,]*),
是否是ReDos漏洞：RESULT-TRUE
攻击字符串如下:
------------------------
编号：1
攻击字符串：""+"'"*10000+"\u0000"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1014
时间复杂度：POLYNOMIAL
漏洞模式：SLQ2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：2
攻击字符串：""+"'':"*5000+"\u0000"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1014
时间复杂度：POLYNOMIAL
漏洞模式：SLQ2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：3
攻击字符串：""+"'"*10000+":"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1014
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:21
正则表达式:'([..\n]+)'\s+(..+$)
是否是ReDos漏洞：RESULT-TRUE
攻击字符串如下:
------------------------
编号：1
攻击字符串："'.'"+"\t\t "*5000+"A!\nA!\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1006
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：'([..\n]+)'▻\s+◅(▻..+◅$)
漏洞原因：β1 = \s+ β2 = ..+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：2
攻击字符串："'.'"+"\t\t\t"*5000+"A!\nA!\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1005
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：'([..\n]+)'▻\s+◅(▻..+◅$)
漏洞原因：β1 = \s+ β2 = ..+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：3
攻击字符串："'\n' "+"\t\t "*5000+"A!\nA!\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1003
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：'([..\n]+)'▻\s+◅(▻..+◅$)
漏洞原因：β1 = \s+ β2 = ..+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：4
攻击字符串："'\n' "+"\t\t\t"*5000+"A!\nA!\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1003
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：'([..\n]+)'▻\s+◅(▻..+◅$)
漏洞原因：β1 = \s+ β2 = ..+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：5
攻击字符串："'.'"+"\t\t "*5000+"\n1\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1004
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：'([..\n]+)'▻\s+◅(▻..+◅$)
漏洞原因：β1 = \s+ β2 = ..+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：6
攻击字符串："'.'"+"\t\t\t"*5000+"\n1\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1015
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：'([..\n]+)'▻\s+◅(▻..+◅$)
漏洞原因：β1 = \s+ β2 = ..+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：7
攻击字符串："'\n' "+"\t\t "*5000+"\n1\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1006
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：'([..\n]+)'▻\s+◅(▻..+◅$)
漏洞原因：β1 = \s+ β2 = ..+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：8
攻击字符串："'\n' "+"\t\t\t"*5000+"\n1\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1012
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：'([..\n]+)'▻\s+◅(▻..+◅$)
漏洞原因：β1 = \s+ β2 = ..+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：9
攻击字符串："'.'"+"\t\t "*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1010
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：'([..\n]+)'▻\s+◅(▻..+◅$)
漏洞原因：β1 = \s+ β2 = ..+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：10
攻击字符串："'.'"+"\t\t\t"*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1004
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：'([..\n]+)'▻\s+◅(▻..+◅$)
漏洞原因：β1 = \s+ β2 = ..+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：11
攻击字符串："'\n' "+"\t\t "*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1004
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：'([..\n]+)'▻\s+◅(▻..+◅$)
漏洞原因：β1 = \s+ β2 = ..+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：12
攻击字符串："'\n' "+"\t\t\t"*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1006
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：'([..\n]+)'▻\s+◅(▻..+◅$)
漏洞原因：β1 = \s+ β2 = ..+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：13
攻击字符串：""+"'.' 1"*5000+"!\n@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1004
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:22
正则表达式:'([0-9.]+)'
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:23
正则表达式:'([^']+?)' \(qv\)
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:24
正则表达式:'(\\.[^\\]*|[^\\])'
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:25
正则表达式:'.'
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:26
正则表达式:'.*
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:27
正则表达式:'.*'$
是否是ReDos漏洞：RESULT-TRUE
攻击字符串如下:
------------------------
编号：1
攻击字符串：""+"'"*10000+"\u0000"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1003
时间复杂度：POLYNOMIAL
漏洞模式：SLQ2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：2
攻击字符串：""+"'"*10000+"\n@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1005
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:28
正则表达式:'.*?'
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:29
正则表达式:':false,
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:30
正则表达式:':true,
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:31
正则表达式:'>$
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:32
正则表达式:'?([^']*)'?!((\$([A-Za-z]+))?\$([0-9]+)(:(\$([A-Za-z]+))?(\$([0-9]+)))?)$
是否是ReDos漏洞：RESULT-TRUE
攻击字符串如下:
------------------------
编号：1
攻击字符串：" "+"!$A"*5000+"@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1002
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：'?(▻[^']*◅)▻'?!◅((▻\$◅(▻[A-Za-z]+◅))?\$([0-9]+)(:(\$([A-Za-z]+))?(\$([0-9]+)))?)$
漏洞原因：β1 = [^']* β2 = '?!\$[A-Za-z]+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：2
攻击字符串：""+"!$A"*5000+"@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1009
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：'?(▻[^']*◅)▻'?!◅((▻\$◅(▻[A-Za-z]+◅))?\$([0-9]+)(:(\$([A-Za-z]+))?(\$([0-9]+)))?)$
漏洞原因：β1 = [^']* β2 = '?!\$[A-Za-z]+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：3
攻击字符串：" "+"!$A"*5000+" "
攻击是否成功：ATTACK_SUCCESS
攻击时间：1010
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：'?(▻[^']*◅)▻'?!◅((▻\$◅(▻[A-Za-z]+◅))?\$([0-9]+)(:(\$([A-Za-z]+))?(\$([0-9]+)))?)$
漏洞原因：β1 = [^']* β2 = '?!\$[A-Za-z]+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：4
攻击字符串：""+"!$A"*5000+" "
攻击是否成功：ATTACK_SUCCESS
攻击时间：1002
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：'?(▻[^']*◅)▻'?!◅((▻\$◅(▻[A-Za-z]+◅))?\$([0-9]+)(:(\$([A-Za-z]+))?(\$([0-9]+)))?)$
漏洞原因：β1 = [^']* β2 = '?!\$[A-Za-z]+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：5
攻击字符串：" "+"!$A"*5000+"A0A"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1015
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：'?(▻[^']*◅)▻'?!◅((▻\$◅(▻[A-Za-z]+◅))?\$([0-9]+)(:(\$([A-Za-z]+))?(\$([0-9]+)))?)$
漏洞原因：β1 = [^']* β2 = '?!\$[A-Za-z]+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：6
攻击字符串：""+"!$A"*5000+"A0A"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1011
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：'?(▻[^']*◅)▻'?!◅((▻\$◅(▻[A-Za-z]+◅))?\$([0-9]+)(:(\$([A-Za-z]+))?(\$([0-9]+)))?)$
漏洞原因：β1 = [^']* β2 = '?!\$[A-Za-z]+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：7
攻击字符串：" "+"!$A"*5000+"'0A0A'0A0A"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1015
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：'?(▻[^']*◅)▻'?!◅((▻\$◅(▻[A-Za-z]+◅))?\$([0-9]+)(:(\$([A-Za-z]+))?(\$([0-9]+)))?)$
漏洞原因：β1 = [^']* β2 = '?!\$[A-Za-z]+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：8
攻击字符串：""+"!$A"*5000+"'0A0A'0A0A"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1006
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：'?(▻[^']*◅)▻'?!◅((▻\$◅(▻[A-Za-z]+◅))?\$([0-9]+)(:(\$([A-Za-z]+))?(\$([0-9]+)))?)$
漏洞原因：β1 = [^']* β2 = '?!\$[A-Za-z]+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：9
攻击字符串：" "+"!$0"*5000+"@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1008
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：'?(▻[^']*◅)▻'?!◅(▻(\$([A-Za-z]+))?\$◅(▻[0-9]+◅)(:(\$([A-Za-z]+))?(\$([0-9]+)))?)$
漏洞原因：β1 = [^']* β2 = '?!(\$([A-Za-z]+))?\$[0-9]+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：10
攻击字符串：""+"!$0"*5000+"@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1002
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：'?(▻[^']*◅)▻'?!◅(▻(\$([A-Za-z]+))?\$◅(▻[0-9]+◅)(:(\$([A-Za-z]+))?(\$([0-9]+)))?)$
漏洞原因：β1 = [^']* β2 = '?!(\$([A-Za-z]+))?\$[0-9]+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：11
攻击字符串：" "+"!$0"*5000+" "
攻击是否成功：ATTACK_SUCCESS
攻击时间：1007
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：'?(▻[^']*◅)▻'?!◅(▻(\$([A-Za-z]+))?\$◅(▻[0-9]+◅)(:(\$([A-Za-z]+))?(\$([0-9]+)))?)$
漏洞原因：β1 = [^']* β2 = '?!(\$([A-Za-z]+))?\$[0-9]+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：12
攻击字符串：""+"!$0"*5000+" "
攻击是否成功：ATTACK_SUCCESS
攻击时间：1003
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：'?(▻[^']*◅)▻'?!◅(▻(\$([A-Za-z]+))?\$◅(▻[0-9]+◅)(:(\$([A-Za-z]+))?(\$([0-9]+)))?)$
漏洞原因：β1 = [^']* β2 = '?!(\$([A-Za-z]+))?\$[0-9]+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：13
攻击字符串：" "+"!$0"*5000+"A0A"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1003
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：'?(▻[^']*◅)▻'?!◅(▻(\$([A-Za-z]+))?\$◅(▻[0-9]+◅)(:(\$([A-Za-z]+))?(\$([0-9]+)))?)$
漏洞原因：β1 = [^']* β2 = '?!(\$([A-Za-z]+))?\$[0-9]+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：14
攻击字符串：""+"!$0"*5000+"A0A"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1005
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：'?(▻[^']*◅)▻'?!◅(▻(\$([A-Za-z]+))?\$◅(▻[0-9]+◅)(:(\$([A-Za-z]+))?(\$([0-9]+)))?)$
漏洞原因：β1 = [^']* β2 = '?!(\$([A-Za-z]+))?\$[0-9]+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：15
攻击字符串：" "+"!$0"*5000+"'0A0A'0A0A"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1014
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：'?(▻[^']*◅)▻'?!◅(▻(\$([A-Za-z]+))?\$◅(▻[0-9]+◅)(:(\$([A-Za-z]+))?(\$([0-9]+)))?)$
漏洞原因：β1 = [^']* β2 = '?!(\$([A-Za-z]+))?\$[0-9]+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：16
攻击字符串：""+"!$0"*5000+"'0A0A'0A0A"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1004
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：'?(▻[^']*◅)▻'?!◅(▻(\$([A-Za-z]+))?\$◅(▻[0-9]+◅)(:(\$([A-Za-z]+))?(\$([0-9]+)))?)$
漏洞原因：β1 = [^']* β2 = '?!(\$([A-Za-z]+))?\$[0-9]+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：17
攻击字符串：" "+"!$0:$A"*5000+"@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1008
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：'?(▻[^']*◅)▻'?!◅(▻(\$([A-Za-z]+))?\$([0-9]+)◅(▻:◅(▻\$◅(▻[A-Za-z]+◅))?(\$([0-9]+)))?)$
漏洞原因：β1 = [^']* β2 = '?!(\$([A-Za-z]+))?\$([0-9]+):\$[A-Za-z]+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：18
攻击字符串：""+"!$0:$A"*5000+"@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1012
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：'?(▻[^']*◅)▻'?!◅(▻(\$([A-Za-z]+))?\$([0-9]+)◅(▻:◅(▻\$◅(▻[A-Za-z]+◅))?(\$([0-9]+)))?)$
漏洞原因：β1 = [^']* β2 = '?!(\$([A-Za-z]+))?\$([0-9]+):\$[A-Za-z]+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：19
攻击字符串：" "+"!$0:$A"*5000+" "
攻击是否成功：ATTACK_SUCCESS
攻击时间：1008
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：'?(▻[^']*◅)▻'?!◅(▻(\$([A-Za-z]+))?\$([0-9]+)◅(▻:◅(▻\$◅(▻[A-Za-z]+◅))?(\$([0-9]+)))?)$
漏洞原因：β1 = [^']* β2 = '?!(\$([A-Za-z]+))?\$([0-9]+):\$[A-Za-z]+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：20
攻击字符串：""+"!$0:$A"*5000+" "
攻击是否成功：ATTACK_SUCCESS
攻击时间：1003
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：'?(▻[^']*◅)▻'?!◅(▻(\$([A-Za-z]+))?\$([0-9]+)◅(▻:◅(▻\$◅(▻[A-Za-z]+◅))?(\$([0-9]+)))?)$
漏洞原因：β1 = [^']* β2 = '?!(\$([A-Za-z]+))?\$([0-9]+):\$[A-Za-z]+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：21
攻击字符串：" "+"!$0:$A"*5000+"A0A"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1008
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：'?(▻[^']*◅)▻'?!◅(▻(\$([A-Za-z]+))?\$([0-9]+)◅(▻:◅(▻\$◅(▻[A-Za-z]+◅))?(\$([0-9]+)))?)$
漏洞原因：β1 = [^']* β2 = '?!(\$([A-Za-z]+))?\$([0-9]+):\$[A-Za-z]+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：22
攻击字符串：""+"!$0:$A"*5000+"A0A"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1009
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：'?(▻[^']*◅)▻'?!◅(▻(\$([A-Za-z]+))?\$([0-9]+)◅(▻:◅(▻\$◅(▻[A-Za-z]+◅))?(\$([0-9]+)))?)$
漏洞原因：β1 = [^']* β2 = '?!(\$([A-Za-z]+))?\$([0-9]+):\$[A-Za-z]+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：23
攻击字符串：" "+"!$0:$A"*5000+"'0A0A'0A0A"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1009
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：'?(▻[^']*◅)▻'?!◅(▻(\$([A-Za-z]+))?\$([0-9]+)◅(▻:◅(▻\$◅(▻[A-Za-z]+◅))?(\$([0-9]+)))?)$
漏洞原因：β1 = [^']* β2 = '?!(\$([A-Za-z]+))?\$([0-9]+):\$[A-Za-z]+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：24
攻击字符串：""+"!$0:$A"*5000+"'0A0A'0A0A"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1006
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：'?(▻[^']*◅)▻'?!◅(▻(\$([A-Za-z]+))?\$([0-9]+)◅(▻:◅(▻\$◅(▻[A-Za-z]+◅))?(\$([0-9]+)))?)$
漏洞原因：β1 = [^']* β2 = '?!(\$([A-Za-z]+))?\$([0-9]+):\$[A-Za-z]+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：25
攻击字符串：" "+"!$0:$0"*5000+"@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1006
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：'?(▻[^']*◅)▻'?!◅(▻(\$([A-Za-z]+))?\$([0-9]+)◅(▻:(\$([A-Za-z]+))?◅(▻\$◅(▻[0-9]+◅)))?)$
漏洞原因：β1 = [^']* β2 = '?!(\$([A-Za-z]+))?\$([0-9]+):(\$([A-Za-z]+))?\$[0-9]+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：26
攻击字符串：""+"!$0:$0"*5000+"@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1002
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：'?(▻[^']*◅)▻'?!◅(▻(\$([A-Za-z]+))?\$([0-9]+)◅(▻:(\$([A-Za-z]+))?◅(▻\$◅(▻[0-9]+◅)))?)$
漏洞原因：β1 = [^']* β2 = '?!(\$([A-Za-z]+))?\$([0-9]+):(\$([A-Za-z]+))?\$[0-9]+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：27
攻击字符串：" "+"!$0:$0"*5000+" "
攻击是否成功：ATTACK_SUCCESS
攻击时间：1010
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：'?(▻[^']*◅)▻'?!◅(▻(\$([A-Za-z]+))?\$([0-9]+)◅(▻:(\$([A-Za-z]+))?◅(▻\$◅(▻[0-9]+◅)))?)$
漏洞原因：β1 = [^']* β2 = '?!(\$([A-Za-z]+))?\$([0-9]+):(\$([A-Za-z]+))?\$[0-9]+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：28
攻击字符串：""+"!$0:$0"*5000+" "
攻击是否成功：ATTACK_SUCCESS
攻击时间：1004
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：'?(▻[^']*◅)▻'?!◅(▻(\$([A-Za-z]+))?\$([0-9]+)◅(▻:(\$([A-Za-z]+))?◅(▻\$◅(▻[0-9]+◅)))?)$
漏洞原因：β1 = [^']* β2 = '?!(\$([A-Za-z]+))?\$([0-9]+):(\$([A-Za-z]+))?\$[0-9]+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：29
攻击字符串：" "+"!$0:$0"*5000+"A0A"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1012
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：'?(▻[^']*◅)▻'?!◅(▻(\$([A-Za-z]+))?\$([0-9]+)◅(▻:(\$([A-Za-z]+))?◅(▻\$◅(▻[0-9]+◅)))?)$
漏洞原因：β1 = [^']* β2 = '?!(\$([A-Za-z]+))?\$([0-9]+):(\$([A-Za-z]+))?\$[0-9]+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：30
攻击字符串：""+"!$0:$0"*5000+"A0A"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1007
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：'?(▻[^']*◅)▻'?!◅(▻(\$([A-Za-z]+))?\$([0-9]+)◅(▻:(\$([A-Za-z]+))?◅(▻\$◅(▻[0-9]+◅)))?)$
漏洞原因：β1 = [^']* β2 = '?!(\$([A-Za-z]+))?\$([0-9]+):(\$([A-Za-z]+))?\$[0-9]+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：31
攻击字符串：" "+"!$0:$0"*5000+"'0A0A'0A0A"
攻击是否成功：ATTACK_SUCCESS
攻击时间：270
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：32
攻击字符串：""+"!$0:$0"*5000+"'0A0A'0A0A"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1005
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：'?(▻[^']*◅)▻'?!◅(▻(\$([A-Za-z]+))?\$([0-9]+)◅(▻:(\$([A-Za-z]+))?◅(▻\$◅(▻[0-9]+◅)))?)$
漏洞原因：β1 = [^']* β2 = '?!(\$([A-Za-z]+))?\$([0-9]+):(\$([A-Za-z]+))?\$[0-9]+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：33
攻击字符串：""+"\u0000"*10000+"\u0000"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1008
时间复杂度：POLYNOMIAL
漏洞模式：SLQ2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：34
攻击字符串：""+"A"*10000+"'"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1002
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_1
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：35
攻击字符串："!"+"$"*10000+"◎"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1006
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：36
攻击字符串：":$0!"+"$"*10000+"◎"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1013
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：37
攻击字符串："!"+"$"*10000+"◎0"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1012
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：38
攻击字符串：":$0!"+"$"*10000+"◎A"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1006
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：39
攻击字符串：":$0!"+"$"*10000+"◎A0"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1003
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：40
攻击字符串：":$0!"+"$"*10000+"◎A◎"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1008
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：41
攻击字符串：":$0!"+"$"*10000+"◎A◎A"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1008
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：42
攻击字符串：""+"!$"*5000+"◎"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1016
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：43
攻击字符串：""+"!$"*5000+"◎0"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1014
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：44
攻击字符串："!"+"$A$"*5000+"◎"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1008
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：45
攻击字符串："!"+"$A$"*5000+"◎A◎"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1010
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：46
攻击字符串：""+"!$A$"*5000+"◎"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1008
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：47
攻击字符串：""+"!$A$"*5000+"◎A◎"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1004
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：48
攻击字符串：""+":$0!$"*5000+"◎"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1002
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：49
攻击字符串：""+":$0!$"*5000+"◎A"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1015
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：50
攻击字符串：""+":$0!$"*5000+"◎A0"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1004
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：51
攻击字符串：""+":$0!$"*5000+"◎A◎"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1004
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：52
攻击字符串：""+":$0!$"*5000+"◎A◎A"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1001
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:33
正则表达式:'Page\$(\d*)
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:34
正则表达式:'[^']*'
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:35
正则表达式:'\.\.\/([^']*)'
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:36
正则表达式:'\?(.)'
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:37
正则表达式:'file'\s*:\s*'(.*)'
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:38
正则表达式:(''')\s*$
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:39
正则表达式:('(?:[^']|(?:''))*')
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:40
正则表达式:('.')\s*(.*)
是否是ReDos漏洞：RESULT-TRUE
攻击字符串如下:
------------------------
编号：1
攻击字符串："'\u0000' "+"\t"*20000+"\n1\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1002
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：('.')▻\s*◅(▻.*◅)
漏洞原因：β1 = \s* β2 = .* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：2
攻击字符串："'1'"+"\t"*20000+"\n1\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1014
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：('.')▻\s*◅(▻.*◅)
漏洞原因：β1 = \s* β2 = .* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：3
攻击字符串："'\u0000' "+"\t"*10000+"!\n!\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1009
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：('.')▻\s*◅(▻.*◅)
漏洞原因：β1 = \s* β2 = .* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：4
攻击字符串："'1'"+"\t"*20000+"!\n!\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1016
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：('.')▻\s*◅(▻.*◅)
漏洞原因：β1 = \s* β2 = .* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:41
正则表达式:('[{}]')
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:42
正则表达式:('|\x00|%)
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:43
正则表达式:((?:\'[^\'\n\r]*\')+)
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:44
正则表达式:((?<=\()[A-Za-z][A-Za-z0-9\+\.\-]*:([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+(?=\)))|([A-Za-z][A-Za-z0-9\+\.\-]*:([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+)|\bmailto:\S*[^\s\W]|\b\S+@\S+\.\S*[^\s\W]|((?<=\()(www|ftp)\.([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+(?=\)))|((www|ftp)\.([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+\.([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+)
是否是ReDos漏洞：RESULT-TRUE
攻击字符串如下:
------------------------
编号：1
攻击字符串："A"+"\u0000@\u0000"*5000+"0"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1003
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：((?<=\()[A-Za-z][A-Za-z0-9\+\.\-]*:([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+(?=\)))|([A-Za-z][A-Za-z0-9\+\.\-]*:([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+)|\bmailto:\S*[^\s\W]|\b▻\S+@\S+◅\.\S*[^\s\W]|((?<=\()(www|ftp)\.([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+(?=\)))|((www|ftp)\.([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+\.([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+)
漏洞原因：β1 = \S+ β2 = @\S+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：2
攻击字符串："A"+"\u0000@\u0000"*5000+" "
攻击是否成功：ATTACK_SUCCESS
攻击时间：1016
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：((?<=\()[A-Za-z][A-Za-z0-9\+\.\-]*:([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+(?=\)))|([A-Za-z][A-Za-z0-9\+\.\-]*:([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+)|\bmailto:\S*[^\s\W]|\b▻\S+@\S+◅\.\S*[^\s\W]|((?<=\()(www|ftp)\.([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+(?=\)))|((www|ftp)\.([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+\.([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+)
漏洞原因：β1 = \S+ β2 = @\S+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：3
攻击字符串："A"+"\u0000@\u0000"*5000+"~`◎G~`◎G `◎G`◎G`◎G~`◎G~`◎G `◎G`◎G`◎G"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1005
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：((?<=\()[A-Za-z][A-Za-z0-9\+\.\-]*:([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+(?=\)))|([A-Za-z][A-Za-z0-9\+\.\-]*:([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+)|\bmailto:\S*[^\s\W]|\b▻\S+@\S+◅\.\S*[^\s\W]|((?<=\()(www|ftp)\.([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+(?=\)))|((www|ftp)\.([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+\.([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+)
漏洞原因：β1 = \S+ β2 = @\S+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：4
攻击字符串："A"+"\u0000@\u0000"*5000+" 1 "
攻击是否成功：ATTACK_SUCCESS
攻击时间：1016
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：((?<=\()[A-Za-z][A-Za-z0-9\+\.\-]*:([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+(?=\)))|([A-Za-z][A-Za-z0-9\+\.\-]*:([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+)|\bmailto:\S*[^\s\W]|\b▻\S+@\S+◅\.\S*[^\s\W]|((?<=\()(www|ftp)\.([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+(?=\)))|((www|ftp)\.([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+\.([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+)
漏洞原因：β1 = \S+ β2 = @\S+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：5
攻击字符串："A"+"\u0000@\u0000."*5000+""
攻击是否成功：ATTACK_SUCCESS
攻击时间：1019
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：((?<=\()[A-Za-z][A-Za-z0-9\+\.\-]*:([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+(?=\)))|([A-Za-z][A-Za-z0-9\+\.\-]*:([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+)|\bmailto:\S*[^\s\W]|\b▻\S+@\S+\.\S*◅[^\s\W]|((?<=\()(www|ftp)\.([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+(?=\)))|((www|ftp)\.([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+\.([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+)
漏洞原因：β1 = \S+ β2 = @\S+\.\S* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：6
攻击字符串："A"+"\u0000@\u0000."*5000+" "
攻击是否成功：ATTACK_SUCCESS
攻击时间：1005
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：((?<=\()[A-Za-z][A-Za-z0-9\+\.\-]*:([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+(?=\)))|([A-Za-z][A-Za-z0-9\+\.\-]*:([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+)|\bmailto:\S*[^\s\W]|\b▻\S+@\S+\.\S*◅[^\s\W]|((?<=\()(www|ftp)\.([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+(?=\)))|((www|ftp)\.([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+\.([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+)
漏洞原因：β1 = \S+ β2 = @\S+\.\S* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：7
攻击字符串："A"+"\u0000@\u0000."*5000+"~`◎G~`◎G `◎G`◎G`◎G~`◎G~`◎G `◎G`◎G`◎G"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1012
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：((?<=\()[A-Za-z][A-Za-z0-9\+\.\-]*:([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+(?=\)))|([A-Za-z][A-Za-z0-9\+\.\-]*:([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+)|\bmailto:\S*[^\s\W]|\b▻\S+@\S+\.\S*◅[^\s\W]|((?<=\()(www|ftp)\.([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+(?=\)))|((www|ftp)\.([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+\.([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+)
漏洞原因：β1 = \S+ β2 = @\S+\.\S* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：8
攻击字符串："0@\u0000"+"\u0000."*5000+""
攻击是否成功：ATTACK_SUCCESS
攻击时间：1012
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：((?<=\()[A-Za-z][A-Za-z0-9\+\.\-]*:([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+(?=\)))|([A-Za-z][A-Za-z0-9\+\.\-]*:([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+)|\bmailto:\S*[^\s\W]|\b\S+@▻\S+\.\S*◅[^\s\W]|((?<=\()(www|ftp)\.([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+(?=\)))|((www|ftp)\.([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+\.([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+)
漏洞原因：β1 = \S+ β2 = \.\S* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：9
攻击字符串："A@"+"\u0000."*5000+""
攻击是否成功：ATTACK_SUCCESS
攻击时间：1017
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：((?<=\()[A-Za-z][A-Za-z0-9\+\.\-]*:([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+(?=\)))|([A-Za-z][A-Za-z0-9\+\.\-]*:([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+)|\bmailto:\S*[^\s\W]|\b\S+@▻\S+\.\S*◅[^\s\W]|((?<=\()(www|ftp)\.([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+(?=\)))|((www|ftp)\.([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+\.([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+)
漏洞原因：β1 = \S+ β2 = \.\S* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：10
攻击字符串："0@\u0000"+"\u0000."*5000+" "
攻击是否成功：ATTACK_SUCCESS
攻击时间：1005
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：((?<=\()[A-Za-z][A-Za-z0-9\+\.\-]*:([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+(?=\)))|([A-Za-z][A-Za-z0-9\+\.\-]*:([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+)|\bmailto:\S*[^\s\W]|\b\S+@▻\S+\.\S*◅[^\s\W]|((?<=\()(www|ftp)\.([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+(?=\)))|((www|ftp)\.([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+\.([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+)
漏洞原因：β1 = \S+ β2 = \.\S* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：11
攻击字符串："A@"+"\u0000."*5000+" "
攻击是否成功：ATTACK_SUCCESS
攻击时间：1010
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：((?<=\()[A-Za-z][A-Za-z0-9\+\.\-]*:([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+(?=\)))|([A-Za-z][A-Za-z0-9\+\.\-]*:([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+)|\bmailto:\S*[^\s\W]|\b\S+@▻\S+\.\S*◅[^\s\W]|((?<=\()(www|ftp)\.([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+(?=\)))|((www|ftp)\.([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+\.([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+)
漏洞原因：β1 = \S+ β2 = \.\S* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：12
攻击字符串："0@\u0000"+"\u0000."*10000+"~`◎G~`◎G `◎G`◎G`◎G~`◎G~`◎G `◎G`◎G`◎G"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1005
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：((?<=\()[A-Za-z][A-Za-z0-9\+\.\-]*:([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+(?=\)))|([A-Za-z][A-Za-z0-9\+\.\-]*:([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+)|\bmailto:\S*[^\s\W]|\b\S+@▻\S+\.\S*◅[^\s\W]|((?<=\()(www|ftp)\.([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+(?=\)))|((www|ftp)\.([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+\.([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+)
漏洞原因：β1 = \S+ β2 = \.\S* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：13
攻击字符串："A@"+"\u0000."*10000+"~`◎G~`◎G `◎G`◎G`◎G~`◎G~`◎G `◎G`◎G`◎G"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1004
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：((?<=\()[A-Za-z][A-Za-z0-9\+\.\-]*:([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+(?=\)))|([A-Za-z][A-Za-z0-9\+\.\-]*:([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+)|\bmailto:\S*[^\s\W]|\b\S+@▻\S+\.\S*◅[^\s\W]|((?<=\()(www|ftp)\.([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+(?=\)))|((www|ftp)\.([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+\.([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+)
漏洞原因：β1 = \S+ β2 = \.\S* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：14
攻击字符串："www."+"!.@"*5000+"~`◎G~`◎G `◎G`◎G`◎G~`◎G~`◎G `◎G`◎G`◎G"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1008
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：((?<=\()[A-Za-z][A-Za-z0-9\+\.\-]*:([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+(?=\)))|([A-Za-z][A-Za-z0-9\+\.\-]*:([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+)|\bmailto:\S*[^\s\W]|\b\S+@\S+\.\S*[^\s\W]|((?<=\()(www|ftp)\.([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+(?=\)))|((www|ftp)\.▻([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+\.([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+◅)
漏洞原因：β1 = ([@\]\$\(\)A-Z\*a-z\+\-\.\/0-9_!\?#&',:;=~\[]|%[A-Fa-f0-9]{2})+ β2 = \.([@\]\$\(\)A-Z\*a-z\+\-\.\/0-9_!\?#&',:;=~\[]|%[A-Fa-f0-9]{2})+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：15
攻击字符串："ftp.@"+"!.@"*5000+"~`◎G~`◎G `◎G`◎G`◎G~`◎G~`◎G `◎G`◎G`◎G"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1008
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：((?<=\()[A-Za-z][A-Za-z0-9\+\.\-]*:([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+(?=\)))|([A-Za-z][A-Za-z0-9\+\.\-]*:([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+)|\bmailto:\S*[^\s\W]|\b\S+@\S+\.\S*[^\s\W]|((?<=\()(www|ftp)\.([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+(?=\)))|((www|ftp)\.▻([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+\.([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+◅)
漏洞原因：β1 = ([@\]\$\(\)A-Z\*a-z\+\-\.\/0-9_!\?#&',:;=~\[]|%[A-Fa-f0-9]{2})+ β2 = \.([@\]\$\(\)A-Z\*a-z\+\-\.\/0-9_!\?#&',:;=~\[]|%[A-Fa-f0-9]{2})+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：16
攻击字符串："ftp.@"+"!.!"*5000+"~`◎G~`◎G `◎G`◎G`◎G~`◎G~`◎G `◎G`◎G`◎G"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1012
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：((?<=\()[A-Za-z][A-Za-z0-9\+\.\-]*:([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+(?=\)))|([A-Za-z][A-Za-z0-9\+\.\-]*:([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+)|\bmailto:\S*[^\s\W]|\b\S+@\S+\.\S*[^\s\W]|((?<=\()(www|ftp)\.([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+(?=\)))|((www|ftp)\.▻([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+\.([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+◅)
漏洞原因：β1 = ([@\]\$\(\)A-Z\*a-z\+\-\.\/0-9_!\?#&',:;=~\[]|%[A-Fa-f0-9]{2})+ β2 = \.([@\]\$\(\)A-Z\*a-z\+\-\.\/0-9_!\?#&',:;=~\[]|%[A-Fa-f0-9]{2})+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：17
攻击字符串："www."+"!.@"*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1015
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：((?<=\()[A-Za-z][A-Za-z0-9\+\.\-]*:([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+(?=\)))|([A-Za-z][A-Za-z0-9\+\.\-]*:([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+)|\bmailto:\S*[^\s\W]|\b\S+@\S+\.\S*[^\s\W]|((?<=\()(www|ftp)\.([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+(?=\)))|((www|ftp)\.▻([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+\.([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+◅)
漏洞原因：β1 = ([@\]\$\(\)A-Z\*a-z\+\-\.\/0-9_!\?#&',:;=~\[]|%[A-Fa-f0-9]{2})+ β2 = \.([@\]\$\(\)A-Z\*a-z\+\-\.\/0-9_!\?#&',:;=~\[]|%[A-Fa-f0-9]{2})+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：18
攻击字符串："ftp.@"+"!.@"*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1012
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：((?<=\()[A-Za-z][A-Za-z0-9\+\.\-]*:([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+(?=\)))|([A-Za-z][A-Za-z0-9\+\.\-]*:([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+)|\bmailto:\S*[^\s\W]|\b\S+@\S+\.\S*[^\s\W]|((?<=\()(www|ftp)\.([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+(?=\)))|((www|ftp)\.▻([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+\.([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+◅)
漏洞原因：β1 = ([@\]\$\(\)A-Z\*a-z\+\-\.\/0-9_!\?#&',:;=~\[]|%[A-Fa-f0-9]{2})+ β2 = \.([@\]\$\(\)A-Z\*a-z\+\-\.\/0-9_!\?#&',:;=~\[]|%[A-Fa-f0-9]{2})+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：19
攻击字符串："ftp.@"+"!.!"*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1010
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：((?<=\()[A-Za-z][A-Za-z0-9\+\.\-]*:([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+(?=\)))|([A-Za-z][A-Za-z0-9\+\.\-]*:([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+)|\bmailto:\S*[^\s\W]|\b\S+@\S+\.\S*[^\s\W]|((?<=\()(www|ftp)\.([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+(?=\)))|((www|ftp)\.▻([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+\.([A-Za-z0-9\.\-_~:\/\?#\[\]@!\$&'\(\)\*\+,;=]|%[A-Fa-f0-9]{2})+◅)
漏洞原因：β1 = ([@\]\$\(\)A-Z\*a-z\+\-\.\/0-9_!\?#&',:;=~\[]|%[A-Fa-f0-9]{2})+ β2 = \.([@\]\$\(\)A-Z\*a-z\+\-\.\/0-9_!\?#&',:;=~\[]|%[A-Fa-f0-9]{2})+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：20
攻击字符串：""+"a"*10000+"\u0000"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1007
时间复杂度：POLYNOMIAL
漏洞模式：SLQ2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：21
攻击字符串：""+"0@"*5000+"."
攻击是否成功：ATTACK_SUCCESS
攻击时间：1005
时间复杂度：POLYNOMIAL
漏洞模式：SLQ2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：22
攻击字符串：""+"A"*10000+"~0"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1017
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:45
正则表达式:(([$@%\\*&]+)\s*)?((::)?\b((?!\d)\w*?(::|'))*)((?!\d)\w+)$
是否是ReDos漏洞：RESULT-TRUE
攻击字符串如下:
------------------------
编号：1
攻击字符串：""+"@"*10000+"!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1004
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:46
正则表达式:(.*?)','
是否是ReDos漏洞：RESULT-TRUE
攻击字符串如下:
------------------------
编号：1
攻击字符串：""+"'"*10000+"\u0000"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1014
时间复杂度：POLYNOMIAL
漏洞模式：SLQ2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：2
攻击字符串：""+"1"*10000+"@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1010
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_1
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：3
攻击字符串：""+"1"*10000+"\n@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1002
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:47
正则表达式:(<module 'epydoc_test' from ).*
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:48
正则表达式:(?:[-a-zA-Z0-9!$&'\(\)\*+,;=._~]|%[a-zA-Z0-9]{2})+$
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:49
正则表达式:(?<!\\)'
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:50
正则表达式:(?<=SECRET_KEY = ')'
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:51
正则表达式:(?i)(.)('ll|'re|'ve|n't|'s|'m|'d)\b
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:52
正则表达式:(?i)\b(D)('ye)\b
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:53
正则表达式:(?i)\b(Mor)('n)\b
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:54
正则表达式:(?im)^what's new in (.*?)\??$
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:55
正则表达式:(?mx) ([^';]* (?:'[^']*'[^';]*)*)
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:56
正则表达式:(?x)\n        # Tokenize the input into keyword, separator, noise\n        ([a-zA-Z0-9_]+)         |   # A keyword is a alphanum word\n        ( \. | \:\: | \-\> )    |   # These are the allowed separators\n        (.)                         # If it doesn't fit, it's noise.\n            # Matching a single noise char is enough, because it\n            # is used to break the tokenization as soon as some noise\n            # is found.\n        
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:57
正则表达式:(['])
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:58
正则表达式:([,']\s)
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:59
正则表达式:([0-9]+)'
是否是ReDos漏洞：RESULT-TRUE
攻击字符串如下:
------------------------
编号：1
攻击字符串：""+"0"*10000+"\u0000"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1010
时间复杂度：POLYNOMIAL
漏洞模式：SLQ2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：2
攻击字符串：""+"0"*10000+"@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1006
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_1
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：3
攻击字符串：""+"0"*10000+"A"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1011
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:60
正则表达式:([\\'])
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:61
正则表达式:([\w.!~*'|;:&=+$,-]+@)?(([A-Za-z0-9]+[A-Za-z0-9\-]*[A-Za-z0-9]+\.)*([A-Za-z0-9]+\.)*)*([A-Za-z]+[A-Za-z0-9\-]*[A-Za-z0-9]+)\.?(:\d*)*$
是否是ReDos漏洞：RESULT-TRUE
攻击字符串如下:
------------------------
编号：1
攻击字符串："00."+"0-0.0."*32+" "
攻击是否成功：ATTACK_SUCCESS
攻击时间：1012
时间复杂度：EXPONENT
漏洞模式：NQ
漏洞位置：([\w.!~*'|;:&=+$,-]+@)?►(▻([A-Za-z0-9]+[A-Za-z0-9\-]*[A-Za-z0-9]+\.)*◅([A-Za-z0-9]+\.)*)*◄([A-Za-z]+[A-Za-z0-9\-]*[A-Za-z0-9]+)\.?(:\d*)*$
漏洞原因：There is a nested quantifier node ([A-Za-z0-9]+[A-Za-z0-9\-]*[A-Za-z0-9]+\.)* in (([A-Za-z0-9]+[A-Za-z0-9\-]*[A-Za-z0-9]+\.)*([A-Za-z0-9]+\.)*)*.
------------------------
------------------------
编号：2
攻击字符串："00."+"0-0.0."*32+"!1!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1014
时间复杂度：EXPONENT
漏洞模式：NQ
漏洞位置：([\w.!~*'|;:&=+$,-]+@)?►(▻([A-Za-z0-9]+[A-Za-z0-9\-]*[A-Za-z0-9]+\.)*◅([A-Za-z0-9]+\.)*)*◄([A-Za-z]+[A-Za-z0-9\-]*[A-Za-z0-9]+)\.?(:\d*)*$
漏洞原因：There is a nested quantifier node ([A-Za-z0-9]+[A-Za-z0-9\-]*[A-Za-z0-9]+\.)* in (([A-Za-z0-9]+[A-Za-z0-9\-]*[A-Za-z0-9]+\.)*([A-Za-z0-9]+\.)*)*.
------------------------
------------------------
编号：3
攻击字符串："00."+"0-0.0."*32+"@~!~!~!~!~0~◎!@~!~!~!~!~0~◎!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1002
时间复杂度：EXPONENT
漏洞模式：NQ
漏洞位置：([\w.!~*'|;:&=+$,-]+@)?►(▻([A-Za-z0-9]+[A-Za-z0-9\-]*[A-Za-z0-9]+\.)*◅([A-Za-z0-9]+\.)*)*◄([A-Za-z]+[A-Za-z0-9\-]*[A-Za-z0-9]+)\.?(:\d*)*$
漏洞原因：There is a nested quantifier node ([A-Za-z0-9]+[A-Za-z0-9\-]*[A-Za-z0-9]+\.)* in (([A-Za-z0-9]+[A-Za-z0-9\-]*[A-Za-z0-9]+\.)*([A-Za-z0-9]+\.)*)*.
------------------------
------------------------
编号：4
攻击字符串："00."+"00."*16+" "
攻击是否成功：ATTACK_SUCCESS
攻击时间：1005
时间复杂度：EXPONENT
漏洞模式：NQ
漏洞位置：([\w.!~*'|;:&=+$,-]+@)?►(▻([A-Za-z0-9]+[A-Za-z0-9\-]*[A-Za-z0-9]+\.)*◅([A-Za-z0-9]+\.)*)*◄([A-Za-z]+[A-Za-z0-9\-]*[A-Za-z0-9]+)\.?(:\d*)*$
漏洞原因：There is a nested quantifier node ([A-Za-z0-9]+[A-Za-z0-9\-]*[A-Za-z0-9]+\.)* in (([A-Za-z0-9]+[A-Za-z0-9\-]*[A-Za-z0-9]+\.)*([A-Za-z0-9]+\.)*)*.
------------------------
------------------------
编号：5
攻击字符串："00."+"00."*16+"!1!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1002
时间复杂度：EXPONENT
漏洞模式：NQ
漏洞位置：([\w.!~*'|;:&=+$,-]+@)?►(▻([A-Za-z0-9]+[A-Za-z0-9\-]*[A-Za-z0-9]+\.)*◅([A-Za-z0-9]+\.)*)*◄([A-Za-z]+[A-Za-z0-9\-]*[A-Za-z0-9]+)\.?(:\d*)*$
漏洞原因：There is a nested quantifier node ([A-Za-z0-9]+[A-Za-z0-9\-]*[A-Za-z0-9]+\.)* in (([A-Za-z0-9]+[A-Za-z0-9\-]*[A-Za-z0-9]+\.)*([A-Za-z0-9]+\.)*)*.
------------------------
------------------------
编号：6
攻击字符串："00."+"00."*16+"@~!~!~!~!~0~◎!@~!~!~!~!~0~◎!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1006
时间复杂度：EXPONENT
漏洞模式：NQ
漏洞位置：([\w.!~*'|;:&=+$,-]+@)?►(▻([A-Za-z0-9]+[A-Za-z0-9\-]*[A-Za-z0-9]+\.)*◅([A-Za-z0-9]+\.)*)*◄([A-Za-z]+[A-Za-z0-9\-]*[A-Za-z0-9]+)\.?(:\d*)*$
漏洞原因：There is a nested quantifier node ([A-Za-z0-9]+[A-Za-z0-9\-]*[A-Za-z0-9]+\.)* in (([A-Za-z0-9]+[A-Za-z0-9\-]*[A-Za-z0-9]+\.)*([A-Za-z0-9]+\.)*)*.
------------------------
------------------------
编号：7
攻击字符串："0."+"0-0.0."*32+" "
攻击是否成功：ATTACK_SUCCESS
攻击时间：1015
时间复杂度：EXPONENT
漏洞模式：NQ
漏洞位置：([\w.!~*'|;:&=+$,-]+@)?►(([A-Za-z0-9]+[A-Za-z0-9\-]*[A-Za-z0-9]+\.)*▻([A-Za-z0-9]+\.)*◅)*◄([A-Za-z]+[A-Za-z0-9\-]*[A-Za-z0-9]+)\.?(:\d*)*$
漏洞原因：There is a nested quantifier node ([A-Za-z0-9]+\.)* in (([A-Za-z0-9]+[A-Za-z0-9\-]*[A-Za-z0-9]+\.)*([A-Za-z0-9]+\.)*)*.
------------------------
------------------------
编号：8
攻击字符串："0."+"0-0.0."*32+"!1!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1010
时间复杂度：EXPONENT
漏洞模式：NQ
漏洞位置：([\w.!~*'|;:&=+$,-]+@)?►(([A-Za-z0-9]+[A-Za-z0-9\-]*[A-Za-z0-9]+\.)*▻([A-Za-z0-9]+\.)*◅)*◄([A-Za-z]+[A-Za-z0-9\-]*[A-Za-z0-9]+)\.?(:\d*)*$
漏洞原因：There is a nested quantifier node ([A-Za-z0-9]+\.)* in (([A-Za-z0-9]+[A-Za-z0-9\-]*[A-Za-z0-9]+\.)*([A-Za-z0-9]+\.)*)*.
------------------------
------------------------
编号：9
攻击字符串："0."+"0-0.0."*32+"@~!~!~!~!~0~◎!@~!~!~!~!~0~◎!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1008
时间复杂度：EXPONENT
漏洞模式：NQ
漏洞位置：([\w.!~*'|;:&=+$,-]+@)?►(([A-Za-z0-9]+[A-Za-z0-9\-]*[A-Za-z0-9]+\.)*▻([A-Za-z0-9]+\.)*◅)*◄([A-Za-z]+[A-Za-z0-9\-]*[A-Za-z0-9]+)\.?(:\d*)*$
漏洞原因：There is a nested quantifier node ([A-Za-z0-9]+\.)* in (([A-Za-z0-9]+[A-Za-z0-9\-]*[A-Za-z0-9]+\.)*([A-Za-z0-9]+\.)*)*.
------------------------
------------------------
编号：10
攻击字符串："0."+"0."*32+" "
攻击是否成功：ATTACK_SUCCESS
攻击时间：1008
时间复杂度：EXPONENT
漏洞模式：NQ
漏洞位置：([\w.!~*'|;:&=+$,-]+@)?►(([A-Za-z0-9]+[A-Za-z0-9\-]*[A-Za-z0-9]+\.)*▻([A-Za-z0-9]+\.)*◅)*◄([A-Za-z]+[A-Za-z0-9\-]*[A-Za-z0-9]+)\.?(:\d*)*$
漏洞原因：There is a nested quantifier node ([A-Za-z0-9]+\.)* in (([A-Za-z0-9]+[A-Za-z0-9\-]*[A-Za-z0-9]+\.)*([A-Za-z0-9]+\.)*)*.
------------------------
------------------------
编号：11
攻击字符串："0."+"0."*32+"!1!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1008
时间复杂度：EXPONENT
漏洞模式：NQ
漏洞位置：([\w.!~*'|;:&=+$,-]+@)?►(([A-Za-z0-9]+[A-Za-z0-9\-]*[A-Za-z0-9]+\.)*▻([A-Za-z0-9]+\.)*◅)*◄([A-Za-z]+[A-Za-z0-9\-]*[A-Za-z0-9]+)\.?(:\d*)*$
漏洞原因：There is a nested quantifier node ([A-Za-z0-9]+\.)* in (([A-Za-z0-9]+[A-Za-z0-9\-]*[A-Za-z0-9]+\.)*([A-Za-z0-9]+\.)*)*.
------------------------
------------------------
编号：12
攻击字符串："0."+"0."*32+"@~!~!~!~!~0~◎!@~!~!~!~!~0~◎!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1008
时间复杂度：EXPONENT
漏洞模式：NQ
漏洞位置：([\w.!~*'|;:&=+$,-]+@)?►(([A-Za-z0-9]+[A-Za-z0-9\-]*[A-Za-z0-9]+\.)*▻([A-Za-z0-9]+\.)*◅)*◄([A-Za-z]+[A-Za-z0-9\-]*[A-Za-z0-9]+)\.?(:\d*)*$
漏洞原因：There is a nested quantifier node ([A-Za-z0-9]+\.)* in (([A-Za-z0-9]+[A-Za-z0-9\-]*[A-Za-z0-9]+\.)*([A-Za-z0-9]+\.)*)*.
------------------------
------------------------
编号：13
攻击字符串：""+"0000."*8+"@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1013
时间复杂度：EXPONENT
漏洞模式：EOA_i1
漏洞位置：([\w.!~*'|;:&=+$,-]+@)?►(▻([A-Za-z0-9]+[A-Za-z0-9\-]*[A-Za-z0-9]+\.)*([A-Za-z0-9]+\.)*◅)*◄([A-Za-z]+[A-Za-z0-9\-]*[A-Za-z0-9]+)\.?(:\d*)*$
漏洞原因：β1 = ([0-9A-Za-z]+[\-0-9A-Za-z]*[0-9A-Za-z]+\.)* β2 = ([0-9A-Za-z]+\.)* (β1.followLast ∪ β1.last) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：14
攻击字符串：""+"00."*16+"@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1012
时间复杂度：EXPONENT
漏洞模式：EOA_i1
漏洞位置：([\w.!~*'|;:&=+$,-]+@)?►(▻([A-Za-z0-9]+[A-Za-z0-9\-]*[A-Za-z0-9]+\.)*([A-Za-z0-9]+\.)*◅)*◄([A-Za-z]+[A-Za-z0-9\-]*[A-Za-z0-9]+)\.?(:\d*)*$
漏洞原因：β1 = ([0-9A-Za-z]+[\-0-9A-Za-z]*[0-9A-Za-z]+\.)* β2 = ([0-9A-Za-z]+\.)* (β1.followLast ∪ β1.last) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：15
攻击字符串："0."+"0000."*8+"@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1007
时间复杂度：EXPONENT
漏洞模式：EOA_i1
漏洞位置：([\w.!~*'|;:&=+$,-]+@)?►(▻([A-Za-z0-9]+[A-Za-z0-9\-]*[A-Za-z0-9]+\.)*([A-Za-z0-9]+\.)*◅)*◄([A-Za-z]+[A-Za-z0-9\-]*[A-Za-z0-9]+)\.?(:\d*)*$
漏洞原因：β1 = ([0-9A-Za-z]+[\-0-9A-Za-z]*[0-9A-Za-z]+\.)* β2 = ([0-9A-Za-z]+\.)* (β1.followLast ∪ β1.last) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：16
攻击字符串："0."+"00."*16+"@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1014
时间复杂度：EXPONENT
漏洞模式：EOA_i1
漏洞位置：([\w.!~*'|;:&=+$,-]+@)?►(▻([A-Za-z0-9]+[A-Za-z0-9\-]*[A-Za-z0-9]+\.)*([A-Za-z0-9]+\.)*◅)*◄([A-Za-z]+[A-Za-z0-9\-]*[A-Za-z0-9]+)\.?(:\d*)*$
漏洞原因：β1 = ([0-9A-Za-z]+[\-0-9A-Za-z]*[0-9A-Za-z]+\.)* β2 = ([0-9A-Za-z]+\.)* (β1.followLast ∪ β1.last) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：17
攻击字符串：""+"0000."*8+" "
攻击是否成功：ATTACK_SUCCESS
攻击时间：1002
时间复杂度：EXPONENT
漏洞模式：EOA_i1
漏洞位置：([\w.!~*'|;:&=+$,-]+@)?►(▻([A-Za-z0-9]+[A-Za-z0-9\-]*[A-Za-z0-9]+\.)*([A-Za-z0-9]+\.)*◅)*◄([A-Za-z]+[A-Za-z0-9\-]*[A-Za-z0-9]+)\.?(:\d*)*$
漏洞原因：β1 = ([0-9A-Za-z]+[\-0-9A-Za-z]*[0-9A-Za-z]+\.)* β2 = ([0-9A-Za-z]+\.)* (β1.followLast ∪ β1.last) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：18
攻击字符串："0."+"0000."*8+" "
攻击是否成功：ATTACK_SUCCESS
攻击时间：1006
时间复杂度：EXPONENT
漏洞模式：EOA_i1
漏洞位置：([\w.!~*'|;:&=+$,-]+@)?►(▻([A-Za-z0-9]+[A-Za-z0-9\-]*[A-Za-z0-9]+\.)*([A-Za-z0-9]+\.)*◅)*◄([A-Za-z]+[A-Za-z0-9\-]*[A-Za-z0-9]+)\.?(:\d*)*$
漏洞原因：β1 = ([0-9A-Za-z]+[\-0-9A-Za-z]*[0-9A-Za-z]+\.)* β2 = ([0-9A-Za-z]+\.)* (β1.followLast ∪ β1.last) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：19
攻击字符串："0."+"00."*16+" "
攻击是否成功：ATTACK_SUCCESS
攻击时间：1005
时间复杂度：EXPONENT
漏洞模式：EOA_i1
漏洞位置：([\w.!~*'|;:&=+$,-]+@)?►(▻([A-Za-z0-9]+[A-Za-z0-9\-]*[A-Za-z0-9]+\.)*([A-Za-z0-9]+\.)*◅)*◄([A-Za-z]+[A-Za-z0-9\-]*[A-Za-z0-9]+)\.?(:\d*)*$
漏洞原因：β1 = ([0-9A-Za-z]+[\-0-9A-Za-z]*[0-9A-Za-z]+\.)* β2 = ([0-9A-Za-z]+\.)* (β1.followLast ∪ β1.last) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：20
攻击字符串：""+"0000."*8+"!1!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1012
时间复杂度：EXPONENT
漏洞模式：EOA_i1
漏洞位置：([\w.!~*'|;:&=+$,-]+@)?►(▻([A-Za-z0-9]+[A-Za-z0-9\-]*[A-Za-z0-9]+\.)*([A-Za-z0-9]+\.)*◅)*◄([A-Za-z]+[A-Za-z0-9\-]*[A-Za-z0-9]+)\.?(:\d*)*$
漏洞原因：β1 = ([0-9A-Za-z]+[\-0-9A-Za-z]*[0-9A-Za-z]+\.)* β2 = ([0-9A-Za-z]+\.)* (β1.followLast ∪ β1.last) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：21
攻击字符串："0."+"0000."*8+"!1!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1012
时间复杂度：EXPONENT
漏洞模式：EOA_i1
漏洞位置：([\w.!~*'|;:&=+$,-]+@)?►(▻([A-Za-z0-9]+[A-Za-z0-9\-]*[A-Za-z0-9]+\.)*([A-Za-z0-9]+\.)*◅)*◄([A-Za-z]+[A-Za-z0-9\-]*[A-Za-z0-9]+)\.?(:\d*)*$
漏洞原因：β1 = ([0-9A-Za-z]+[\-0-9A-Za-z]*[0-9A-Za-z]+\.)* β2 = ([0-9A-Za-z]+\.)* (β1.followLast ∪ β1.last) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：22
攻击字符串："0."+"00."*16+"!1!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1004
时间复杂度：EXPONENT
漏洞模式：EOA_i1
漏洞位置：([\w.!~*'|;:&=+$,-]+@)?►(▻([A-Za-z0-9]+[A-Za-z0-9\-]*[A-Za-z0-9]+\.)*([A-Za-z0-9]+\.)*◅)*◄([A-Za-z]+[A-Za-z0-9\-]*[A-Za-z0-9]+)\.?(:\d*)*$
漏洞原因：β1 = ([0-9A-Za-z]+[\-0-9A-Za-z]*[0-9A-Za-z]+\.)* β2 = ([0-9A-Za-z]+\.)* (β1.followLast ∪ β1.last) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：23
攻击字符串：""+"0000."*8+"@~!~!~!~!~0~◎!@~!~!~!~!~0~◎!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1004
时间复杂度：EXPONENT
漏洞模式：EOA_i1
漏洞位置：([\w.!~*'|;:&=+$,-]+@)?►(▻([A-Za-z0-9]+[A-Za-z0-9\-]*[A-Za-z0-9]+\.)*([A-Za-z0-9]+\.)*◅)*◄([A-Za-z]+[A-Za-z0-9\-]*[A-Za-z0-9]+)\.?(:\d*)*$
漏洞原因：β1 = ([0-9A-Za-z]+[\-0-9A-Za-z]*[0-9A-Za-z]+\.)* β2 = ([0-9A-Za-z]+\.)* (β1.followLast ∪ β1.last) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：24
攻击字符串："0."+"0000."*8+"@~!~!~!~!~0~◎!@~!~!~!~!~0~◎!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1007
时间复杂度：EXPONENT
漏洞模式：EOA_i1
漏洞位置：([\w.!~*'|;:&=+$,-]+@)?►(▻([A-Za-z0-9]+[A-Za-z0-9\-]*[A-Za-z0-9]+\.)*([A-Za-z0-9]+\.)*◅)*◄([A-Za-z]+[A-Za-z0-9\-]*[A-Za-z0-9]+)\.?(:\d*)*$
漏洞原因：β1 = ([0-9A-Za-z]+[\-0-9A-Za-z]*[0-9A-Za-z]+\.)* β2 = ([0-9A-Za-z]+\.)* (β1.followLast ∪ β1.last) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：25
攻击字符串："0."+"00."*16+"@~!~!~!~!~0~◎!@~!~!~!~!~0~◎!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1002
时间复杂度：EXPONENT
漏洞模式：EOA_i1
漏洞位置：([\w.!~*'|;:&=+$,-]+@)?►(▻([A-Za-z0-9]+[A-Za-z0-9\-]*[A-Za-z0-9]+\.)*([A-Za-z0-9]+\.)*◅)*◄([A-Za-z]+[A-Za-z0-9\-]*[A-Za-z0-9]+)\.?(:\d*)*$
漏洞原因：β1 = ([0-9A-Za-z]+[\-0-9A-Za-z]*[0-9A-Za-z]+\.)* β2 = ([0-9A-Za-z]+\.)* (β1.followLast ∪ β1.last) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：26
攻击字符串：""+"000000."*8+"@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1015
时间复杂度：EXPONENT
漏洞模式：EOA_i1
漏洞位置：([\w.!~*'|;:&=+$,-]+@)?►(▻([A-Za-z0-9]+[A-Za-z0-9\-]*[A-Za-z0-9]+\.)*◅(▻[A-Za-z0-9]+\.◅)*)*◄([A-Za-z]+[A-Za-z0-9\-]*[A-Za-z0-9]+)\.?(:\d*)*$
漏洞原因：β1 = ([0-9A-Za-z]+[\-0-9A-Za-z]*[0-9A-Za-z]+\.)* β2 = [0-9A-Za-z]+\. (β1.followLast ∪ β1.last) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：27
攻击字符串：""+"A."*32+"@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1002
时间复杂度：EXPONENT
漏洞模式：EOA_i1
漏洞位置：([\w.!~*'|;:&=+$,-]+@)?►(▻([A-Za-z0-9]+[A-Za-z0-9\-]*[A-Za-z0-9]+\.)*◅(▻[A-Za-z0-9]+\.◅)*)*◄([A-Za-z]+[A-Za-z0-9\-]*[A-Za-z0-9]+)\.?(:\d*)*$
漏洞原因：β1 = ([0-9A-Za-z]+[\-0-9A-Za-z]*[0-9A-Za-z]+\.)* β2 = [0-9A-Za-z]+\. (β1.followLast ∪ β1.last) ∩ (β2.first) ≠ ∅
------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:62
正则表达式:([\w.!~*'|;:&=+$,-]+@)?\d+\.\d+\.\d+\.\d+(:\d*)*$
是否是ReDos漏洞：RESULT-TRUE
攻击字符串如下:
------------------------
编号：1
攻击字符串：""+"-"*10000+"@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1008
时间复杂度：POLYNOMIAL
漏洞模式：SLQ2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：2
攻击字符串：""+"0"*5000+"."
攻击是否成功：ATTACK_SUCCESS
攻击时间：1010
时间复杂度：POLYNOMIAL
漏洞模式：SLQ2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：3
攻击字符串：""+"A"*10000+"@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1001
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：4
攻击字符串：""+"1.1.1.1:"*5000+"a"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1013
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：5
攻击字符串：""+"1.1.1.1:"*5000+"aa"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1015
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:63
正则表达式:([\w\-\.]+)='([^']+)'
是否是ReDos漏洞：RESULT-TRUE
攻击字符串如下:
------------------------
编号：1
攻击字符串：""+"A"*10000+"="
攻击是否成功：ATTACK_SUCCESS
攻击时间：1014
时间复杂度：POLYNOMIAL
漏洞模式：SLQ2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：2
攻击字符串：""+"A"*10000+"@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1009
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_1
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：3
攻击字符串：""+"A"*10000+"~"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1005
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:64
正则表达式:([^'\\]|\\(.|$))+
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:65
正则表达式:([a-z])'([A-Z])
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:66
正则表达式:([a-z_]+) '(.*)'\t(.*)\tLoc=<(.*):(.*):(.*)>
是否是ReDos漏洞：RESULT-TRUE
攻击字符串如下:
------------------------
编号：1
攻击字符串："_ ' "+"'\t"*5000+"A"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1014
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：([a-z_]+) '(▻.*◅)▻'\t◅(▻.*◅)\tLoc=<(.*):(.*):(.*)>
漏洞原因：β1 = .* β2 = '\t.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：2
攻击字符串："a '"+"'\t"*5000+"A"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1010
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：([a-z_]+) '(▻.*◅)▻'\t◅(▻.*◅)\tLoc=<(.*):(.*):(.*)>
漏洞原因：β1 = .* β2 = '\t.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：3
攻击字符串："_ ' "+"'\t"*5000+"\n1\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1004
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：([a-z_]+) '(▻.*◅)▻'\t◅(▻.*◅)\tLoc=<(.*):(.*):(.*)>
漏洞原因：β1 = .* β2 = '\t.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：4
攻击字符串："a '"+"'\t"*5000+"\n1\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1009
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：([a-z_]+) '(▻.*◅)▻'\t◅(▻.*◅)\tLoc=<(.*):(.*):(.*)>
漏洞原因：β1 = .* β2 = '\t.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：5
攻击字符串："_ ' "+"'\t"*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1001
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：([a-z_]+) '(▻.*◅)▻'\t◅(▻.*◅)\tLoc=<(.*):(.*):(.*)>
漏洞原因：β1 = .* β2 = '\t.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：6
攻击字符串："a '"+"'\t"*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1008
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：([a-z_]+) '(▻.*◅)▻'\t◅(▻.*◅)\tLoc=<(.*):(.*):(.*)>
漏洞原因：β1 = .* β2 = '\t.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：7
攻击字符串："_ ' "+"'\t"*5000+"A\nA\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1011
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：([a-z_]+) '(▻.*◅)▻'\t◅(▻.*◅)\tLoc=<(.*):(.*):(.*)>
漏洞原因：β1 = .* β2 = '\t.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：8
攻击字符串："a '"+"'\t"*5000+"A\nA\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1012
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：([a-z_]+) '(▻.*◅)▻'\t◅(▻.*◅)\tLoc=<(.*):(.*):(.*)>
漏洞原因：β1 = .* β2 = '\t.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：9
攻击字符串："_ ' "+"'\t\tLoc=<"*5000+"A"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1014
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：([a-z_]+) '(▻.*◅)▻'\t(.*)\tLoc=<◅(▻.*◅):(.*):(.*)>
漏洞原因：β1 = .* β2 = '\t(.*)\tLoc=<.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：10
攻击字符串："a '"+"'\t\tLoc=<"*5000+"A"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1008
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：([a-z_]+) '(▻.*◅)▻'\t(.*)\tLoc=<◅(▻.*◅):(.*):(.*)>
漏洞原因：β1 = .* β2 = '\t(.*)\tLoc=<.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：11
攻击字符串："_ ' "+"'\t\tLoc=<"*5000+"\n1\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1003
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：([a-z_]+) '(▻.*◅)▻'\t(.*)\tLoc=<◅(▻.*◅):(.*):(.*)>
漏洞原因：β1 = .* β2 = '\t(.*)\tLoc=<.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：12
攻击字符串："a '"+"'\t\tLoc=<"*5000+"\n1\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1014
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：([a-z_]+) '(▻.*◅)▻'\t(.*)\tLoc=<◅(▻.*◅):(.*):(.*)>
漏洞原因：β1 = .* β2 = '\t(.*)\tLoc=<.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：13
攻击字符串："_ ' "+"'\t\tLoc=<"*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1010
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：([a-z_]+) '(▻.*◅)▻'\t(.*)\tLoc=<◅(▻.*◅):(.*):(.*)>
漏洞原因：β1 = .* β2 = '\t(.*)\tLoc=<.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：14
攻击字符串："a '"+"'\t\tLoc=<"*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1016
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：([a-z_]+) '(▻.*◅)▻'\t(.*)\tLoc=<◅(▻.*◅):(.*):(.*)>
漏洞原因：β1 = .* β2 = '\t(.*)\tLoc=<.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：15
攻击字符串："_ ' "+"'\t\tLoc=<"*5000+"A\nA\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1004
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：([a-z_]+) '(▻.*◅)▻'\t(.*)\tLoc=<◅(▻.*◅):(.*):(.*)>
漏洞原因：β1 = .* β2 = '\t(.*)\tLoc=<.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：16
攻击字符串："a '"+"'\t\tLoc=<"*5000+"A\nA\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1008
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：([a-z_]+) '(▻.*◅)▻'\t(.*)\tLoc=<◅(▻.*◅):(.*):(.*)>
漏洞原因：β1 = .* β2 = '\t(.*)\tLoc=<.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：17
攻击字符串："_ ' "+"'\t\tLoc=<:"*5000+"A"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1010
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：([a-z_]+) '(▻.*◅)▻'\t(.*)\tLoc=<(.*):◅(▻.*◅):(.*)>
漏洞原因：β1 = .* β2 = '\t(.*)\tLoc=<(.*):.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：18
攻击字符串："a '"+"'\t\tLoc=<:"*5000+"A"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1007
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：([a-z_]+) '(▻.*◅)▻'\t(.*)\tLoc=<(.*):◅(▻.*◅):(.*)>
漏洞原因：β1 = .* β2 = '\t(.*)\tLoc=<(.*):.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：19
攻击字符串："_ ' "+"'\t\tLoc=<:"*5000+"\n1\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1008
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：([a-z_]+) '(▻.*◅)▻'\t(.*)\tLoc=<(.*):◅(▻.*◅):(.*)>
漏洞原因：β1 = .* β2 = '\t(.*)\tLoc=<(.*):.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：20
攻击字符串："a '"+"'\t\tLoc=<:"*5000+"\n1\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1010
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：([a-z_]+) '(▻.*◅)▻'\t(.*)\tLoc=<(.*):◅(▻.*◅):(.*)>
漏洞原因：β1 = .* β2 = '\t(.*)\tLoc=<(.*):.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：21
攻击字符串："_ ' "+"'\t\tLoc=<:"*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1005
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：([a-z_]+) '(▻.*◅)▻'\t(.*)\tLoc=<(.*):◅(▻.*◅):(.*)>
漏洞原因：β1 = .* β2 = '\t(.*)\tLoc=<(.*):.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：22
攻击字符串："a '"+"'\t\tLoc=<:"*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1011
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：([a-z_]+) '(▻.*◅)▻'\t(.*)\tLoc=<(.*):◅(▻.*◅):(.*)>
漏洞原因：β1 = .* β2 = '\t(.*)\tLoc=<(.*):.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：23
攻击字符串："_ ' "+"'\t\tLoc=<:"*5000+"A\nA\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1013
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：([a-z_]+) '(▻.*◅)▻'\t(.*)\tLoc=<(.*):◅(▻.*◅):(.*)>
漏洞原因：β1 = .* β2 = '\t(.*)\tLoc=<(.*):.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：24
攻击字符串："a '"+"'\t\tLoc=<:"*5000+"A\nA\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1016
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：([a-z_]+) '(▻.*◅)▻'\t(.*)\tLoc=<(.*):◅(▻.*◅):(.*)>
漏洞原因：β1 = .* β2 = '\t(.*)\tLoc=<(.*):.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：25
攻击字符串："_ ' "+"'\t\tLoc=<::"*5000+""
攻击是否成功：ATTACK_SUCCESS
攻击时间：1016
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：([a-z_]+) '(▻.*◅)▻'\t(.*)\tLoc=<(.*):(.*):◅(▻.*◅)>
漏洞原因：β1 = .* β2 = '\t(.*)\tLoc=<(.*):(.*):.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：26
攻击字符串："a '"+"'\t\tLoc=<::"*5000+""
攻击是否成功：ATTACK_SUCCESS
攻击时间：1009
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：([a-z_]+) '(▻.*◅)▻'\t(.*)\tLoc=<(.*):(.*):◅(▻.*◅)>
漏洞原因：β1 = .* β2 = '\t(.*)\tLoc=<(.*):(.*):.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：27
攻击字符串："_ ' "+"'\t\tLoc=<::"*5000+"A"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1009
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：([a-z_]+) '(▻.*◅)▻'\t(.*)\tLoc=<(.*):(.*):◅(▻.*◅)>
漏洞原因：β1 = .* β2 = '\t(.*)\tLoc=<(.*):(.*):.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：28
攻击字符串："a '"+"'\t\tLoc=<::"*5000+"A"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1003
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：([a-z_]+) '(▻.*◅)▻'\t(.*)\tLoc=<(.*):(.*):◅(▻.*◅)>
漏洞原因：β1 = .* β2 = '\t(.*)\tLoc=<(.*):(.*):.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：29
攻击字符串："_ ' "+"'\t\tLoc=<::"*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1006
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：([a-z_]+) '(▻.*◅)▻'\t(.*)\tLoc=<(.*):(.*):◅(▻.*◅)>
漏洞原因：β1 = .* β2 = '\t(.*)\tLoc=<(.*):(.*):.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：30
攻击字符串："a '"+"'\t\tLoc=<::"*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1007
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：([a-z_]+) '(▻.*◅)▻'\t(.*)\tLoc=<(.*):(.*):◅(▻.*◅)>
漏洞原因：β1 = .* β2 = '\t(.*)\tLoc=<(.*):(.*):.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：31
攻击字符串："_ ' "+"'\t\tLoc=<::"*5000+"A\nA\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：709
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：32
攻击字符串："a '"+"'\t\tLoc=<::"*5000+"A\nA\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1006
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：([a-z_]+) '(▻.*◅)▻'\t(.*)\tLoc=<(.*):(.*):◅(▻.*◅)>
漏洞原因：β1 = .* β2 = '\t(.*)\tLoc=<(.*):(.*):.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：33
攻击字符串："_ ''\t "+"\tLoc=<"*5000+"A"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1010
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：([a-z_]+) '(.*)'\t(▻.*◅)▻\tLoc=<◅(▻.*◅):(.*):(.*)>
漏洞原因：β1 = .* β2 = \tLoc=<.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：34
攻击字符串："a ''\t"+"\tLoc=<"*5000+"A"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1013
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：([a-z_]+) '(.*)'\t(▻.*◅)▻\tLoc=<◅(▻.*◅):(.*):(.*)>
漏洞原因：β1 = .* β2 = \tLoc=<.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：35
攻击字符串："_ ''\t "+"\tLoc=<"*5000+"\n1\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1010
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：([a-z_]+) '(.*)'\t(▻.*◅)▻\tLoc=<◅(▻.*◅):(.*):(.*)>
漏洞原因：β1 = .* β2 = \tLoc=<.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：36
攻击字符串："a ''\t"+"\tLoc=<"*5000+"\n1\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1013
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：([a-z_]+) '(.*)'\t(▻.*◅)▻\tLoc=<◅(▻.*◅):(.*):(.*)>
漏洞原因：β1 = .* β2 = \tLoc=<.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：37
攻击字符串："_ ''\t "+"\tLoc=<"*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1008
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：([a-z_]+) '(.*)'\t(▻.*◅)▻\tLoc=<◅(▻.*◅):(.*):(.*)>
漏洞原因：β1 = .* β2 = \tLoc=<.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：38
攻击字符串："a ''\t"+"\tLoc=<"*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1010
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：([a-z_]+) '(.*)'\t(▻.*◅)▻\tLoc=<◅(▻.*◅):(.*):(.*)>
漏洞原因：β1 = .* β2 = \tLoc=<.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：39
攻击字符串："_ ''\t "+"\tLoc=<"*5000+"A\nA\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1014
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：([a-z_]+) '(.*)'\t(▻.*◅)▻\tLoc=<◅(▻.*◅):(.*):(.*)>
漏洞原因：β1 = .* β2 = \tLoc=<.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：40
攻击字符串："a ''\t"+"\tLoc=<"*5000+"A\nA\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1013
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：([a-z_]+) '(.*)'\t(▻.*◅)▻\tLoc=<◅(▻.*◅):(.*):(.*)>
漏洞原因：β1 = .* β2 = \tLoc=<.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：41
攻击字符串："_ ''\t "+"\tLoc=<:"*5000+"A"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1011
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：([a-z_]+) '(.*)'\t(▻.*◅)▻\tLoc=<(.*):◅(▻.*◅):(.*)>
漏洞原因：β1 = .* β2 = \tLoc=<(.*):.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：42
攻击字符串："a ''\t"+"\tLoc=<:"*5000+"A"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1009
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：([a-z_]+) '(.*)'\t(▻.*◅)▻\tLoc=<(.*):◅(▻.*◅):(.*)>
漏洞原因：β1 = .* β2 = \tLoc=<(.*):.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：43
攻击字符串："_ ''\t "+"\tLoc=<:"*5000+"\n1\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1008
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：([a-z_]+) '(.*)'\t(▻.*◅)▻\tLoc=<(.*):◅(▻.*◅):(.*)>
漏洞原因：β1 = .* β2 = \tLoc=<(.*):.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：44
攻击字符串："a ''\t"+"\tLoc=<:"*5000+"\n1\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1010
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：([a-z_]+) '(.*)'\t(▻.*◅)▻\tLoc=<(.*):◅(▻.*◅):(.*)>
漏洞原因：β1 = .* β2 = \tLoc=<(.*):.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：45
攻击字符串："_ ''\t "+"\tLoc=<:"*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1011
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：([a-z_]+) '(.*)'\t(▻.*◅)▻\tLoc=<(.*):◅(▻.*◅):(.*)>
漏洞原因：β1 = .* β2 = \tLoc=<(.*):.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：46
攻击字符串："a ''\t"+"\tLoc=<:"*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1014
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：([a-z_]+) '(.*)'\t(▻.*◅)▻\tLoc=<(.*):◅(▻.*◅):(.*)>
漏洞原因：β1 = .* β2 = \tLoc=<(.*):.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：47
攻击字符串："_ ''\t "+"\tLoc=<:"*5000+"A\nA\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1009
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：([a-z_]+) '(.*)'\t(▻.*◅)▻\tLoc=<(.*):◅(▻.*◅):(.*)>
漏洞原因：β1 = .* β2 = \tLoc=<(.*):.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：48
攻击字符串："a ''\t"+"\tLoc=<:"*5000+"A\nA\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1016
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：([a-z_]+) '(.*)'\t(▻.*◅)▻\tLoc=<(.*):◅(▻.*◅):(.*)>
漏洞原因：β1 = .* β2 = \tLoc=<(.*):.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：49
攻击字符串："_ ''\t "+"\tLoc=<::"*5000+""
攻击是否成功：ATTACK_SUCCESS
攻击时间：1006
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：([a-z_]+) '(.*)'\t(▻.*◅)▻\tLoc=<(.*):(.*):◅(▻.*◅)>
漏洞原因：β1 = .* β2 = \tLoc=<(.*):(.*):.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：50
攻击字符串："a ''\t"+"\tLoc=<::"*5000+""
攻击是否成功：ATTACK_SUCCESS
攻击时间：1003
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：([a-z_]+) '(.*)'\t(▻.*◅)▻\tLoc=<(.*):(.*):◅(▻.*◅)>
漏洞原因：β1 = .* β2 = \tLoc=<(.*):(.*):.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：51
攻击字符串："_ ''\t "+"\tLoc=<::"*5000+"A"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1008
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：([a-z_]+) '(.*)'\t(▻.*◅)▻\tLoc=<(.*):(.*):◅(▻.*◅)>
漏洞原因：β1 = .* β2 = \tLoc=<(.*):(.*):.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：52
攻击字符串："a ''\t"+"\tLoc=<::"*5000+"A"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1016
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：([a-z_]+) '(.*)'\t(▻.*◅)▻\tLoc=<(.*):(.*):◅(▻.*◅)>
漏洞原因：β1 = .* β2 = \tLoc=<(.*):(.*):.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：53
攻击字符串："_ ''\t "+"\tLoc=<::"*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1014
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：([a-z_]+) '(.*)'\t(▻.*◅)▻\tLoc=<(.*):(.*):◅(▻.*◅)>
漏洞原因：β1 = .* β2 = \tLoc=<(.*):(.*):.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：54
攻击字符串："a ''\t"+"\tLoc=<::"*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1013
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：([a-z_]+) '(.*)'\t(▻.*◅)▻\tLoc=<(.*):(.*):◅(▻.*◅)>
漏洞原因：β1 = .* β2 = \tLoc=<(.*):(.*):.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：55
攻击字符串："_ ''\t "+"\tLoc=<::"*5000+"A\nA\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1014
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：([a-z_]+) '(.*)'\t(▻.*◅)▻\tLoc=<(.*):(.*):◅(▻.*◅)>
漏洞原因：β1 = .* β2 = \tLoc=<(.*):(.*):.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：56
攻击字符串："a ''\t"+"\tLoc=<::"*5000+"A\nA\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1014
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：([a-z_]+) '(.*)'\t(▻.*◅)▻\tLoc=<(.*):(.*):◅(▻.*◅)>
漏洞原因：β1 = .* β2 = \tLoc=<(.*):(.*):.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：57
攻击字符串："a ''\t\tLoc=<"+":"*5000+"A"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1006
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：([a-z_]+) '(.*)'\t(.*)\tLoc=<(▻.*◅)▻:◅(▻.*◅):(.*)>
漏洞原因：β1 = .* β2 = :.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：58
攻击字符串："_ ''\t\tLoc=< "+":"*5000+"A"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1013
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：([a-z_]+) '(.*)'\t(.*)\tLoc=<(▻.*◅)▻:◅(▻.*◅):(.*)>
漏洞原因：β1 = .* β2 = :.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：59
攻击字符串："a ''\t\tLoc=<"+":"*5000+"\n1\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1009
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：([a-z_]+) '(.*)'\t(.*)\tLoc=<(▻.*◅)▻:◅(▻.*◅):(.*)>
漏洞原因：β1 = .* β2 = :.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：60
攻击字符串："_ ''\t\tLoc=< "+":"*5000+"\n1\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1008
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：([a-z_]+) '(.*)'\t(.*)\tLoc=<(▻.*◅)▻:◅(▻.*◅):(.*)>
漏洞原因：β1 = .* β2 = :.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：61
攻击字符串："a ''\t\tLoc=<"+":"*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1006
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：([a-z_]+) '(.*)'\t(.*)\tLoc=<(▻.*◅)▻:◅(▻.*◅):(.*)>
漏洞原因：β1 = .* β2 = :.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：62
攻击字符串："_ ''\t\tLoc=< "+":"*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1012
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：([a-z_]+) '(.*)'\t(.*)\tLoc=<(▻.*◅)▻:◅(▻.*◅):(.*)>
漏洞原因：β1 = .* β2 = :.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：63
攻击字符串："a ''\t\tLoc=<"+":"*5000+"A\nA\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1005
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：([a-z_]+) '(.*)'\t(.*)\tLoc=<(▻.*◅)▻:◅(▻.*◅):(.*)>
漏洞原因：β1 = .* β2 = :.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：64
攻击字符串："_ ''\t\tLoc=< "+":"*5000+"A\nA\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1009
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：([a-z_]+) '(.*)'\t(.*)\tLoc=<(▻.*◅)▻:◅(▻.*◅):(.*)>
漏洞原因：β1 = .* β2 = :.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：65
攻击字符串："a ''\t\tLoc=<"+"::"*5000+""
攻击是否成功：ATTACK_SUCCESS
攻击时间：1002
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：([a-z_]+) '(.*)'\t(.*)\tLoc=<(▻.*◅)▻:(.*):◅(▻.*◅)>
漏洞原因：β1 = .* β2 = :(.*):.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：66
攻击字符串："_ ''\t\tLoc=< "+"::"*5000+""
攻击是否成功：ATTACK_SUCCESS
攻击时间：1015
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：([a-z_]+) '(.*)'\t(.*)\tLoc=<(▻.*◅)▻:(.*):◅(▻.*◅)>
漏洞原因：β1 = .* β2 = :(.*):.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：67
攻击字符串："a ''\t\tLoc=<"+"::"*5000+"A"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1006
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：([a-z_]+) '(.*)'\t(.*)\tLoc=<(▻.*◅)▻:(.*):◅(▻.*◅)>
漏洞原因：β1 = .* β2 = :(.*):.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：68
攻击字符串："_ ''\t\tLoc=< "+"::"*5000+"A"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1003
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：([a-z_]+) '(.*)'\t(.*)\tLoc=<(▻.*◅)▻:(.*):◅(▻.*◅)>
漏洞原因：β1 = .* β2 = :(.*):.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：69
攻击字符串："a ''\t\tLoc=<"+"::"*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1011
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：([a-z_]+) '(.*)'\t(.*)\tLoc=<(▻.*◅)▻:(.*):◅(▻.*◅)>
漏洞原因：β1 = .* β2 = :(.*):.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：70
攻击字符串："_ ''\t\tLoc=< "+"::"*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1002
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：([a-z_]+) '(.*)'\t(.*)\tLoc=<(▻.*◅)▻:(.*):◅(▻.*◅)>
漏洞原因：β1 = .* β2 = :(.*):.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：71
攻击字符串："a ''\t\tLoc=<"+"::"*5000+"A\nA\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1008
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：([a-z_]+) '(.*)'\t(.*)\tLoc=<(▻.*◅)▻:(.*):◅(▻.*◅)>
漏洞原因：β1 = .* β2 = :(.*):.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：72
攻击字符串："_ ''\t\tLoc=< "+"::"*5000+"A\nA\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1007
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：([a-z_]+) '(.*)'\t(.*)\tLoc=<(▻.*◅)▻:(.*):◅(▻.*◅)>
漏洞原因：β1 = .* β2 = :(.*):.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：73
攻击字符串："_ ''\t\tLoc=<: "+":"*5000+""
攻击是否成功：ATTACK_SUCCESS
攻击时间：1004
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：([a-z_]+) '(.*)'\t(.*)\tLoc=<(.*):(▻.*◅)▻:◅(▻.*◅)>
漏洞原因：β1 = .* β2 = :.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：74
攻击字符串："a ''\t\tLoc=<:"+":"*5000+""
攻击是否成功：ATTACK_SUCCESS
攻击时间：1003
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：([a-z_]+) '(.*)'\t(.*)\tLoc=<(.*):(▻.*◅)▻:◅(▻.*◅)>
漏洞原因：β1 = .* β2 = :.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：75
攻击字符串："_ ''\t\tLoc=<: "+":"*5000+"A"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1013
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：([a-z_]+) '(.*)'\t(.*)\tLoc=<(.*):(▻.*◅)▻:◅(▻.*◅)>
漏洞原因：β1 = .* β2 = :.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：76
攻击字符串："_ ''\t\tLoc=<: "+":"*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1008
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：([a-z_]+) '(.*)'\t(.*)\tLoc=<(.*):(▻.*◅)▻:◅(▻.*◅)>
漏洞原因：β1 = .* β2 = :.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：77
攻击字符串："_ ''\t\tLoc=<: "+":"*5000+"A\nA\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1006
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：([a-z_]+) '(.*)'\t(.*)\tLoc=<(.*):(▻.*◅)▻:◅(▻.*◅)>
漏洞原因：β1 = .* β2 = :.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：78
攻击字符串：""+"a"*10000+" "
攻击是否成功：ATTACK_SUCCESS
攻击时间：1004
时间复杂度：POLYNOMIAL
漏洞模式：SLQ2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：79
攻击字符串：""+"_ '"*10000+"\u0000"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1014
时间复杂度：POLYNOMIAL
漏洞模式：SLQ2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：80
攻击字符串：""+"_ ''\t"*5000+"\u0000"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1002
时间复杂度：POLYNOMIAL
漏洞模式：SLQ2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：81
攻击字符串：""+"_ ''\t\tLoc=<"*5000+"\u0000"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1015
时间复杂度：POLYNOMIAL
漏洞模式：SLQ2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：82
攻击字符串：""+"_ ''\t\tLoc=<:"*5000+"\u0000"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1014
时间复杂度：POLYNOMIAL
漏洞模式：SLQ2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：83
攻击字符串：""+"_ ''\t\tLoc=<::"*5000+"\u0000"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1011
时间复杂度：POLYNOMIAL
漏洞模式：SLQ2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：84
攻击字符串：""+"a"*10000+"@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1012
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_1
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：85
攻击字符串：""+"a"*10000+"A"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1002
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：86
攻击字符串：""+"a '"*10000+"\n@@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1015
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：87
攻击字符串：""+"a '1'\t"*5000+"\n@◎"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1001
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：88
攻击字符串：""+"a '1'\t1\tLoc=<"*5000+"\n@@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1001
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：89
攻击字符串：""+"a '1'\t1\tLoc=<1:"*5000+"\n@@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1004
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：90
攻击字符串：""+"a '1'\t1\tLoc=<1:1:"*5000+"\n@@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1001
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:67
正则表达式:(\'\'(.*?)\'\')
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:68
正则表达式:(\'\'\'(.*?)\'\'\')
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:69
正则表达式:(\'\'\'\'\'(.*?)\'\'\'\'\')
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:70
正则表达式:(\\*)(['`:*~\\[\]{}@\$+\-.#])
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:71
正则表达式:(\w+)\'(m|re|d|ve|s|ll|t)?
是否是ReDos漏洞：RESULT-TRUE
攻击字符串如下:
------------------------
编号：1
攻击字符串：""+"A"*10000+"\u0000"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1008
时间复杂度：POLYNOMIAL
漏洞模式：SLQ2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：2
攻击字符串：""+"1"*10000+"◎"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1007
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_1
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：3
攻击字符串：""+"1"*10000+"!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1015
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:72
正则表达式:(^[A-Za-z\' ]+$)
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:73
正则表达式:(^[A-Za-z\' ]+)$
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:74
正则表达式:(^\s+Address 0x)[0-9A-Fa-f]+( is )\d+( bytes inside a block of size )[0-9,]+( free'd)
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:75
正则表达式:(^\s+Address 0x)[0-9A-Fa-f]+( is not stack'd)
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:76
正则表达式:(^|[^'])'''(.+?)'''($|[^'])
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:77
正则表达式:(^|\W)`(.*?)'(\W|$)
是否是ReDos漏洞：RESULT-TRUE
攻击字符串如下:
------------------------
编号：1
攻击字符串：""+"\u0000`"*10000+"\u0000"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1008
时间复杂度：POLYNOMIAL
漏洞模式：SLQ2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：2
攻击字符串：""+"`"*10000+"\n@@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1014
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:78
正则表达式:(cimport +([0-9a-zA-Z_.]+)\b)|(from +([0-9a-zA-Z_.]+) +cimport)|(include +'([^']+)')|(cdef +extern +from +'([^']+)')
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:79
正则表达式:(nextval\(')([^']+)('.*$)
是否是ReDos漏洞：RESULT-TRUE
攻击字符串如下:
------------------------
编号：1
攻击字符串：""+"nextval('A'"*5000+"'\n@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1008
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:80
正则表达式:.*'(.*)'.*'(.*)'.*
是否是ReDos漏洞：RESULT-TRUE
攻击字符串如下:
------------------------
编号：1
攻击字符串：" "+"'"*5000+"\n1\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1007
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*'◅(▻.*◅)'.*'(.*)'.*
漏洞原因：β1 = .* β2 = '.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：2
攻击字符串：""+"'"*5000+"\n1\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1002
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*'◅(▻.*◅)'.*'(.*)'.*
漏洞原因：β1 = .* β2 = '.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：3
攻击字符串：" "+"'"*5000+"\n@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1008
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*'◅(▻.*◅)'.*'(.*)'.*
漏洞原因：β1 = .* β2 = '.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：4
攻击字符串：""+"'"*5000+"\n@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1015
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*'◅(▻.*◅)'.*'(.*)'.*
漏洞原因：β1 = .* β2 = '.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：5
攻击字符串：" "+"'"*5000+"\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1006
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*'◅(▻.*◅)'.*'(.*)'.*
漏洞原因：β1 = .* β2 = '.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：6
攻击字符串：""+"'"*5000+"\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1014
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*'◅(▻.*◅)'.*'(.*)'.*
漏洞原因：β1 = .* β2 = '.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：7
攻击字符串：" "+"'"*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1005
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*'◅(▻.*◅)'.*'(.*)'.*
漏洞原因：β1 = .* β2 = '.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：8
攻击字符串：""+"'"*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1012
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*'◅(▻.*◅)'.*'(.*)'.*
漏洞原因：β1 = .* β2 = '.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：9
攻击字符串：" "+"''"*5000+"\n1\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1006
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*'(.*)'.*◅'(.*)'.*
漏洞原因：β1 = .* β2 = '(.*)'.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：10
攻击字符串：""+"''"*5000+"\n1\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1004
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*'(.*)'.*◅'(.*)'.*
漏洞原因：β1 = .* β2 = '(.*)'.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：11
攻击字符串：" "+"''"*5000+"\n@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1002
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*'(.*)'.*◅'(.*)'.*
漏洞原因：β1 = .* β2 = '(.*)'.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：12
攻击字符串：""+"''"*5000+"\n@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1003
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*'(.*)'.*◅'(.*)'.*
漏洞原因：β1 = .* β2 = '(.*)'.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：13
攻击字符串：" "+"''"*5000+"\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1002
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*'(.*)'.*◅'(.*)'.*
漏洞原因：β1 = .* β2 = '(.*)'.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：14
攻击字符串：""+"''"*5000+"\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1009
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*'(.*)'.*◅'(.*)'.*
漏洞原因：β1 = .* β2 = '(.*)'.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：15
攻击字符串：" "+"''"*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1016
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*'(.*)'.*◅'(.*)'.*
漏洞原因：β1 = .* β2 = '(.*)'.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：16
攻击字符串：""+"''"*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1009
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*'(.*)'.*◅'(.*)'.*
漏洞原因：β1 = .* β2 = '(.*)'.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：17
攻击字符串：" "+"'''"*5000+"\n1\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1016
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*'(.*)'.*'◅(▻.*◅)'.*
漏洞原因：β1 = .* β2 = '(.*)'.*'.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：18
攻击字符串：""+"'''"*5000+"\n1\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1001
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*'(.*)'.*'◅(▻.*◅)'.*
漏洞原因：β1 = .* β2 = '(.*)'.*'.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：19
攻击字符串：" "+"'''"*5000+"\n@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1015
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*'(.*)'.*'◅(▻.*◅)'.*
漏洞原因：β1 = .* β2 = '(.*)'.*'.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：20
攻击字符串：""+"'''"*5000+"\n@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1010
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*'(.*)'.*'◅(▻.*◅)'.*
漏洞原因：β1 = .* β2 = '(.*)'.*'.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：21
攻击字符串：" "+"'''"*5000+"\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1006
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*'(.*)'.*'◅(▻.*◅)'.*
漏洞原因：β1 = .* β2 = '(.*)'.*'.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：22
攻击字符串：""+"'''"*5000+"\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1013
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*'(.*)'.*'◅(▻.*◅)'.*
漏洞原因：β1 = .* β2 = '(.*)'.*'.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：23
攻击字符串：" "+"'''"*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1010
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*'(.*)'.*'◅(▻.*◅)'.*
漏洞原因：β1 = .* β2 = '(.*)'.*'.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：24
攻击字符串：""+"'''"*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1012
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*'(.*)'.*'◅(▻.*◅)'.*
漏洞原因：β1 = .* β2 = '(.*)'.*'.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：25
攻击字符串：" "+"''''"*5000+"\n1\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1013
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*'(.*)'.*'(.*)'.*◅
漏洞原因：β1 = .* β2 = '(.*)'.*'(.*)'.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：26
攻击字符串：""+"''''"*5000+"\n1\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1008
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*'(.*)'.*'(.*)'.*◅
漏洞原因：β1 = .* β2 = '(.*)'.*'(.*)'.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：27
攻击字符串：" "+"''''"*5000+"\n@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1009
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*'(.*)'.*'(.*)'.*◅
漏洞原因：β1 = .* β2 = '(.*)'.*'(.*)'.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：28
攻击字符串：""+"''''"*5000+"\n@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1001
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*'(.*)'.*'(.*)'.*◅
漏洞原因：β1 = .* β2 = '(.*)'.*'(.*)'.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：29
攻击字符串：" "+"''''"*5000+"\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1010
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*'(.*)'.*'(.*)'.*◅
漏洞原因：β1 = .* β2 = '(.*)'.*'(.*)'.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：30
攻击字符串：""+"''''"*5000+"\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1005
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*'(.*)'.*'(.*)'.*◅
漏洞原因：β1 = .* β2 = '(.*)'.*'(.*)'.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:81
正则表达式:.*?'''
是否是ReDos漏洞：RESULT-TRUE
攻击字符串如下:
------------------------
编号：1
攻击字符串：""+"1"*20000+"@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1013
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_1
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：2
攻击字符串：""+"1"*20000+"\n@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1001
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:82
正则表达式:.*Access denied for user '[\w\*\!\@\#\^\&]*'@'[\w\.]*'.*
是否是ReDos漏洞：RESULT-TRUE
攻击字符串如下:
------------------------
编号：1
攻击字符串：" "+"Access denied for user '"*5000+" "
攻击是否成功：ATTACK_SUCCESS
攻击时间：1007
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*Access denied for user '[\w\*\!\@\#\^\&]*◅'@'[\w\.]*'.*
漏洞原因：β1 = .* β2 = Access denied for user '[\^\@\!\#\&\w\*]* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：2
攻击字符串：""+"Access denied for user '"*5000+" "
攻击是否成功：ATTACK_SUCCESS
攻击时间：1013
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*Access denied for user '[\w\*\!\@\#\^\&]*◅'@'[\w\.]*'.*
漏洞原因：β1 = .* β2 = Access denied for user '[\^\@\!\#\&\w\*]* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：3
攻击字符串：" "+"Access denied for user '"*5000+"\n1\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1005
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*Access denied for user '[\w\*\!\@\#\^\&]*◅'@'[\w\.]*'.*
漏洞原因：β1 = .* β2 = Access denied for user '[\^\@\!\#\&\w\*]* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：4
攻击字符串：""+"Access denied for user '"*5000+"\n1\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1018
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*Access denied for user '[\w\*\!\@\#\^\&]*◅'@'[\w\.]*'.*
漏洞原因：β1 = .* β2 = Access denied for user '[\^\@\!\#\&\w\*]* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：5
攻击字符串：" "+"Access denied for user '"*5000+"\n~\n~\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1004
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*Access denied for user '[\w\*\!\@\#\^\&]*◅'@'[\w\.]*'.*
漏洞原因：β1 = .* β2 = Access denied for user '[\^\@\!\#\&\w\*]* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：6
攻击字符串：""+"Access denied for user '"*5000+"\n~\n~\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1013
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*Access denied for user '[\w\*\!\@\#\^\&]*◅'@'[\w\.]*'.*
漏洞原因：β1 = .* β2 = Access denied for user '[\^\@\!\#\&\w\*]* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：7
攻击字符串：" "+"Access denied for user '"*5000+"\n@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1014
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*Access denied for user '[\w\*\!\@\#\^\&]*◅'@'[\w\.]*'.*
漏洞原因：β1 = .* β2 = Access denied for user '[\^\@\!\#\&\w\*]* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：8
攻击字符串：""+"Access denied for user '"*5000+"\n@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1008
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*Access denied for user '[\w\*\!\@\#\^\&]*◅'@'[\w\.]*'.*
漏洞原因：β1 = .* β2 = Access denied for user '[\^\@\!\#\&\w\*]* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：9
攻击字符串：" "+"Access denied for user ''@'"*5000+" "
攻击是否成功：ATTACK_SUCCESS
攻击时间：1013
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*Access denied for user '[\w\*\!\@\#\^\&]*'@'[\w\.]*◅'.*
漏洞原因：β1 = .* β2 = Access denied for user '[\^\@\!\#\&\w\*]*'@'[\.\w]* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：10
攻击字符串：""+"Access denied for user ''@'"*5000+" "
攻击是否成功：ATTACK_SUCCESS
攻击时间：1013
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*Access denied for user '[\w\*\!\@\#\^\&]*'@'[\w\.]*◅'.*
漏洞原因：β1 = .* β2 = Access denied for user '[\^\@\!\#\&\w\*]*'@'[\.\w]* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：11
攻击字符串：" "+"Access denied for user ''@'"*5000+"\n1\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1018
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*Access denied for user '[\w\*\!\@\#\^\&]*'@'[\w\.]*◅'.*
漏洞原因：β1 = .* β2 = Access denied for user '[\^\@\!\#\&\w\*]*'@'[\.\w]* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：12
攻击字符串：""+"Access denied for user ''@'"*5000+"\n1\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1013
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*Access denied for user '[\w\*\!\@\#\^\&]*'@'[\w\.]*◅'.*
漏洞原因：β1 = .* β2 = Access denied for user '[\^\@\!\#\&\w\*]*'@'[\.\w]* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：13
攻击字符串：" "+"Access denied for user ''@'"*5000+"\n~\n~\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1006
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*Access denied for user '[\w\*\!\@\#\^\&]*'@'[\w\.]*◅'.*
漏洞原因：β1 = .* β2 = Access denied for user '[\^\@\!\#\&\w\*]*'@'[\.\w]* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：14
攻击字符串：""+"Access denied for user ''@'"*5000+"\n~\n~\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1018
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*Access denied for user '[\w\*\!\@\#\^\&]*'@'[\w\.]*◅'.*
漏洞原因：β1 = .* β2 = Access denied for user '[\^\@\!\#\&\w\*]*'@'[\.\w]* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：15
攻击字符串：" "+"Access denied for user ''@'"*5000+"\n@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1011
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*Access denied for user '[\w\*\!\@\#\^\&]*'@'[\w\.]*◅'.*
漏洞原因：β1 = .* β2 = Access denied for user '[\^\@\!\#\&\w\*]*'@'[\.\w]* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：16
攻击字符串：""+"Access denied for user ''@'"*5000+"\n@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1011
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*Access denied for user '[\w\*\!\@\#\^\&]*'@'[\w\.]*◅'.*
漏洞原因：β1 = .* β2 = Access denied for user '[\^\@\!\#\&\w\*]*'@'[\.\w]* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：17
攻击字符串：" "+"Access denied for user ''@''"*5000+"\n1\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1007
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*Access denied for user '[\w\*\!\@\#\^\&]*'@'[\w\.]*'.*◅
漏洞原因：β1 = .* β2 = Access denied for user '[\^\@\!\#\&\w\*]*'@'[\.\w]*'.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：18
攻击字符串：""+"Access denied for user ''@''"*5000+"\n1\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1010
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*Access denied for user '[\w\*\!\@\#\^\&]*'@'[\w\.]*'.*◅
漏洞原因：β1 = .* β2 = Access denied for user '[\^\@\!\#\&\w\*]*'@'[\.\w]*'.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：19
攻击字符串：" "+"Access denied for user ''@''"*5000+"\n~\n~\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1015
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*Access denied for user '[\w\*\!\@\#\^\&]*'@'[\w\.]*'.*◅
漏洞原因：β1 = .* β2 = Access denied for user '[\^\@\!\#\&\w\*]*'@'[\.\w]*'.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：20
攻击字符串：""+"Access denied for user ''@''"*5000+"\n~\n~\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1011
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*Access denied for user '[\w\*\!\@\#\^\&]*'@'[\w\.]*'.*◅
漏洞原因：β1 = .* β2 = Access denied for user '[\^\@\!\#\&\w\*]*'@'[\.\w]*'.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：21
攻击字符串：" "+"Access denied for user ''@''"*5000+"\n@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1007
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*Access denied for user '[\w\*\!\@\#\^\&]*'@'[\w\.]*'.*◅
漏洞原因：β1 = .* β2 = Access denied for user '[\^\@\!\#\&\w\*]*'@'[\.\w]*'.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：22
攻击字符串：""+"Access denied for user ''@''"*5000+"\n@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1003
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*Access denied for user '[\w\*\!\@\#\^\&]*'@'[\w\.]*'.*◅
漏洞原因：β1 = .* β2 = Access denied for user '[\^\@\!\#\&\w\*]*'@'[\.\w]*'.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：23
攻击字符串：" "+"Access denied for user ''@''"*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1004
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*Access denied for user '[\w\*\!\@\#\^\&]*'@'[\w\.]*'.*◅
漏洞原因：β1 = .* β2 = Access denied for user '[\^\@\!\#\&\w\*]*'@'[\.\w]*'.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：24
攻击字符串：""+"Access denied for user ''@''"*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1005
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*Access denied for user '[\w\*\!\@\#\^\&]*'@'[\w\.]*'.*◅
漏洞原因：β1 = .* β2 = Access denied for user '[\^\@\!\#\&\w\*]*'@'[\.\w]*'.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：25
攻击字符串：""+"\u0000"*20000+"\u0000"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1005
时间复杂度：POLYNOMIAL
漏洞模式：SLQ2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：26
攻击字符串：""+"1"*20000+"@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1004
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_1
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：27
攻击字符串：""+"1"*20000+"\n@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1012
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：28
攻击字符串：""+"1Access denied for user '"*5000+"~@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1010
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：29
攻击字符串：""+"1Access denied for user 'A'@'"*5000+"~@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1009
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:83
正则表达式:.*Host '[\w\.]*' is not allowed to connect to this MySQL server.*
是否是ReDos漏洞：RESULT-TRUE
攻击字符串如下:
------------------------
编号：1
攻击字符串：" "+"Host '"*5000+" "
攻击是否成功：ATTACK_SUCCESS
攻击时间：1003
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*Host '[\w\.]*◅' is not allowed to connect to this MySQL server.*
漏洞原因：β1 = .* β2 = Host '[\.\w]* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：2
攻击字符串：""+"Host '"*5000+" "
攻击是否成功：ATTACK_SUCCESS
攻击时间：1017
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*Host '[\w\.]*◅' is not allowed to connect to this MySQL server.*
漏洞原因：β1 = .* β2 = Host '[\.\w]* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：3
攻击字符串：" "+"Host '"*5000+"\n1\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1004
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*Host '[\w\.]*◅' is not allowed to connect to this MySQL server.*
漏洞原因：β1 = .* β2 = Host '[\.\w]* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：4
攻击字符串：""+"Host '"*5000+"\n1\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1007
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*Host '[\w\.]*◅' is not allowed to connect to this MySQL server.*
漏洞原因：β1 = .* β2 = Host '[\.\w]* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：5
攻击字符串：" "+"Host '"*5000+"\n~\n~\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1015
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*Host '[\w\.]*◅' is not allowed to connect to this MySQL server.*
漏洞原因：β1 = .* β2 = Host '[\.\w]* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：6
攻击字符串：""+"Host '"*5000+"\n~\n~\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1006
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*Host '[\w\.]*◅' is not allowed to connect to this MySQL server.*
漏洞原因：β1 = .* β2 = Host '[\.\w]* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：7
攻击字符串：" "+"Host '"*5000+"\n@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1009
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*Host '[\w\.]*◅' is not allowed to connect to this MySQL server.*
漏洞原因：β1 = .* β2 = Host '[\.\w]* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：8
攻击字符串：""+"Host '"*5000+"\n@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1006
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*Host '[\w\.]*◅' is not allowed to connect to this MySQL server.*
漏洞原因：β1 = .* β2 = Host '[\.\w]* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：9
攻击字符串：" "+"Host '' is not allowed to connect to this MySQL server"*5000+"\n1\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1012
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*Host '[\w\.]*' is not allowed to connect to this MySQL server.*◅
漏洞原因：β1 = .* β2 = Host '[\.\w]*' is not allowed to connect to this MySQL server.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：10
攻击字符串：""+"Host '' is not allowed to connect to this MySQL server"*5000+"\n1\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1006
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*Host '[\w\.]*' is not allowed to connect to this MySQL server.*◅
漏洞原因：β1 = .* β2 = Host '[\.\w]*' is not allowed to connect to this MySQL server.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：11
攻击字符串：" "+"Host '' is not allowed to connect to this MySQL server"*5000+"\n~\n~\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1018
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*Host '[\w\.]*' is not allowed to connect to this MySQL server.*◅
漏洞原因：β1 = .* β2 = Host '[\.\w]*' is not allowed to connect to this MySQL server.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：12
攻击字符串：""+"Host '' is not allowed to connect to this MySQL server"*5000+"\n~\n~\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1012
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*Host '[\w\.]*' is not allowed to connect to this MySQL server.*◅
漏洞原因：β1 = .* β2 = Host '[\.\w]*' is not allowed to connect to this MySQL server.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：13
攻击字符串：" "+"Host '' is not allowed to connect to this MySQL server"*5000+"\n@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1009
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*Host '[\w\.]*' is not allowed to connect to this MySQL server.*◅
漏洞原因：β1 = .* β2 = Host '[\.\w]*' is not allowed to connect to this MySQL server.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：14
攻击字符串：""+"Host '' is not allowed to connect to this MySQL server"*5000+"\n@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1009
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*Host '[\w\.]*' is not allowed to connect to this MySQL server.*◅
漏洞原因：β1 = .* β2 = Host '[\.\w]*' is not allowed to connect to this MySQL server.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：15
攻击字符串：" "+"Host '' is not allowed to connect to this MySQL server"*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1013
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*Host '[\w\.]*' is not allowed to connect to this MySQL server.*◅
漏洞原因：β1 = .* β2 = Host '[\.\w]*' is not allowed to connect to this MySQL server.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：16
攻击字符串：""+"Host '' is not allowed to connect to this MySQL server"*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1003
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*Host '[\w\.]*' is not allowed to connect to this MySQL server.*◅
漏洞原因：β1 = .* β2 = Host '[\.\w]*' is not allowed to connect to this MySQL server.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：17
攻击字符串：""+"\u0000"*20000+"\u0000"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1002
时间复杂度：POLYNOMIAL
漏洞模式：SLQ2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：18
攻击字符串：""+"1"*20000+"@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1003
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_1
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：19
攻击字符串：""+"1"*20000+"\n@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1016
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：20
攻击字符串：""+"1Host '"*5000+"~@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1015
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:84
正则表达式:.*thumbnail:\s*'(http:\/\/[^\/]+\/ThumbnailServer2[^']+)'.*
是否是ReDos漏洞：RESULT-TRUE
攻击字符串如下:
------------------------
编号：1
攻击字符串：" "+"thumbnail:"*5000+" "
攻击是否成功：ATTACK_SUCCESS
攻击时间：1007
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*thumbnail:\s*◅'(http:\/\/[^\/]+\/ThumbnailServer2[^']+)'.*
漏洞原因：β1 = .* β2 = thumbnail:\s* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：2
攻击字符串：""+"thumbnail:"*5000+" "
攻击是否成功：ATTACK_SUCCESS
攻击时间：1007
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*thumbnail:\s*◅'(http:\/\/[^\/]+\/ThumbnailServer2[^']+)'.*
漏洞原因：β1 = .* β2 = thumbnail:\s* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：3
攻击字符串：" "+"thumbnail:"*5000+"\n1\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1008
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*thumbnail:\s*◅'(http:\/\/[^\/]+\/ThumbnailServer2[^']+)'.*
漏洞原因：β1 = .* β2 = thumbnail:\s* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：4
攻击字符串：""+"thumbnail:"*5000+"\n1\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1007
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*thumbnail:\s*◅'(http:\/\/[^\/]+\/ThumbnailServer2[^']+)'.*
漏洞原因：β1 = .* β2 = thumbnail:\s* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：5
攻击字符串：" "+"thumbnail:"*5000+"\n@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1009
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*thumbnail:\s*◅'(http:\/\/[^\/]+\/ThumbnailServer2[^']+)'.*
漏洞原因：β1 = .* β2 = thumbnail:\s* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：6
攻击字符串：""+"thumbnail:"*5000+"\n@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1011
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*thumbnail:\s*◅'(http:\/\/[^\/]+\/ThumbnailServer2[^']+)'.*
漏洞原因：β1 = .* β2 = thumbnail:\s* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：7
攻击字符串：" "+"thumbnail:"*5000+"\n!/'\n!/'\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1009
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*thumbnail:\s*◅'(http:\/\/[^\/]+\/ThumbnailServer2[^']+)'.*
漏洞原因：β1 = .* β2 = thumbnail:\s* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：8
攻击字符串：""+"thumbnail:"*5000+"\n!/'\n!/'\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1012
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*thumbnail:\s*◅'(http:\/\/[^\/]+\/ThumbnailServer2[^']+)'.*
漏洞原因：β1 = .* β2 = thumbnail:\s* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：9
攻击字符串：" "+"thumbnail:'http://\u0000"*5000+" "
攻击是否成功：ATTACK_SUCCESS
攻击时间：1010
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*thumbnail:\s*'◅(▻http:\/\/[^\/]+◅\/ThumbnailServer2[^']+)'.*
漏洞原因：β1 = .* β2 = thumbnail:\s*'http:\/\/[^\/]+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：10
攻击字符串：""+"thumbnail:'http://\u0000"*5000+" "
攻击是否成功：ATTACK_SUCCESS
攻击时间：1010
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*thumbnail:\s*'◅(▻http:\/\/[^\/]+◅\/ThumbnailServer2[^']+)'.*
漏洞原因：β1 = .* β2 = thumbnail:\s*'http:\/\/[^\/]+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：11
攻击字符串：" "+"thumbnail:'http://\u0000"*5000+"\n1\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1016
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*thumbnail:\s*'◅(▻http:\/\/[^\/]+◅\/ThumbnailServer2[^']+)'.*
漏洞原因：β1 = .* β2 = thumbnail:\s*'http:\/\/[^\/]+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：12
攻击字符串：""+"thumbnail:'http://\u0000"*5000+"\n1\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1008
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*thumbnail:\s*'◅(▻http:\/\/[^\/]+◅\/ThumbnailServer2[^']+)'.*
漏洞原因：β1 = .* β2 = thumbnail:\s*'http:\/\/[^\/]+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：13
攻击字符串：" "+"thumbnail:'http://\u0000"*5000+"\n@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1012
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*thumbnail:\s*'◅(▻http:\/\/[^\/]+◅\/ThumbnailServer2[^']+)'.*
漏洞原因：β1 = .* β2 = thumbnail:\s*'http:\/\/[^\/]+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：14
攻击字符串：""+"thumbnail:'http://\u0000"*5000+"\n@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1005
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*thumbnail:\s*'◅(▻http:\/\/[^\/]+◅\/ThumbnailServer2[^']+)'.*
漏洞原因：β1 = .* β2 = thumbnail:\s*'http:\/\/[^\/]+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：15
攻击字符串：" "+"thumbnail:'http://\u0000"*5000+"\n!/'\n!/'\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1016
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*thumbnail:\s*'◅(▻http:\/\/[^\/]+◅\/ThumbnailServer2[^']+)'.*
漏洞原因：β1 = .* β2 = thumbnail:\s*'http:\/\/[^\/]+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：16
攻击字符串：""+"thumbnail:'http://\u0000"*5000+"\n!/'\n!/'\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1003
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*thumbnail:\s*'◅(▻http:\/\/[^\/]+◅\/ThumbnailServer2[^']+)'.*
漏洞原因：β1 = .* β2 = thumbnail:\s*'http:\/\/[^\/]+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：17
攻击字符串：" "+"thumbnail:'http://\u0000/ThumbnailServer2\u0000"*5000+"\n1\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1015
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*thumbnail:\s*'◅(▻http:\/\/[^\/]+\/ThumbnailServer2[^']+◅)'.*
漏洞原因：β1 = .* β2 = thumbnail:\s*'http:\/\/[^\/]+\/ThumbnailServer2[^']+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：18
攻击字符串：""+"thumbnail:'http://\u0000/ThumbnailServer2\u0000"*5000+"\n1\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1009
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*thumbnail:\s*'◅(▻http:\/\/[^\/]+\/ThumbnailServer2[^']+◅)'.*
漏洞原因：β1 = .* β2 = thumbnail:\s*'http:\/\/[^\/]+\/ThumbnailServer2[^']+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：19
攻击字符串：" "+"thumbnail:'http://\u0000/ThumbnailServer2\u0000"*5000+"\n@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1001
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*thumbnail:\s*'◅(▻http:\/\/[^\/]+\/ThumbnailServer2[^']+◅)'.*
漏洞原因：β1 = .* β2 = thumbnail:\s*'http:\/\/[^\/]+\/ThumbnailServer2[^']+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：20
攻击字符串：""+"thumbnail:'http://\u0000/ThumbnailServer2\u0000"*5000+"\n@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1009
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*thumbnail:\s*'◅(▻http:\/\/[^\/]+\/ThumbnailServer2[^']+◅)'.*
漏洞原因：β1 = .* β2 = thumbnail:\s*'http:\/\/[^\/]+\/ThumbnailServer2[^']+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：21
攻击字符串：" "+"thumbnail:'http://\u0000/ThumbnailServer2\u0000"*5000+"\n!/'\n!/'\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1013
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*thumbnail:\s*'◅(▻http:\/\/[^\/]+\/ThumbnailServer2[^']+◅)'.*
漏洞原因：β1 = .* β2 = thumbnail:\s*'http:\/\/[^\/]+\/ThumbnailServer2[^']+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：22
攻击字符串：""+"thumbnail:'http://\u0000/ThumbnailServer2\u0000"*5000+"\n!/'\n!/'\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1005
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*thumbnail:\s*'◅(▻http:\/\/[^\/]+\/ThumbnailServer2[^']+◅)'.*
漏洞原因：β1 = .* β2 = thumbnail:\s*'http:\/\/[^\/]+\/ThumbnailServer2[^']+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：23
攻击字符串：" "+"thumbnail:'http://\u0000/ThumbnailServer2\u0000"*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1005
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*thumbnail:\s*'◅(▻http:\/\/[^\/]+\/ThumbnailServer2[^']+◅)'.*
漏洞原因：β1 = .* β2 = thumbnail:\s*'http:\/\/[^\/]+\/ThumbnailServer2[^']+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：24
攻击字符串：""+"thumbnail:'http://\u0000/ThumbnailServer2\u0000"*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1015
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*thumbnail:\s*'◅(▻http:\/\/[^\/]+\/ThumbnailServer2[^']+◅)'.*
漏洞原因：β1 = .* β2 = thumbnail:\s*'http:\/\/[^\/]+\/ThumbnailServer2[^']+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：25
攻击字符串：" "+"thumbnail:'http://\u0000/ThumbnailServer2\u0000'"*5000+"\n1\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1006
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*thumbnail:\s*'(http:\/\/[^\/]+\/ThumbnailServer2[^']+)'.*◅
漏洞原因：β1 = .* β2 = thumbnail:\s*'(http:\/\/[^\/]+\/ThumbnailServer2[^']+)'.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：26
攻击字符串：""+"thumbnail:'http://\u0000/ThumbnailServer2\u0000'"*5000+"\n1\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1007
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*thumbnail:\s*'(http:\/\/[^\/]+\/ThumbnailServer2[^']+)'.*◅
漏洞原因：β1 = .* β2 = thumbnail:\s*'(http:\/\/[^\/]+\/ThumbnailServer2[^']+)'.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：27
攻击字符串：" "+"thumbnail:'http://\u0000/ThumbnailServer2\u0000'"*5000+"\n@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1003
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*thumbnail:\s*'(http:\/\/[^\/]+\/ThumbnailServer2[^']+)'.*◅
漏洞原因：β1 = .* β2 = thumbnail:\s*'(http:\/\/[^\/]+\/ThumbnailServer2[^']+)'.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：28
攻击字符串：""+"thumbnail:'http://\u0000/ThumbnailServer2\u0000'"*5000+"\n@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1006
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*thumbnail:\s*'(http:\/\/[^\/]+\/ThumbnailServer2[^']+)'.*◅
漏洞原因：β1 = .* β2 = thumbnail:\s*'(http:\/\/[^\/]+\/ThumbnailServer2[^']+)'.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：29
攻击字符串：" "+"thumbnail:'http://\u0000/ThumbnailServer2\u0000'"*5000+"\n!/'\n!/'\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1014
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*thumbnail:\s*'(http:\/\/[^\/]+\/ThumbnailServer2[^']+)'.*◅
漏洞原因：β1 = .* β2 = thumbnail:\s*'(http:\/\/[^\/]+\/ThumbnailServer2[^']+)'.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：30
攻击字符串：""+"thumbnail:'http://\u0000/ThumbnailServer2\u0000'"*5000+"\n!/'\n!/'\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1010
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*thumbnail:\s*'(http:\/\/[^\/]+\/ThumbnailServer2[^']+)'.*◅
漏洞原因：β1 = .* β2 = thumbnail:\s*'(http:\/\/[^\/]+\/ThumbnailServer2[^']+)'.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：31
攻击字符串：" "+"thumbnail:'http://\u0000/ThumbnailServer2\u0000'"*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：48
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：32
攻击字符串：""+"thumbnail:'http://\u0000/ThumbnailServer2\u0000'"*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1008
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*thumbnail:\s*'(http:\/\/[^\/]+\/ThumbnailServer2[^']+)'.*◅
漏洞原因：β1 = .* β2 = thumbnail:\s*'(http:\/\/[^\/]+\/ThumbnailServer2[^']+)'.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：33
攻击字符串：""+"\u0000"*20000+"t"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1009
时间复杂度：POLYNOMIAL
漏洞模式：SLQ2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：34
攻击字符串：""+"1"*20000+"@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1005
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_1
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：35
攻击字符串：""+"1"*20000+"\n@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1014
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：36
攻击字符串："thumbnail:'"+"http://"*5000+"@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1004
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：37
攻击字符串："thumbnail:'"+"http://"*5000+"@/◎"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1006
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：38
攻击字符串：""+"1thumbnail:"*5000+"!@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1008
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：39
攻击字符串：""+"thumbnail:'http://"*5000+"@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1006
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：40
攻击字符串：""+"thumbnail:'http://"*5000+"@/◎"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1007
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：41
攻击字符串："thumbnail:'"+"http://A/ThumbnailServer2"*5000+"@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1006
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:85
正则表达式:.*window\.location\.href='(.*)'.*
是否是ReDos漏洞：RESULT-TRUE
攻击字符串如下:
------------------------
编号：1
攻击字符串：" "+"window.location.href='"*5000+"\n1\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1014
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*window\.location\.href='◅(?P<href>▻.*◅)'.*
漏洞原因：β1 = .* β2 = window\.location\.href='.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：2
攻击字符串：""+"window.location.href='"*5000+"\n1\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1016
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*window\.location\.href='◅(?P<href>▻.*◅)'.*
漏洞原因：β1 = .* β2 = window\.location\.href='.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：3
攻击字符串：" "+"window.location.href='"*5000+"\n@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1005
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*window\.location\.href='◅(?P<href>▻.*◅)'.*
漏洞原因：β1 = .* β2 = window\.location\.href='.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：4
攻击字符串：""+"window.location.href='"*5000+"\n@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1011
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*window\.location\.href='◅(?P<href>▻.*◅)'.*
漏洞原因：β1 = .* β2 = window\.location\.href='.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：5
攻击字符串：" "+"window.location.href='"*5000+"\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1011
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*window\.location\.href='◅(?P<href>▻.*◅)'.*
漏洞原因：β1 = .* β2 = window\.location\.href='.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：6
攻击字符串：""+"window.location.href='"*5000+"\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1007
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*window\.location\.href='◅(?P<href>▻.*◅)'.*
漏洞原因：β1 = .* β2 = window\.location\.href='.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：7
攻击字符串：" "+"window.location.href='"*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1012
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*window\.location\.href='◅(?P<href>▻.*◅)'.*
漏洞原因：β1 = .* β2 = window\.location\.href='.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：8
攻击字符串：""+"window.location.href='"*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1013
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*window\.location\.href='◅(?P<href>▻.*◅)'.*
漏洞原因：β1 = .* β2 = window\.location\.href='.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：9
攻击字符串：" "+"window.location.href=''"*5000+"\n1\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1014
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*window\.location\.href='(?P<href>.*)'.*◅
漏洞原因：β1 = .* β2 = window\.location\.href='(.*)'.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：10
攻击字符串：""+"window.location.href=''"*5000+"\n1\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1001
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*window\.location\.href='(?P<href>.*)'.*◅
漏洞原因：β1 = .* β2 = window\.location\.href='(.*)'.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：11
攻击字符串：" "+"window.location.href=''"*5000+"\n@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1013
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*window\.location\.href='(?P<href>.*)'.*◅
漏洞原因：β1 = .* β2 = window\.location\.href='(.*)'.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：12
攻击字符串：""+"window.location.href=''"*5000+"\n@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1004
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*window\.location\.href='(?P<href>.*)'.*◅
漏洞原因：β1 = .* β2 = window\.location\.href='(.*)'.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：13
攻击字符串：" "+"window.location.href=''"*5000+"\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1007
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*window\.location\.href='(?P<href>.*)'.*◅
漏洞原因：β1 = .* β2 = window\.location\.href='(.*)'.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：14
攻击字符串：""+"window.location.href=''"*5000+"\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1006
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*window\.location\.href='(?P<href>.*)'.*◅
漏洞原因：β1 = .* β2 = window\.location\.href='(.*)'.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：15
攻击字符串：" "+"window.location.href=''"*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1005
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*window\.location\.href='(?P<href>.*)'.*◅
漏洞原因：β1 = .* β2 = window\.location\.href='(.*)'.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：16
攻击字符串：""+"window.location.href=''"*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1005
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.*window\.location\.href='(?P<href>.*)'.*◅
漏洞原因：β1 = .* β2 = window\.location\.href='(.*)'.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：17
攻击字符串："window.location.href=' "+"'"*20000+"\n1\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1010
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：.*window\.location\.href='(?P<href>▻.*◅)▻'.*◅
漏洞原因：β1 = .* β2 = '.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：18
攻击字符串："window.location.href='"+"'"*20000+"\n1\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1009
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：.*window\.location\.href='(?P<href>▻.*◅)▻'.*◅
漏洞原因：β1 = .* β2 = '.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：19
攻击字符串："window.location.href=' "+"'"*20000+"\n@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1005
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：.*window\.location\.href='(?P<href>▻.*◅)▻'.*◅
漏洞原因：β1 = .* β2 = '.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：20
攻击字符串："window.location.href='"+"'"*20000+"\n@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1010
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：.*window\.location\.href='(?P<href>▻.*◅)▻'.*◅
漏洞原因：β1 = .* β2 = '.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：21
攻击字符串："window.location.href=' "+"'"*20000+"\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1011
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：.*window\.location\.href='(?P<href>▻.*◅)▻'.*◅
漏洞原因：β1 = .* β2 = '.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：22
攻击字符串："window.location.href='"+"'"*20000+"\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1005
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：.*window\.location\.href='(?P<href>▻.*◅)▻'.*◅
漏洞原因：β1 = .* β2 = '.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：23
攻击字符串："window.location.href=' "+"'"*20000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1009
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：.*window\.location\.href='(?P<href>▻.*◅)▻'.*◅
漏洞原因：β1 = .* β2 = '.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：24
攻击字符串："window.location.href='"+"'"*20000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1005
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：.*window\.location\.href='(?P<href>▻.*◅)▻'.*◅
漏洞原因：β1 = .* β2 = '.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：25
攻击字符串：""+"w"*10000+"\u0000"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1005
时间复杂度：POLYNOMIAL
漏洞模式：SLQ2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：26
攻击字符串：""+"1"*20000+"@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：562
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_1
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：27
攻击字符串：""+"1"*20000+"\n@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1013
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:86
正则表达式:.+conffile-prompt : '(.+)' '(.+)'
是否是ReDos漏洞：RESULT-TRUE
攻击字符串如下:
------------------------
编号：1
攻击字符串："\u0000"+"\u0000conffile-prompt : '\u0000"*5000+"\n1\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1001
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.+conffile-prompt : '◅(▻.+◅)' '(.+)'
漏洞原因：β1 = .+ β2 = conffile-prompt : '.+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：2
攻击字符串：""+"\u0000conffile-prompt : '\u0000"*5000+"\n1\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1007
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.+conffile-prompt : '◅(▻.+◅)' '(.+)'
漏洞原因：β1 = .+ β2 = conffile-prompt : '.+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：3
攻击字符串："\u0000"+"\u0000conffile-prompt : '\u0000"*5000+"\n@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1011
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.+conffile-prompt : '◅(▻.+◅)' '(.+)'
漏洞原因：β1 = .+ β2 = conffile-prompt : '.+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：4
攻击字符串：""+"\u0000conffile-prompt : '\u0000"*5000+"\n@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1007
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.+conffile-prompt : '◅(▻.+◅)' '(.+)'
漏洞原因：β1 = .+ β2 = conffile-prompt : '.+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：5
攻击字符串："\u0000"+"\u0000conffile-prompt : '\u0000"*5000+"\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1014
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.+conffile-prompt : '◅(▻.+◅)' '(.+)'
漏洞原因：β1 = .+ β2 = conffile-prompt : '.+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：6
攻击字符串：""+"\u0000conffile-prompt : '\u0000"*5000+"\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1000
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.+conffile-prompt : '◅(▻.+◅)' '(.+)'
漏洞原因：β1 = .+ β2 = conffile-prompt : '.+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：7
攻击字符串："\u0000"+"\u0000conffile-prompt : '\u0000"*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1011
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.+conffile-prompt : '◅(▻.+◅)' '(.+)'
漏洞原因：β1 = .+ β2 = conffile-prompt : '.+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：8
攻击字符串：""+"\u0000conffile-prompt : '\u0000"*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1013
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.+conffile-prompt : '◅(▻.+◅)' '(.+)'
漏洞原因：β1 = .+ β2 = conffile-prompt : '.+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：9
攻击字符串："\u0000"+"\u0000conffile-prompt : '\u0000' '\u0000"*5000+""
攻击是否成功：ATTACK_SUCCESS
攻击时间：1004
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.+conffile-prompt : '(.+)' '◅(▻.+◅)'
漏洞原因：β1 = .+ β2 = conffile-prompt : '(.+)' '.+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：10
攻击字符串：""+"\u0000conffile-prompt : '\u0000' '\u0000"*5000+""
攻击是否成功：ATTACK_SUCCESS
攻击时间：1001
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.+conffile-prompt : '(.+)' '◅(▻.+◅)'
漏洞原因：β1 = .+ β2 = conffile-prompt : '(.+)' '.+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：11
攻击字符串："\u0000"+"\u0000conffile-prompt : '\u0000' '\u0000"*5000+"\n@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1002
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.+conffile-prompt : '(.+)' '◅(▻.+◅)'
漏洞原因：β1 = .+ β2 = conffile-prompt : '(.+)' '.+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：12
攻击字符串：""+"\u0000conffile-prompt : '\u0000' '\u0000"*5000+"\n@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1016
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.+conffile-prompt : '(.+)' '◅(▻.+◅)'
漏洞原因：β1 = .+ β2 = conffile-prompt : '(.+)' '.+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：13
攻击字符串："\u0000"+"\u0000conffile-prompt : '\u0000' '\u0000"*5000+"\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1002
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.+conffile-prompt : '(.+)' '◅(▻.+◅)'
漏洞原因：β1 = .+ β2 = conffile-prompt : '(.+)' '.+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：14
攻击字符串：""+"\u0000conffile-prompt : '\u0000' '\u0000"*5000+"\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1005
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.+conffile-prompt : '(.+)' '◅(▻.+◅)'
漏洞原因：β1 = .+ β2 = conffile-prompt : '(.+)' '.+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：15
攻击字符串："\u0000"+"\u0000conffile-prompt : '\u0000' '\u0000"*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1003
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.+conffile-prompt : '(.+)' '◅(▻.+◅)'
漏洞原因：β1 = .+ β2 = conffile-prompt : '(.+)' '.+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：16
攻击字符串：""+"\u0000conffile-prompt : '\u0000' '\u0000"*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1015
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻.+conffile-prompt : '(.+)' '◅(▻.+◅)'
漏洞原因：β1 = .+ β2 = conffile-prompt : '(.+)' '.+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：17
攻击字符串："1conffile-prompt : '"+"\u0000' '\u0000"*5000+""
攻击是否成功：ATTACK_SUCCESS
攻击时间：1004
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：.+conffile-prompt : '(▻.+◅)▻' '◅(▻.+◅)'
漏洞原因：β1 = .+ β2 = ' '.+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：18
攻击字符串："\u0000conffile-prompt : '\u0000"+"\u0000' '\u0000"*5000+""
攻击是否成功：ATTACK_SUCCESS
攻击时间：1009
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：.+conffile-prompt : '(▻.+◅)▻' '◅(▻.+◅)'
漏洞原因：β1 = .+ β2 = ' '.+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：19
攻击字符串："1conffile-prompt : '"+"\u0000' '\u0000"*5000+"\n@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1006
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：.+conffile-prompt : '(▻.+◅)▻' '◅(▻.+◅)'
漏洞原因：β1 = .+ β2 = ' '.+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：20
攻击字符串："\u0000conffile-prompt : '\u0000"+"\u0000' '\u0000"*5000+"\n@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1006
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：.+conffile-prompt : '(▻.+◅)▻' '◅(▻.+◅)'
漏洞原因：β1 = .+ β2 = ' '.+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：21
攻击字符串："1conffile-prompt : '"+"\u0000' '\u0000"*5000+"\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1012
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：.+conffile-prompt : '(▻.+◅)▻' '◅(▻.+◅)'
漏洞原因：β1 = .+ β2 = ' '.+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：22
攻击字符串："\u0000conffile-prompt : '\u0000"+"\u0000' '\u0000"*5000+"\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1004
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：.+conffile-prompt : '(▻.+◅)▻' '◅(▻.+◅)'
漏洞原因：β1 = .+ β2 = ' '.+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：23
攻击字符串："1conffile-prompt : '"+"\u0000' '\u0000"*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1010
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：.+conffile-prompt : '(▻.+◅)▻' '◅(▻.+◅)'
漏洞原因：β1 = .+ β2 = ' '.+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：24
攻击字符串："\u0000conffile-prompt : '\u0000"+"\u0000' '\u0000"*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1008
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：.+conffile-prompt : '(▻.+◅)▻' '◅(▻.+◅)'
漏洞原因：β1 = .+ β2 = ' '.+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：25
攻击字符串：""+"\u0000"*20000+"\u0000"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1004
时间复杂度：POLYNOMIAL
漏洞模式：SLQ2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：26
攻击字符串：""+"\u0000conffile-prompt : '"*5000+"\u0000"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1010
时间复杂度：POLYNOMIAL
漏洞模式：SLQ2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：27
攻击字符串：""+"1"*20000+"@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1004
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_1
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：28
攻击字符串：""+"1"*20000+"\n@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1003
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：29
攻击字符串：""+"1conffile-prompt : '"*5000+"\n@@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1011
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:87
正则表达式:<[fF][oO][nN][tT][ ]*[sS][iI][zZ][eE][ ]*='2'[ ]*>
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:88
正则表达式:<\w+[^>]*>|<\/\w+>|[\w\']+|\s+|[^\w\'\s<>\/]+
是否是ReDos漏洞：RESULT-TRUE
攻击字符串如下:
------------------------
编号：1
攻击字符串："<A"+"0"*10000+"@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1010
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：<▻\w+[^>]*◅>|<\/\w+>|[\w\']+|\s+|[^\w\'\s<>\/]+
漏洞原因：β1 = \w+ β2 = [^>]* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：2
攻击字符串："<A"+"A"*10000+"@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1013
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：<▻\w+[^>]*◅>|<\/\w+>|[\w\']+|\s+|[^\w\'\s<>\/]+
漏洞原因：β1 = \w+ β2 = [^>]* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：3
攻击字符串："<"+"0"*10000+"@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1005
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：<▻\w+[^>]*◅>|<\/\w+>|[\w\']+|\s+|[^\w\'\s<>\/]+
漏洞原因：β1 = \w+ β2 = [^>]* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：4
攻击字符串："<A"+"0"*10000+""
攻击是否成功：ATTACK_SUCCESS
攻击时间：1014
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：<▻\w+[^>]*◅>|<\/\w+>|[\w\']+|\s+|[^\w\'\s<>\/]+
漏洞原因：β1 = \w+ β2 = [^>]* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：5
攻击字符串："<A"+"A"*10000+""
攻击是否成功：ATTACK_SUCCESS
攻击时间：1002
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：<▻\w+[^>]*◅>|<\/\w+>|[\w\']+|\s+|[^\w\'\s<>\/]+
漏洞原因：β1 = \w+ β2 = [^>]* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：6
攻击字符串："<"+"0"*10000+""
攻击是否成功：ATTACK_SUCCESS
攻击时间：1008
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：<▻\w+[^>]*◅>|<\/\w+>|[\w\']+|\s+|[^\w\'\s<>\/]+
漏洞原因：β1 = \w+ β2 = [^>]* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：7
攻击字符串："<A"+"0"*10000+"!>!~!A!>!~!A"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1014
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：<▻\w+[^>]*◅>|<\/\w+>|[\w\']+|\s+|[^\w\'\s<>\/]+
漏洞原因：β1 = \w+ β2 = [^>]* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：8
攻击字符串："<A"+"A"*10000+"!>!~!A!>!~!A"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1001
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：<▻\w+[^>]*◅>|<\/\w+>|[\w\']+|\s+|[^\w\'\s<>\/]+
漏洞原因：β1 = \w+ β2 = [^>]* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：9
攻击字符串："<"+"0"*10000+"!>!~!A!>!~!A"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1015
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：<▻\w+[^>]*◅>|<\/\w+>|[\w\']+|\s+|[^\w\'\s<>\/]+
漏洞原因：β1 = \w+ β2 = [^>]* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：10
攻击字符串："<A"+"0"*10000+"> "
攻击是否成功：ATTACK_SUCCESS
攻击时间：1002
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：<▻\w+[^>]*◅>|<\/\w+>|[\w\']+|\s+|[^\w\'\s<>\/]+
漏洞原因：β1 = \w+ β2 = [^>]* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：11
攻击字符串："<A"+"A"*10000+"> "
攻击是否成功：ATTACK_SUCCESS
攻击时间：1016
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：<▻\w+[^>]*◅>|<\/\w+>|[\w\']+|\s+|[^\w\'\s<>\/]+
漏洞原因：β1 = \w+ β2 = [^>]* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：12
攻击字符串："<"+"0"*10000+"> "
攻击是否成功：ATTACK_SUCCESS
攻击时间：1016
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：<▻\w+[^>]*◅>|<\/\w+>|[\w\']+|\s+|[^\w\'\s<>\/]+
漏洞原因：β1 = \w+ β2 = [^>]* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:89
正则表达式:<a href='(proxylist_full_[_a-zA-Z0-9]+.html)'>
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:90
正则表达式:<a href='anon\/([0-9]+).html'>anon #
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:91
正则表达式:<a href='elite\/([0-9]+).html'>elite #
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:92
正则表达式:<a href='nonanon\/([0-9]+).html'>nonanon #
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:93
正则表达式:<class '([A-Za-z0-9.]+)'>(\..+)?
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:94
正则表达式:<class \'sympy[\w.]*?.([\w]*)\'>$
是否是ReDos漏洞：RESULT-TRUE
攻击字符串如下:
------------------------
编号：1
攻击字符串："<class 'sympy"+"0"*10000+"@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1016
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：<class \'sympy▻[\w.]*?.◅(▻[\w]*◅)\'>$
漏洞原因：β1 = [\w.]* β2 = .[\w]* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：2
攻击字符串："<class 'sympy"+"a"*10000+"@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1009
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：<class \'sympy▻[\w.]*?.◅(▻[\w]*◅)\'>$
漏洞原因：β1 = [\w.]* β2 = .[\w]* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：3
攻击字符串："<class 'sympyA"+"0"*10000+"@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1013
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：<class \'sympy▻[\w.]*?.◅(▻[\w]*◅)\'>$
漏洞原因：β1 = [\w.]* β2 = .[\w]* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：4
攻击字符串："<class 'sympyA"+"a"*10000+"@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1012
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：<class \'sympy▻[\w.]*?.◅(▻[\w]*◅)\'>$
漏洞原因：β1 = [\w.]* β2 = .[\w]* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：5
攻击字符串："<class 'sympy"+"0"*10000+""
攻击是否成功：ATTACK_SUCCESS
攻击时间：1015
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：<class \'sympy▻[\w.]*?.◅(▻[\w]*◅)\'>$
漏洞原因：β1 = [\w.]* β2 = .[\w]* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：6
攻击字符串："<class 'sympy"+"a"*10000+""
攻击是否成功：ATTACK_SUCCESS
攻击时间：1014
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：<class \'sympy▻[\w.]*?.◅(▻[\w]*◅)\'>$
漏洞原因：β1 = [\w.]* β2 = .[\w]* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：7
攻击字符串："<class 'sympyA"+"0"*10000+""
攻击是否成功：ATTACK_SUCCESS
攻击时间：1011
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：<class \'sympy▻[\w.]*?.◅(▻[\w]*◅)\'>$
漏洞原因：β1 = [\w.]* β2 = .[\w]* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：8
攻击字符串："<class 'sympyA"+"a"*10000+""
攻击是否成功：ATTACK_SUCCESS
攻击时间：1008
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：<class \'sympy▻[\w.]*?.◅(▻[\w]*◅)\'>$
漏洞原因：β1 = [\w.]* β2 = .[\w]* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：9
攻击字符串："<class 'sympy"+"0"*10000+" "
攻击是否成功：ATTACK_SUCCESS
攻击时间：1008
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：<class \'sympy▻[\w.]*?.◅(▻[\w]*◅)\'>$
漏洞原因：β1 = [\w.]* β2 = .[\w]* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：10
攻击字符串："<class 'sympy"+"a"*10000+" "
攻击是否成功：ATTACK_SUCCESS
攻击时间：1016
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：<class \'sympy▻[\w.]*?.◅(▻[\w]*◅)\'>$
漏洞原因：β1 = [\w.]* β2 = .[\w]* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：11
攻击字符串："<class 'sympyA"+"0"*10000+" "
攻击是否成功：ATTACK_SUCCESS
攻击时间：1006
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：<class \'sympy▻[\w.]*?.◅(▻[\w]*◅)\'>$
漏洞原因：β1 = [\w.]* β2 = .[\w]* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：12
攻击字符串："<class 'sympyA"+"a"*10000+" "
攻击是否成功：ATTACK_SUCCESS
攻击时间：1016
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：<class \'sympy▻[\w.]*?.◅(▻[\w]*◅)\'>$
漏洞原因：β1 = [\w.]* β2 = .[\w]* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：13
攻击字符串："<class 'sympy"+"0"*10000+"~"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1002
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：<class \'sympy▻[\w.]*?.◅(▻[\w]*◅)\'>$
漏洞原因：β1 = [\w.]* β2 = .[\w]* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：14
攻击字符串："<class 'sympy"+"a"*10000+"~"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1007
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：<class \'sympy▻[\w.]*?.◅(▻[\w]*◅)\'>$
漏洞原因：β1 = [\w.]* β2 = .[\w]* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：15
攻击字符串："<class 'sympyA"+"0"*10000+"~"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1006
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：<class \'sympy▻[\w.]*?.◅(▻[\w]*◅)\'>$
漏洞原因：β1 = [\w.]* β2 = .[\w]* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：16
攻击字符串："<class 'sympyA"+"a"*10000+"~"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1010
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：<class \'sympy▻[\w.]*?.◅(▻[\w]*◅)\'>$
漏洞原因：β1 = [\w.]* β2 = .[\w]* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:95
正则表达式:<div class='lyricbox'><div class='rtMatcher'>.*?<\/div>(.*?)<!--
是否是ReDos漏洞：RESULT-TRUE
攻击字符串如下:
------------------------
编号：1
攻击字符串："<div class='lyricbox'><div class='rtMatcher'>"+"</div>"*5000+"@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1013
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：<div class='lyricbox'><div class='rtMatcher'>▻.*?<\/div>◅(▻.*?◅)<!--
漏洞原因：β1 = .* β2 = <\/div>.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：2
攻击字符串："<div class='lyricbox'><div class='rtMatcher'> "+"</div>"*5000+"@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1013
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：<div class='lyricbox'><div class='rtMatcher'>▻.*?<\/div>◅(▻.*?◅)<!--
漏洞原因：β1 = .* β2 = <\/div>.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：3
攻击字符串："<div class='lyricbox'><div class='rtMatcher'>"+"</div>"*5000+""
攻击是否成功：ATTACK_SUCCESS
攻击时间：1007
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：<div class='lyricbox'><div class='rtMatcher'>▻.*?<\/div>◅(▻.*?◅)<!--
漏洞原因：β1 = .* β2 = <\/div>.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：4
攻击字符串："<div class='lyricbox'><div class='rtMatcher'> "+"</div>"*5000+""
攻击是否成功：ATTACK_SUCCESS
攻击时间：1001
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：<div class='lyricbox'><div class='rtMatcher'>▻.*?<\/div>◅(▻.*?◅)<!--
漏洞原因：β1 = .* β2 = <\/div>.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：5
攻击字符串："<div class='lyricbox'><div class='rtMatcher'>"+"</div>"*5000+"\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1005
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：<div class='lyricbox'><div class='rtMatcher'>▻.*?<\/div>◅(▻.*?◅)<!--
漏洞原因：β1 = .* β2 = <\/div>.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：6
攻击字符串："<div class='lyricbox'><div class='rtMatcher'> "+"</div>"*5000+"\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1008
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：<div class='lyricbox'><div class='rtMatcher'>▻.*?<\/div>◅(▻.*?◅)<!--
漏洞原因：β1 = .* β2 = <\/div>.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：7
攻击字符串："<div class='lyricbox'><div class='rtMatcher'>"+"</div>"*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1014
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：<div class='lyricbox'><div class='rtMatcher'>▻.*?<\/div>◅(▻.*?◅)<!--
漏洞原因：β1 = .* β2 = <\/div>.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：8
攻击字符串："<div class='lyricbox'><div class='rtMatcher'> "+"</div>"*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1012
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：<div class='lyricbox'><div class='rtMatcher'>▻.*?<\/div>◅(▻.*?◅)<!--
漏洞原因：β1 = .* β2 = <\/div>.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：9
攻击字符串：""+"<div class='lyricbox'><div class='rtMatcher'>"*5000+"\u0000"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1005
时间复杂度：POLYNOMIAL
漏洞模式：SLQ2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：10
攻击字符串：""+"<div class='lyricbox'><div class='rtMatcher'></div>"*5000+"\u0000"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1008
时间复杂度：POLYNOMIAL
漏洞模式：SLQ2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：11
攻击字符串：""+"<div class='lyricbox'><div class='rtMatcher'>"*5000+"\n@@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1008
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：12
攻击字符串：""+"<div class='lyricbox'><div class='rtMatcher'>1</div>"*5000+"\n@@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1014
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:96
正则表达式:<link rel=\'image_src\' href=\'(http:\/\/is[0-9].myvideo\.de\/de\/movie[0-9]+\/[a-f0-9]+)\/thumbs\/[^.]+\.jpg\' \/>
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:97
正则表达式:<tr><td>([A-Za-z ]+)<\/td><td class='number'>\$([\d,]+)<\/td><td class='number'>\$([\d,]+)<\/td><td class='number'>\$([\d,]+)<\/td><\/tr>
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:98
正则表达式:<|&|'
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:99
正则表达式:@'([^']+)'
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:100
正则表达式:@import '([a-zA-Z0-9_-]+)';
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:101
正则表达式:APACHEPATH.'([^']*?)'
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:102
正则表达式:AddLocation\((.*?')\)
是否是ReDos漏洞：RESULT-TRUE
攻击字符串如下:
------------------------
编号：1
攻击字符串：""+"AddLocation("*5000+"\u0000"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1002
时间复杂度：POLYNOMIAL
漏洞模式：SLQ2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：2
攻击字符串：""+"AddLocation(1"*5000+"◎"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1002
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：3
攻击字符串：""+"AddLocation(1"*5000+"◎\n@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1014
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:103
正则表达式:Can't connect to local MySQL server through socket
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:104
正则表达式:Change (\d+) on \S+ by \S+@\S+ '.+'$
是否是ReDos漏洞：RESULT-TRUE
攻击字符串如下:
------------------------
编号：1
攻击字符串："Change 0 on \u0000 by \u0000"+"\u0000@\u0000"*5000+"@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1005
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：Change (?P<num>\d+) on \S+ by ▻\S+@\S+◅ '.+'$
漏洞原因：β1 = \S+ β2 = @\S+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：2
攻击字符串："Change 1 on A by "+"\u0000@\u0000"*5000+"@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1005
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：Change (?P<num>\d+) on \S+ by ▻\S+@\S+◅ '.+'$
漏洞原因：β1 = \S+ β2 = @\S+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：3
攻击字符串："Change 0 on \u0000 by \u0000"+"\u0000@\u0000"*5000+" "
攻击是否成功：ATTACK_SUCCESS
攻击时间：1012
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：Change (?P<num>\d+) on \S+ by ▻\S+@\S+◅ '.+'$
漏洞原因：β1 = \S+ β2 = @\S+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：4
攻击字符串："Change 1 on A by "+"\u0000@\u0000"*5000+" "
攻击是否成功：ATTACK_SUCCESS
攻击时间：1012
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：Change (?P<num>\d+) on \S+ by ▻\S+@\S+◅ '.+'$
漏洞原因：β1 = \S+ β2 = @\S+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：5
攻击字符串："Change 0 on \u0000 by \u0000"+"\u0000@\u0000"*5000+"\n1\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1010
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：Change (?P<num>\d+) on \S+ by ▻\S+@\S+◅ '.+'$
漏洞原因：β1 = \S+ β2 = @\S+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：6
攻击字符串："Change 1 on A by "+"\u0000@\u0000"*5000+"\n1\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1002
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：Change (?P<num>\d+) on \S+ by ▻\S+@\S+◅ '.+'$
漏洞原因：β1 = \S+ β2 = @\S+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：7
攻击字符串："Change 0 on \u0000 by \u0000"+"\u0000@\u0000"*5000+"! \n! \n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1010
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：Change (?P<num>\d+) on \S+ by ▻\S+@\S+◅ '.+'$
漏洞原因：β1 = \S+ β2 = @\S+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：8
攻击字符串："Change 1 on A by "+"\u0000@\u0000"*5000+"! \n! \n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1003
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：Change (?P<num>\d+) on \S+ by ▻\S+@\S+◅ '.+'$
漏洞原因：β1 = \S+ β2 = @\S+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：9
攻击字符串：""+"Change 0 on \u0000 by \u0000@\u0000 '"*5000+"\u0000"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1010
时间复杂度：POLYNOMIAL
漏洞模式：SLQ2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：10
攻击字符串：""+"Change 1 on 1 by 1@1 '"*5000+"\n@@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1004
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:105
正则表达式:Couldn't find index page for '[^']+' \(maybe misspelled\?\)\n
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:106
正则表达式:Couldn't start forwarder server for port spec: (\d+):(\d+)
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:107
正则表达式:Decimal\('(\d+(\.\d*)?)'\)
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:108
正则表达式:Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci.0\n  parent_bus = ()\n  child_bus = \[.*QPCIBus.*, .*QStrictCustomBus.*\]\n  params:\ni440FX\n  aid = __1\n  aobject = None\n  parent_bus = (\{'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = i440FX\n    addr = 00\n    bus = pci.0\nPIIX4_PM\n  aid = __2\n  aobject = None\n  parent_bus = (\{'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX4_PM\n    addr = 01.3\n    bus = pci.0\nPIIX3\n  aid = __3\n  aobject = None\n  parent_bus = (\{'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX3\n    addr = 01\n    bus = pci.0\npiix3-ide\n  aid = __4\n  aobject = None\n  parent_bus = (\{'aobject': 'pci.0'},)\n  child_bus = \[.*QIDEBus.*\]\n  params:\n    driver = piix3-ide\n    addr = 01.1\n    bus = pci.0\nfdc\n  aid = __5\n  aobject = None\n  parent_bus = \(\)\n  child_bus = \[.*QFloppyBus.*\]\n  params:
是否是ReDos漏洞：RESULT-TRUE
攻击字符串如下:
------------------------
编号：1
攻击字符串："Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci10\n  parent_bus = \n  child_bus = ["+"QPCIBus"*5000+"@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1014
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci.0\n  parent_bus = ()\n  child_bus = \[▻.*QPCIBus.*◅, .*QStrictCustomBus.*\]\n  params:\ni440FX\n  aid = __1\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = i440FX\n    addr = 00\n    bus = pci.0\nPIIX4_PM\n  aid = __2\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX4_PM\n    addr = 01.3\n    bus = pci.0\nPIIX3\n  aid = __3\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX3\n    addr = 01\n    bus = pci.0\npiix3-ide\n  aid = __4\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[.*QIDEBus.*\]\n  params:\n    driver = piix3-ide\n    addr = 01.1\n    bus = pci.0\nfdc\n  aid = __5\n  aobject = None\n  parent_bus = \(\)\n  child_bus = \[.*QFloppyBus.*\]\n  params:
漏洞原因：β1 = .* β2 = QPCIBus.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：2
攻击字符串："Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci\u00000\n  parent_bus = \n  child_bus = [ "+"QPCIBus"*5000+"@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1009
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci.0\n  parent_bus = ()\n  child_bus = \[▻.*QPCIBus.*◅, .*QStrictCustomBus.*\]\n  params:\ni440FX\n  aid = __1\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = i440FX\n    addr = 00\n    bus = pci.0\nPIIX4_PM\n  aid = __2\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX4_PM\n    addr = 01.3\n    bus = pci.0\nPIIX3\n  aid = __3\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX3\n    addr = 01\n    bus = pci.0\npiix3-ide\n  aid = __4\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[.*QIDEBus.*\]\n  params:\n    driver = piix3-ide\n    addr = 01.1\n    bus = pci.0\nfdc\n  aid = __5\n  aobject = None\n  parent_bus = \(\)\n  child_bus = \[.*QFloppyBus.*\]\n  params:
漏洞原因：β1 = .* β2 = QPCIBus.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：3
攻击字符串："Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci10\n  parent_bus = \n  child_bus = ["+"QPCIBus"*5000+"\n1\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1001
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci.0\n  parent_bus = ()\n  child_bus = \[▻.*QPCIBus.*◅, .*QStrictCustomBus.*\]\n  params:\ni440FX\n  aid = __1\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = i440FX\n    addr = 00\n    bus = pci.0\nPIIX4_PM\n  aid = __2\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX4_PM\n    addr = 01.3\n    bus = pci.0\nPIIX3\n  aid = __3\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX3\n    addr = 01\n    bus = pci.0\npiix3-ide\n  aid = __4\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[.*QIDEBus.*\]\n  params:\n    driver = piix3-ide\n    addr = 01.1\n    bus = pci.0\nfdc\n  aid = __5\n  aobject = None\n  parent_bus = \(\)\n  child_bus = \[.*QFloppyBus.*\]\n  params:
漏洞原因：β1 = .* β2 = QPCIBus.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：4
攻击字符串："Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci\u00000\n  parent_bus = \n  child_bus = [ "+"QPCIBus"*5000+"\n1\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1004
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci.0\n  parent_bus = ()\n  child_bus = \[▻.*QPCIBus.*◅, .*QStrictCustomBus.*\]\n  params:\ni440FX\n  aid = __1\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = i440FX\n    addr = 00\n    bus = pci.0\nPIIX4_PM\n  aid = __2\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX4_PM\n    addr = 01.3\n    bus = pci.0\nPIIX3\n  aid = __3\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX3\n    addr = 01\n    bus = pci.0\npiix3-ide\n  aid = __4\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[.*QIDEBus.*\]\n  params:\n    driver = piix3-ide\n    addr = 01.1\n    bus = pci.0\nfdc\n  aid = __5\n  aobject = None\n  parent_bus = \(\)\n  child_bus = \[.*QFloppyBus.*\]\n  params:
漏洞原因：β1 = .* β2 = QPCIBus.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：5
攻击字符串："Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci10\n  parent_bus = \n  child_bus = ["+"QPCIBus"*5000+"\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1007
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci.0\n  parent_bus = ()\n  child_bus = \[▻.*QPCIBus.*◅, .*QStrictCustomBus.*\]\n  params:\ni440FX\n  aid = __1\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = i440FX\n    addr = 00\n    bus = pci.0\nPIIX4_PM\n  aid = __2\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX4_PM\n    addr = 01.3\n    bus = pci.0\nPIIX3\n  aid = __3\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX3\n    addr = 01\n    bus = pci.0\npiix3-ide\n  aid = __4\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[.*QIDEBus.*\]\n  params:\n    driver = piix3-ide\n    addr = 01.1\n    bus = pci.0\nfdc\n  aid = __5\n  aobject = None\n  parent_bus = \(\)\n  child_bus = \[.*QFloppyBus.*\]\n  params:
漏洞原因：β1 = .* β2 = QPCIBus.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：6
攻击字符串："Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci\u00000\n  parent_bus = \n  child_bus = [ "+"QPCIBus"*5000+"\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1014
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci.0\n  parent_bus = ()\n  child_bus = \[▻.*QPCIBus.*◅, .*QStrictCustomBus.*\]\n  params:\ni440FX\n  aid = __1\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = i440FX\n    addr = 00\n    bus = pci.0\nPIIX4_PM\n  aid = __2\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX4_PM\n    addr = 01.3\n    bus = pci.0\nPIIX3\n  aid = __3\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX3\n    addr = 01\n    bus = pci.0\npiix3-ide\n  aid = __4\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[.*QIDEBus.*\]\n  params:\n    driver = piix3-ide\n    addr = 01.1\n    bus = pci.0\nfdc\n  aid = __5\n  aobject = None\n  parent_bus = \(\)\n  child_bus = \[.*QFloppyBus.*\]\n  params:
漏洞原因：β1 = .* β2 = QPCIBus.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：7
攻击字符串："Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci10\n  parent_bus = \n  child_bus = ["+"QPCIBus"*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1012
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci.0\n  parent_bus = ()\n  child_bus = \[▻.*QPCIBus.*◅, .*QStrictCustomBus.*\]\n  params:\ni440FX\n  aid = __1\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = i440FX\n    addr = 00\n    bus = pci.0\nPIIX4_PM\n  aid = __2\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX4_PM\n    addr = 01.3\n    bus = pci.0\nPIIX3\n  aid = __3\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX3\n    addr = 01\n    bus = pci.0\npiix3-ide\n  aid = __4\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[.*QIDEBus.*\]\n  params:\n    driver = piix3-ide\n    addr = 01.1\n    bus = pci.0\nfdc\n  aid = __5\n  aobject = None\n  parent_bus = \(\)\n  child_bus = \[.*QFloppyBus.*\]\n  params:
漏洞原因：β1 = .* β2 = QPCIBus.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：8
攻击字符串："Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci\u00000\n  parent_bus = \n  child_bus = [ "+"QPCIBus"*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1004
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci.0\n  parent_bus = ()\n  child_bus = \[▻.*QPCIBus.*◅, .*QStrictCustomBus.*\]\n  params:\ni440FX\n  aid = __1\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = i440FX\n    addr = 00\n    bus = pci.0\nPIIX4_PM\n  aid = __2\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX4_PM\n    addr = 01.3\n    bus = pci.0\nPIIX3\n  aid = __3\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX3\n    addr = 01\n    bus = pci.0\npiix3-ide\n  aid = __4\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[.*QIDEBus.*\]\n  params:\n    driver = piix3-ide\n    addr = 01.1\n    bus = pci.0\nfdc\n  aid = __5\n  aobject = None\n  parent_bus = \(\)\n  child_bus = \[.*QFloppyBus.*\]\n  params:
漏洞原因：β1 = .* β2 = QPCIBus.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：9
攻击字符串："Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci10\n  parent_bus = \n  child_bus = ["+"QPCIBus, "*5000+"@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1001
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci.0\n  parent_bus = ()\n  child_bus = \[▻.*QPCIBus.*, .*◅QStrictCustomBus.*\]\n  params:\ni440FX\n  aid = __1\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = i440FX\n    addr = 00\n    bus = pci.0\nPIIX4_PM\n  aid = __2\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX4_PM\n    addr = 01.3\n    bus = pci.0\nPIIX3\n  aid = __3\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX3\n    addr = 01\n    bus = pci.0\npiix3-ide\n  aid = __4\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[.*QIDEBus.*\]\n  params:\n    driver = piix3-ide\n    addr = 01.1\n    bus = pci.0\nfdc\n  aid = __5\n  aobject = None\n  parent_bus = \(\)\n  child_bus = \[.*QFloppyBus.*\]\n  params:
漏洞原因：β1 = .* β2 = QPCIBus.*, .* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：10
攻击字符串："Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci\u00000\n  parent_bus = \n  child_bus = [ "+"QPCIBus, "*5000+"@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1007
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci.0\n  parent_bus = ()\n  child_bus = \[▻.*QPCIBus.*, .*◅QStrictCustomBus.*\]\n  params:\ni440FX\n  aid = __1\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = i440FX\n    addr = 00\n    bus = pci.0\nPIIX4_PM\n  aid = __2\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX4_PM\n    addr = 01.3\n    bus = pci.0\nPIIX3\n  aid = __3\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX3\n    addr = 01\n    bus = pci.0\npiix3-ide\n  aid = __4\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[.*QIDEBus.*\]\n  params:\n    driver = piix3-ide\n    addr = 01.1\n    bus = pci.0\nfdc\n  aid = __5\n  aobject = None\n  parent_bus = \(\)\n  child_bus = \[.*QFloppyBus.*\]\n  params:
漏洞原因：β1 = .* β2 = QPCIBus.*, .* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：11
攻击字符串："Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci10\n  parent_bus = \n  child_bus = ["+"QPCIBus, "*5000+"\n1\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1013
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci.0\n  parent_bus = ()\n  child_bus = \[▻.*QPCIBus.*, .*◅QStrictCustomBus.*\]\n  params:\ni440FX\n  aid = __1\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = i440FX\n    addr = 00\n    bus = pci.0\nPIIX4_PM\n  aid = __2\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX4_PM\n    addr = 01.3\n    bus = pci.0\nPIIX3\n  aid = __3\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX3\n    addr = 01\n    bus = pci.0\npiix3-ide\n  aid = __4\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[.*QIDEBus.*\]\n  params:\n    driver = piix3-ide\n    addr = 01.1\n    bus = pci.0\nfdc\n  aid = __5\n  aobject = None\n  parent_bus = \(\)\n  child_bus = \[.*QFloppyBus.*\]\n  params:
漏洞原因：β1 = .* β2 = QPCIBus.*, .* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：12
攻击字符串："Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci\u00000\n  parent_bus = \n  child_bus = [ "+"QPCIBus, "*5000+"\n1\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1016
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci.0\n  parent_bus = ()\n  child_bus = \[▻.*QPCIBus.*, .*◅QStrictCustomBus.*\]\n  params:\ni440FX\n  aid = __1\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = i440FX\n    addr = 00\n    bus = pci.0\nPIIX4_PM\n  aid = __2\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX4_PM\n    addr = 01.3\n    bus = pci.0\nPIIX3\n  aid = __3\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX3\n    addr = 01\n    bus = pci.0\npiix3-ide\n  aid = __4\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[.*QIDEBus.*\]\n  params:\n    driver = piix3-ide\n    addr = 01.1\n    bus = pci.0\nfdc\n  aid = __5\n  aobject = None\n  parent_bus = \(\)\n  child_bus = \[.*QFloppyBus.*\]\n  params:
漏洞原因：β1 = .* β2 = QPCIBus.*, .* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：13
攻击字符串："Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci10\n  parent_bus = \n  child_bus = ["+"QPCIBus, "*5000+"\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1003
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci.0\n  parent_bus = ()\n  child_bus = \[▻.*QPCIBus.*, .*◅QStrictCustomBus.*\]\n  params:\ni440FX\n  aid = __1\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = i440FX\n    addr = 00\n    bus = pci.0\nPIIX4_PM\n  aid = __2\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX4_PM\n    addr = 01.3\n    bus = pci.0\nPIIX3\n  aid = __3\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX3\n    addr = 01\n    bus = pci.0\npiix3-ide\n  aid = __4\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[.*QIDEBus.*\]\n  params:\n    driver = piix3-ide\n    addr = 01.1\n    bus = pci.0\nfdc\n  aid = __5\n  aobject = None\n  parent_bus = \(\)\n  child_bus = \[.*QFloppyBus.*\]\n  params:
漏洞原因：β1 = .* β2 = QPCIBus.*, .* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：14
攻击字符串："Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci\u00000\n  parent_bus = \n  child_bus = [ "+"QPCIBus, "*5000+"\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1014
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci.0\n  parent_bus = ()\n  child_bus = \[▻.*QPCIBus.*, .*◅QStrictCustomBus.*\]\n  params:\ni440FX\n  aid = __1\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = i440FX\n    addr = 00\n    bus = pci.0\nPIIX4_PM\n  aid = __2\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX4_PM\n    addr = 01.3\n    bus = pci.0\nPIIX3\n  aid = __3\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX3\n    addr = 01\n    bus = pci.0\npiix3-ide\n  aid = __4\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[.*QIDEBus.*\]\n  params:\n    driver = piix3-ide\n    addr = 01.1\n    bus = pci.0\nfdc\n  aid = __5\n  aobject = None\n  parent_bus = \(\)\n  child_bus = \[.*QFloppyBus.*\]\n  params:
漏洞原因：β1 = .* β2 = QPCIBus.*, .* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：15
攻击字符串："Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci10\n  parent_bus = \n  child_bus = ["+"QPCIBus, "*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1011
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci.0\n  parent_bus = ()\n  child_bus = \[▻.*QPCIBus.*, .*◅QStrictCustomBus.*\]\n  params:\ni440FX\n  aid = __1\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = i440FX\n    addr = 00\n    bus = pci.0\nPIIX4_PM\n  aid = __2\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX4_PM\n    addr = 01.3\n    bus = pci.0\nPIIX3\n  aid = __3\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX3\n    addr = 01\n    bus = pci.0\npiix3-ide\n  aid = __4\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[.*QIDEBus.*\]\n  params:\n    driver = piix3-ide\n    addr = 01.1\n    bus = pci.0\nfdc\n  aid = __5\n  aobject = None\n  parent_bus = \(\)\n  child_bus = \[.*QFloppyBus.*\]\n  params:
漏洞原因：β1 = .* β2 = QPCIBus.*, .* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：16
攻击字符串："Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci\u00000\n  parent_bus = \n  child_bus = [ "+"QPCIBus, "*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1006
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci.0\n  parent_bus = ()\n  child_bus = \[▻.*QPCIBus.*, .*◅QStrictCustomBus.*\]\n  params:\ni440FX\n  aid = __1\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = i440FX\n    addr = 00\n    bus = pci.0\nPIIX4_PM\n  aid = __2\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX4_PM\n    addr = 01.3\n    bus = pci.0\nPIIX3\n  aid = __3\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX3\n    addr = 01\n    bus = pci.0\npiix3-ide\n  aid = __4\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[.*QIDEBus.*\]\n  params:\n    driver = piix3-ide\n    addr = 01.1\n    bus = pci.0\nfdc\n  aid = __5\n  aobject = None\n  parent_bus = \(\)\n  child_bus = \[.*QFloppyBus.*\]\n  params:
漏洞原因：β1 = .* β2 = QPCIBus.*, .* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：17
攻击字符串："Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci10\n  parent_bus = \n  child_bus = ["+"QPCIBus, QStrictCustomBus"*5000+"@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1004
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci.0\n  parent_bus = ()\n  child_bus = \[▻.*QPCIBus.*, .*QStrictCustomBus.*◅\]\n  params:\ni440FX\n  aid = __1\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = i440FX\n    addr = 00\n    bus = pci.0\nPIIX4_PM\n  aid = __2\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX4_PM\n    addr = 01.3\n    bus = pci.0\nPIIX3\n  aid = __3\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX3\n    addr = 01\n    bus = pci.0\npiix3-ide\n  aid = __4\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[.*QIDEBus.*\]\n  params:\n    driver = piix3-ide\n    addr = 01.1\n    bus = pci.0\nfdc\n  aid = __5\n  aobject = None\n  parent_bus = \(\)\n  child_bus = \[.*QFloppyBus.*\]\n  params:
漏洞原因：β1 = .* β2 = QPCIBus.*, .*QStrictCustomBus.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：18
攻击字符串："Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci\u00000\n  parent_bus = \n  child_bus = [ "+"QPCIBus, QStrictCustomBus"*5000+"@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1016
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci.0\n  parent_bus = ()\n  child_bus = \[▻.*QPCIBus.*, .*QStrictCustomBus.*◅\]\n  params:\ni440FX\n  aid = __1\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = i440FX\n    addr = 00\n    bus = pci.0\nPIIX4_PM\n  aid = __2\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX4_PM\n    addr = 01.3\n    bus = pci.0\nPIIX3\n  aid = __3\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX3\n    addr = 01\n    bus = pci.0\npiix3-ide\n  aid = __4\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[.*QIDEBus.*\]\n  params:\n    driver = piix3-ide\n    addr = 01.1\n    bus = pci.0\nfdc\n  aid = __5\n  aobject = None\n  parent_bus = \(\)\n  child_bus = \[.*QFloppyBus.*\]\n  params:
漏洞原因：β1 = .* β2 = QPCIBus.*, .*QStrictCustomBus.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：19
攻击字符串："Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci10\n  parent_bus = \n  child_bus = ["+"QPCIBus, QStrictCustomBus"*5000+"\n1\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1006
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci.0\n  parent_bus = ()\n  child_bus = \[▻.*QPCIBus.*, .*QStrictCustomBus.*◅\]\n  params:\ni440FX\n  aid = __1\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = i440FX\n    addr = 00\n    bus = pci.0\nPIIX4_PM\n  aid = __2\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX4_PM\n    addr = 01.3\n    bus = pci.0\nPIIX3\n  aid = __3\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX3\n    addr = 01\n    bus = pci.0\npiix3-ide\n  aid = __4\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[.*QIDEBus.*\]\n  params:\n    driver = piix3-ide\n    addr = 01.1\n    bus = pci.0\nfdc\n  aid = __5\n  aobject = None\n  parent_bus = \(\)\n  child_bus = \[.*QFloppyBus.*\]\n  params:
漏洞原因：β1 = .* β2 = QPCIBus.*, .*QStrictCustomBus.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：20
攻击字符串："Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci\u00000\n  parent_bus = \n  child_bus = [ "+"QPCIBus, QStrictCustomBus"*5000+"\n1\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1015
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci.0\n  parent_bus = ()\n  child_bus = \[▻.*QPCIBus.*, .*QStrictCustomBus.*◅\]\n  params:\ni440FX\n  aid = __1\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = i440FX\n    addr = 00\n    bus = pci.0\nPIIX4_PM\n  aid = __2\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX4_PM\n    addr = 01.3\n    bus = pci.0\nPIIX3\n  aid = __3\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX3\n    addr = 01\n    bus = pci.0\npiix3-ide\n  aid = __4\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[.*QIDEBus.*\]\n  params:\n    driver = piix3-ide\n    addr = 01.1\n    bus = pci.0\nfdc\n  aid = __5\n  aobject = None\n  parent_bus = \(\)\n  child_bus = \[.*QFloppyBus.*\]\n  params:
漏洞原因：β1 = .* β2 = QPCIBus.*, .*QStrictCustomBus.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：21
攻击字符串："Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci10\n  parent_bus = \n  child_bus = ["+"QPCIBus, QStrictCustomBus"*5000+"\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1010
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci.0\n  parent_bus = ()\n  child_bus = \[▻.*QPCIBus.*, .*QStrictCustomBus.*◅\]\n  params:\ni440FX\n  aid = __1\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = i440FX\n    addr = 00\n    bus = pci.0\nPIIX4_PM\n  aid = __2\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX4_PM\n    addr = 01.3\n    bus = pci.0\nPIIX3\n  aid = __3\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX3\n    addr = 01\n    bus = pci.0\npiix3-ide\n  aid = __4\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[.*QIDEBus.*\]\n  params:\n    driver = piix3-ide\n    addr = 01.1\n    bus = pci.0\nfdc\n  aid = __5\n  aobject = None\n  parent_bus = \(\)\n  child_bus = \[.*QFloppyBus.*\]\n  params:
漏洞原因：β1 = .* β2 = QPCIBus.*, .*QStrictCustomBus.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：22
攻击字符串："Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci\u00000\n  parent_bus = \n  child_bus = [ "+"QPCIBus, QStrictCustomBus"*5000+"\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1005
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci.0\n  parent_bus = ()\n  child_bus = \[▻.*QPCIBus.*, .*QStrictCustomBus.*◅\]\n  params:\ni440FX\n  aid = __1\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = i440FX\n    addr = 00\n    bus = pci.0\nPIIX4_PM\n  aid = __2\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX4_PM\n    addr = 01.3\n    bus = pci.0\nPIIX3\n  aid = __3\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX3\n    addr = 01\n    bus = pci.0\npiix3-ide\n  aid = __4\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[.*QIDEBus.*\]\n  params:\n    driver = piix3-ide\n    addr = 01.1\n    bus = pci.0\nfdc\n  aid = __5\n  aobject = None\n  parent_bus = \(\)\n  child_bus = \[.*QFloppyBus.*\]\n  params:
漏洞原因：β1 = .* β2 = QPCIBus.*, .*QStrictCustomBus.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：23
攻击字符串："Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci10\n  parent_bus = \n  child_bus = ["+"QPCIBus, QStrictCustomBus"*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1010
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci.0\n  parent_bus = ()\n  child_bus = \[▻.*QPCIBus.*, .*QStrictCustomBus.*◅\]\n  params:\ni440FX\n  aid = __1\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = i440FX\n    addr = 00\n    bus = pci.0\nPIIX4_PM\n  aid = __2\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX4_PM\n    addr = 01.3\n    bus = pci.0\nPIIX3\n  aid = __3\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX3\n    addr = 01\n    bus = pci.0\npiix3-ide\n  aid = __4\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[.*QIDEBus.*\]\n  params:\n    driver = piix3-ide\n    addr = 01.1\n    bus = pci.0\nfdc\n  aid = __5\n  aobject = None\n  parent_bus = \(\)\n  child_bus = \[.*QFloppyBus.*\]\n  params:
漏洞原因：β1 = .* β2 = QPCIBus.*, .*QStrictCustomBus.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：24
攻击字符串："Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci\u00000\n  parent_bus = \n  child_bus = [ "+"QPCIBus, QStrictCustomBus"*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1008
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci.0\n  parent_bus = ()\n  child_bus = \[▻.*QPCIBus.*, .*QStrictCustomBus.*◅\]\n  params:\ni440FX\n  aid = __1\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = i440FX\n    addr = 00\n    bus = pci.0\nPIIX4_PM\n  aid = __2\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX4_PM\n    addr = 01.3\n    bus = pci.0\nPIIX3\n  aid = __3\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX3\n    addr = 01\n    bus = pci.0\npiix3-ide\n  aid = __4\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[.*QIDEBus.*\]\n  params:\n    driver = piix3-ide\n    addr = 01.1\n    bus = pci.0\nfdc\n  aid = __5\n  aobject = None\n  parent_bus = \(\)\n  child_bus = \[.*QFloppyBus.*\]\n  params:
漏洞原因：β1 = .* β2 = QPCIBus.*, .*QStrictCustomBus.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：25
攻击字符串："Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci10\n  parent_bus = \n  child_bus = [QPCIBus"+", "*10000+"@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1011
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci.0\n  parent_bus = ()\n  child_bus = \[.*QPCIBus▻.*, .*◅QStrictCustomBus.*\]\n  params:\ni440FX\n  aid = __1\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = i440FX\n    addr = 00\n    bus = pci.0\nPIIX4_PM\n  aid = __2\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX4_PM\n    addr = 01.3\n    bus = pci.0\nPIIX3\n  aid = __3\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX3\n    addr = 01\n    bus = pci.0\npiix3-ide\n  aid = __4\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[.*QIDEBus.*\]\n  params:\n    driver = piix3-ide\n    addr = 01.1\n    bus = pci.0\nfdc\n  aid = __5\n  aobject = None\n  parent_bus = \(\)\n  child_bus = \[.*QFloppyBus.*\]\n  params:
漏洞原因：β1 = .* β2 = , .* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：26
攻击字符串："Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci\u00000\n  parent_bus = \n  child_bus = [QPCIBus "+", "*10000+"@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1004
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci.0\n  parent_bus = ()\n  child_bus = \[.*QPCIBus▻.*, .*◅QStrictCustomBus.*\]\n  params:\ni440FX\n  aid = __1\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = i440FX\n    addr = 00\n    bus = pci.0\nPIIX4_PM\n  aid = __2\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX4_PM\n    addr = 01.3\n    bus = pci.0\nPIIX3\n  aid = __3\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX3\n    addr = 01\n    bus = pci.0\npiix3-ide\n  aid = __4\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[.*QIDEBus.*\]\n  params:\n    driver = piix3-ide\n    addr = 01.1\n    bus = pci.0\nfdc\n  aid = __5\n  aobject = None\n  parent_bus = \(\)\n  child_bus = \[.*QFloppyBus.*\]\n  params:
漏洞原因：β1 = .* β2 = , .* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：27
攻击字符串："Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci10\n  parent_bus = \n  child_bus = [QPCIBus"+", "*10000+"\n1\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1011
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci.0\n  parent_bus = ()\n  child_bus = \[.*QPCIBus▻.*, .*◅QStrictCustomBus.*\]\n  params:\ni440FX\n  aid = __1\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = i440FX\n    addr = 00\n    bus = pci.0\nPIIX4_PM\n  aid = __2\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX4_PM\n    addr = 01.3\n    bus = pci.0\nPIIX3\n  aid = __3\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX3\n    addr = 01\n    bus = pci.0\npiix3-ide\n  aid = __4\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[.*QIDEBus.*\]\n  params:\n    driver = piix3-ide\n    addr = 01.1\n    bus = pci.0\nfdc\n  aid = __5\n  aobject = None\n  parent_bus = \(\)\n  child_bus = \[.*QFloppyBus.*\]\n  params:
漏洞原因：β1 = .* β2 = , .* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：28
攻击字符串："Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci\u00000\n  parent_bus = \n  child_bus = [QPCIBus "+", "*10000+"\n1\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1013
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci.0\n  parent_bus = ()\n  child_bus = \[.*QPCIBus▻.*, .*◅QStrictCustomBus.*\]\n  params:\ni440FX\n  aid = __1\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = i440FX\n    addr = 00\n    bus = pci.0\nPIIX4_PM\n  aid = __2\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX4_PM\n    addr = 01.3\n    bus = pci.0\nPIIX3\n  aid = __3\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX3\n    addr = 01\n    bus = pci.0\npiix3-ide\n  aid = __4\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[.*QIDEBus.*\]\n  params:\n    driver = piix3-ide\n    addr = 01.1\n    bus = pci.0\nfdc\n  aid = __5\n  aobject = None\n  parent_bus = \(\)\n  child_bus = \[.*QFloppyBus.*\]\n  params:
漏洞原因：β1 = .* β2 = , .* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：29
攻击字符串："Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci10\n  parent_bus = \n  child_bus = [QPCIBus"+", "*10000+"\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：378
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：30
攻击字符串："Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci\u00000\n  parent_bus = \n  child_bus = [QPCIBus "+", "*10000+"\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1012
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci.0\n  parent_bus = ()\n  child_bus = \[.*QPCIBus▻.*, .*◅QStrictCustomBus.*\]\n  params:\ni440FX\n  aid = __1\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = i440FX\n    addr = 00\n    bus = pci.0\nPIIX4_PM\n  aid = __2\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX4_PM\n    addr = 01.3\n    bus = pci.0\nPIIX3\n  aid = __3\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX3\n    addr = 01\n    bus = pci.0\npiix3-ide\n  aid = __4\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[.*QIDEBus.*\]\n  params:\n    driver = piix3-ide\n    addr = 01.1\n    bus = pci.0\nfdc\n  aid = __5\n  aobject = None\n  parent_bus = \(\)\n  child_bus = \[.*QFloppyBus.*\]\n  params:
漏洞原因：β1 = .* β2 = , .* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：31
攻击字符串："Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci10\n  parent_bus = \n  child_bus = [QPCIBus"+", "*10000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1008
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci.0\n  parent_bus = ()\n  child_bus = \[.*QPCIBus▻.*, .*◅QStrictCustomBus.*\]\n  params:\ni440FX\n  aid = __1\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = i440FX\n    addr = 00\n    bus = pci.0\nPIIX4_PM\n  aid = __2\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX4_PM\n    addr = 01.3\n    bus = pci.0\nPIIX3\n  aid = __3\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX3\n    addr = 01\n    bus = pci.0\npiix3-ide\n  aid = __4\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[.*QIDEBus.*\]\n  params:\n    driver = piix3-ide\n    addr = 01.1\n    bus = pci.0\nfdc\n  aid = __5\n  aobject = None\n  parent_bus = \(\)\n  child_bus = \[.*QFloppyBus.*\]\n  params:
漏洞原因：β1 = .* β2 = , .* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：32
攻击字符串："Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci\u00000\n  parent_bus = \n  child_bus = [QPCIBus "+", "*10000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1004
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci.0\n  parent_bus = ()\n  child_bus = \[.*QPCIBus▻.*, .*◅QStrictCustomBus.*\]\n  params:\ni440FX\n  aid = __1\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = i440FX\n    addr = 00\n    bus = pci.0\nPIIX4_PM\n  aid = __2\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX4_PM\n    addr = 01.3\n    bus = pci.0\nPIIX3\n  aid = __3\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX3\n    addr = 01\n    bus = pci.0\npiix3-ide\n  aid = __4\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[.*QIDEBus.*\]\n  params:\n    driver = piix3-ide\n    addr = 01.1\n    bus = pci.0\nfdc\n  aid = __5\n  aobject = None\n  parent_bus = \(\)\n  child_bus = \[.*QFloppyBus.*\]\n  params:
漏洞原因：β1 = .* β2 = , .* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：33
攻击字符串："Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci10\n  parent_bus = \n  child_bus = [QPCIBus"+", QStrictCustomBus"*5000+"@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1003
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci.0\n  parent_bus = ()\n  child_bus = \[.*QPCIBus▻.*, .*QStrictCustomBus.*◅\]\n  params:\ni440FX\n  aid = __1\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = i440FX\n    addr = 00\n    bus = pci.0\nPIIX4_PM\n  aid = __2\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX4_PM\n    addr = 01.3\n    bus = pci.0\nPIIX3\n  aid = __3\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX3\n    addr = 01\n    bus = pci.0\npiix3-ide\n  aid = __4\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[.*QIDEBus.*\]\n  params:\n    driver = piix3-ide\n    addr = 01.1\n    bus = pci.0\nfdc\n  aid = __5\n  aobject = None\n  parent_bus = \(\)\n  child_bus = \[.*QFloppyBus.*\]\n  params:
漏洞原因：β1 = .* β2 = , .*QStrictCustomBus.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：34
攻击字符串："Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci\u00000\n  parent_bus = \n  child_bus = [QPCIBus "+", QStrictCustomBus"*5000+"@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1002
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci.0\n  parent_bus = ()\n  child_bus = \[.*QPCIBus▻.*, .*QStrictCustomBus.*◅\]\n  params:\ni440FX\n  aid = __1\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = i440FX\n    addr = 00\n    bus = pci.0\nPIIX4_PM\n  aid = __2\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX4_PM\n    addr = 01.3\n    bus = pci.0\nPIIX3\n  aid = __3\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX3\n    addr = 01\n    bus = pci.0\npiix3-ide\n  aid = __4\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[.*QIDEBus.*\]\n  params:\n    driver = piix3-ide\n    addr = 01.1\n    bus = pci.0\nfdc\n  aid = __5\n  aobject = None\n  parent_bus = \(\)\n  child_bus = \[.*QFloppyBus.*\]\n  params:
漏洞原因：β1 = .* β2 = , .*QStrictCustomBus.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：35
攻击字符串："Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci10\n  parent_bus = \n  child_bus = [QPCIBus"+", QStrictCustomBus"*5000+"\n1\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1016
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci.0\n  parent_bus = ()\n  child_bus = \[.*QPCIBus▻.*, .*QStrictCustomBus.*◅\]\n  params:\ni440FX\n  aid = __1\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = i440FX\n    addr = 00\n    bus = pci.0\nPIIX4_PM\n  aid = __2\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX4_PM\n    addr = 01.3\n    bus = pci.0\nPIIX3\n  aid = __3\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX3\n    addr = 01\n    bus = pci.0\npiix3-ide\n  aid = __4\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[.*QIDEBus.*\]\n  params:\n    driver = piix3-ide\n    addr = 01.1\n    bus = pci.0\nfdc\n  aid = __5\n  aobject = None\n  parent_bus = \(\)\n  child_bus = \[.*QFloppyBus.*\]\n  params:
漏洞原因：β1 = .* β2 = , .*QStrictCustomBus.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：36
攻击字符串："Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci\u00000\n  parent_bus = \n  child_bus = [QPCIBus "+", QStrictCustomBus"*5000+"\n1\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1011
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci.0\n  parent_bus = ()\n  child_bus = \[.*QPCIBus▻.*, .*QStrictCustomBus.*◅\]\n  params:\ni440FX\n  aid = __1\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = i440FX\n    addr = 00\n    bus = pci.0\nPIIX4_PM\n  aid = __2\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX4_PM\n    addr = 01.3\n    bus = pci.0\nPIIX3\n  aid = __3\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX3\n    addr = 01\n    bus = pci.0\npiix3-ide\n  aid = __4\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[.*QIDEBus.*\]\n  params:\n    driver = piix3-ide\n    addr = 01.1\n    bus = pci.0\nfdc\n  aid = __5\n  aobject = None\n  parent_bus = \(\)\n  child_bus = \[.*QFloppyBus.*\]\n  params:
漏洞原因：β1 = .* β2 = , .*QStrictCustomBus.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：37
攻击字符串："Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci10\n  parent_bus = \n  child_bus = [QPCIBus"+", QStrictCustomBus"*5000+"\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1005
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci.0\n  parent_bus = ()\n  child_bus = \[.*QPCIBus▻.*, .*QStrictCustomBus.*◅\]\n  params:\ni440FX\n  aid = __1\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = i440FX\n    addr = 00\n    bus = pci.0\nPIIX4_PM\n  aid = __2\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX4_PM\n    addr = 01.3\n    bus = pci.0\nPIIX3\n  aid = __3\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX3\n    addr = 01\n    bus = pci.0\npiix3-ide\n  aid = __4\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[.*QIDEBus.*\]\n  params:\n    driver = piix3-ide\n    addr = 01.1\n    bus = pci.0\nfdc\n  aid = __5\n  aobject = None\n  parent_bus = \(\)\n  child_bus = \[.*QFloppyBus.*\]\n  params:
漏洞原因：β1 = .* β2 = , .*QStrictCustomBus.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：38
攻击字符串："Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci\u00000\n  parent_bus = \n  child_bus = [QPCIBus "+", QStrictCustomBus"*5000+"\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1008
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci.0\n  parent_bus = ()\n  child_bus = \[.*QPCIBus▻.*, .*QStrictCustomBus.*◅\]\n  params:\ni440FX\n  aid = __1\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = i440FX\n    addr = 00\n    bus = pci.0\nPIIX4_PM\n  aid = __2\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX4_PM\n    addr = 01.3\n    bus = pci.0\nPIIX3\n  aid = __3\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX3\n    addr = 01\n    bus = pci.0\npiix3-ide\n  aid = __4\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[.*QIDEBus.*\]\n  params:\n    driver = piix3-ide\n    addr = 01.1\n    bus = pci.0\nfdc\n  aid = __5\n  aobject = None\n  parent_bus = \(\)\n  child_bus = \[.*QFloppyBus.*\]\n  params:
漏洞原因：β1 = .* β2 = , .*QStrictCustomBus.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：39
攻击字符串："Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci10\n  parent_bus = \n  child_bus = [QPCIBus"+", QStrictCustomBus"*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1010
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci.0\n  parent_bus = ()\n  child_bus = \[.*QPCIBus▻.*, .*QStrictCustomBus.*◅\]\n  params:\ni440FX\n  aid = __1\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = i440FX\n    addr = 00\n    bus = pci.0\nPIIX4_PM\n  aid = __2\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX4_PM\n    addr = 01.3\n    bus = pci.0\nPIIX3\n  aid = __3\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX3\n    addr = 01\n    bus = pci.0\npiix3-ide\n  aid = __4\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[.*QIDEBus.*\]\n  params:\n    driver = piix3-ide\n    addr = 01.1\n    bus = pci.0\nfdc\n  aid = __5\n  aobject = None\n  parent_bus = \(\)\n  child_bus = \[.*QFloppyBus.*\]\n  params:
漏洞原因：β1 = .* β2 = , .*QStrictCustomBus.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：40
攻击字符串："Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci\u00000\n  parent_bus = \n  child_bus = [QPCIBus "+", QStrictCustomBus"*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1003
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci.0\n  parent_bus = ()\n  child_bus = \[.*QPCIBus▻.*, .*QStrictCustomBus.*◅\]\n  params:\ni440FX\n  aid = __1\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = i440FX\n    addr = 00\n    bus = pci.0\nPIIX4_PM\n  aid = __2\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX4_PM\n    addr = 01.3\n    bus = pci.0\nPIIX3\n  aid = __3\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX3\n    addr = 01\n    bus = pci.0\npiix3-ide\n  aid = __4\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[.*QIDEBus.*\]\n  params:\n    driver = piix3-ide\n    addr = 01.1\n    bus = pci.0\nfdc\n  aid = __5\n  aobject = None\n  parent_bus = \(\)\n  child_bus = \[.*QFloppyBus.*\]\n  params:
漏洞原因：β1 = .* β2 = , .*QStrictCustomBus.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：41
攻击字符串："Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci\u00000\n  parent_bus = \n  child_bus = [QPCIBus,  "+"QStrictCustomBus"*5000+"@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1015
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci.0\n  parent_bus = ()\n  child_bus = \[.*QPCIBus.*, ▻.*QStrictCustomBus.*◅\]\n  params:\ni440FX\n  aid = __1\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = i440FX\n    addr = 00\n    bus = pci.0\nPIIX4_PM\n  aid = __2\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX4_PM\n    addr = 01.3\n    bus = pci.0\nPIIX3\n  aid = __3\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX3\n    addr = 01\n    bus = pci.0\npiix3-ide\n  aid = __4\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[.*QIDEBus.*\]\n  params:\n    driver = piix3-ide\n    addr = 01.1\n    bus = pci.0\nfdc\n  aid = __5\n  aobject = None\n  parent_bus = \(\)\n  child_bus = \[.*QFloppyBus.*\]\n  params:
漏洞原因：β1 = .* β2 = QStrictCustomBus.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：42
攻击字符串："Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci10\n  parent_bus = \n  child_bus = [QPCIBus, "+"QStrictCustomBus"*5000+"@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1005
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci.0\n  parent_bus = ()\n  child_bus = \[.*QPCIBus.*, ▻.*QStrictCustomBus.*◅\]\n  params:\ni440FX\n  aid = __1\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = i440FX\n    addr = 00\n    bus = pci.0\nPIIX4_PM\n  aid = __2\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX4_PM\n    addr = 01.3\n    bus = pci.0\nPIIX3\n  aid = __3\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX3\n    addr = 01\n    bus = pci.0\npiix3-ide\n  aid = __4\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[.*QIDEBus.*\]\n  params:\n    driver = piix3-ide\n    addr = 01.1\n    bus = pci.0\nfdc\n  aid = __5\n  aobject = None\n  parent_bus = \(\)\n  child_bus = \[.*QFloppyBus.*\]\n  params:
漏洞原因：β1 = .* β2 = QStrictCustomBus.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：43
攻击字符串："Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci\u00000\n  parent_bus = \n  child_bus = [QPCIBus,  "+"QStrictCustomBus"*5000+"\n1\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1015
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci.0\n  parent_bus = ()\n  child_bus = \[.*QPCIBus.*, ▻.*QStrictCustomBus.*◅\]\n  params:\ni440FX\n  aid = __1\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = i440FX\n    addr = 00\n    bus = pci.0\nPIIX4_PM\n  aid = __2\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX4_PM\n    addr = 01.3\n    bus = pci.0\nPIIX3\n  aid = __3\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX3\n    addr = 01\n    bus = pci.0\npiix3-ide\n  aid = __4\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[.*QIDEBus.*\]\n  params:\n    driver = piix3-ide\n    addr = 01.1\n    bus = pci.0\nfdc\n  aid = __5\n  aobject = None\n  parent_bus = \(\)\n  child_bus = \[.*QFloppyBus.*\]\n  params:
漏洞原因：β1 = .* β2 = QStrictCustomBus.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：44
攻击字符串："Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci10\n  parent_bus = \n  child_bus = [QPCIBus, "+"QStrictCustomBus"*5000+"\n1\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1005
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci.0\n  parent_bus = ()\n  child_bus = \[.*QPCIBus.*, ▻.*QStrictCustomBus.*◅\]\n  params:\ni440FX\n  aid = __1\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = i440FX\n    addr = 00\n    bus = pci.0\nPIIX4_PM\n  aid = __2\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX4_PM\n    addr = 01.3\n    bus = pci.0\nPIIX3\n  aid = __3\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX3\n    addr = 01\n    bus = pci.0\npiix3-ide\n  aid = __4\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[.*QIDEBus.*\]\n  params:\n    driver = piix3-ide\n    addr = 01.1\n    bus = pci.0\nfdc\n  aid = __5\n  aobject = None\n  parent_bus = \(\)\n  child_bus = \[.*QFloppyBus.*\]\n  params:
漏洞原因：β1 = .* β2 = QStrictCustomBus.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：45
攻击字符串："Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci\u00000\n  parent_bus = \n  child_bus = [QPCIBus,  "+"QStrictCustomBus"*5000+"\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1009
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci.0\n  parent_bus = ()\n  child_bus = \[.*QPCIBus.*, ▻.*QStrictCustomBus.*◅\]\n  params:\ni440FX\n  aid = __1\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = i440FX\n    addr = 00\n    bus = pci.0\nPIIX4_PM\n  aid = __2\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX4_PM\n    addr = 01.3\n    bus = pci.0\nPIIX3\n  aid = __3\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX3\n    addr = 01\n    bus = pci.0\npiix3-ide\n  aid = __4\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[.*QIDEBus.*\]\n  params:\n    driver = piix3-ide\n    addr = 01.1\n    bus = pci.0\nfdc\n  aid = __5\n  aobject = None\n  parent_bus = \(\)\n  child_bus = \[.*QFloppyBus.*\]\n  params:
漏洞原因：β1 = .* β2 = QStrictCustomBus.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：46
攻击字符串："Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci10\n  parent_bus = \n  child_bus = [QPCIBus, "+"QStrictCustomBus"*5000+"\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1006
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci.0\n  parent_bus = ()\n  child_bus = \[.*QPCIBus.*, ▻.*QStrictCustomBus.*◅\]\n  params:\ni440FX\n  aid = __1\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = i440FX\n    addr = 00\n    bus = pci.0\nPIIX4_PM\n  aid = __2\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX4_PM\n    addr = 01.3\n    bus = pci.0\nPIIX3\n  aid = __3\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX3\n    addr = 01\n    bus = pci.0\npiix3-ide\n  aid = __4\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[.*QIDEBus.*\]\n  params:\n    driver = piix3-ide\n    addr = 01.1\n    bus = pci.0\nfdc\n  aid = __5\n  aobject = None\n  parent_bus = \(\)\n  child_bus = \[.*QFloppyBus.*\]\n  params:
漏洞原因：β1 = .* β2 = QStrictCustomBus.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：47
攻击字符串："Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci\u00000\n  parent_bus = \n  child_bus = [QPCIBus,  "+"QStrictCustomBus"*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1007
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci.0\n  parent_bus = ()\n  child_bus = \[.*QPCIBus.*, ▻.*QStrictCustomBus.*◅\]\n  params:\ni440FX\n  aid = __1\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = i440FX\n    addr = 00\n    bus = pci.0\nPIIX4_PM\n  aid = __2\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX4_PM\n    addr = 01.3\n    bus = pci.0\nPIIX3\n  aid = __3\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX3\n    addr = 01\n    bus = pci.0\npiix3-ide\n  aid = __4\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[.*QIDEBus.*\]\n  params:\n    driver = piix3-ide\n    addr = 01.1\n    bus = pci.0\nfdc\n  aid = __5\n  aobject = None\n  parent_bus = \(\)\n  child_bus = \[.*QFloppyBus.*\]\n  params:
漏洞原因：β1 = .* β2 = QStrictCustomBus.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：48
攻击字符串："Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci10\n  parent_bus = \n  child_bus = [QPCIBus, "+"QStrictCustomBus"*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1013
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci.0\n  parent_bus = ()\n  child_bus = \[.*QPCIBus.*, ▻.*QStrictCustomBus.*◅\]\n  params:\ni440FX\n  aid = __1\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = i440FX\n    addr = 00\n    bus = pci.0\nPIIX4_PM\n  aid = __2\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX4_PM\n    addr = 01.3\n    bus = pci.0\nPIIX3\n  aid = __3\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX3\n    addr = 01\n    bus = pci.0\npiix3-ide\n  aid = __4\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[.*QIDEBus.*\]\n  params:\n    driver = piix3-ide\n    addr = 01.1\n    bus = pci.0\nfdc\n  aid = __5\n  aobject = None\n  parent_bus = \(\)\n  child_bus = \[.*QFloppyBus.*\]\n  params:
漏洞原因：β1 = .* β2 = QStrictCustomBus.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：49
攻击字符串："Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci10\n  parent_bus = \n  child_bus = [QPCIBus, QStrictCustomBus]\n  params:\ni440FX\n  aid = __1\n  aobject = None\n  parent_bus = {'aobject': 'pci10'},\n  child_bus = []\n  params:\n    driver = i440FX\n    addr = 00\n    bus = pci10\nPIIX4_PM\n  aid = __2\n  aobject = None\n  parent_bus = {'aobject': 'pci10'},\n  child_bus = []\n  params:\n    driver = PIIX4_PM\n    addr = 0113\n    bus = pci10\nPIIX3\n  aid = __3\n  aobject = None\n  parent_bus = {'aobject': 'pci10'},\n  child_bus = []\n  params:\n    driver = PIIX3\n    addr = 01\n    bus = pci10\npiix3-ide\n  aid = __4\n  aobject = None\n  parent_bus = {'aobject': 'pci10'},\n  child_bus = ["+"QIDEBus"*5000+"@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1008
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci.0\n  parent_bus = ()\n  child_bus = \[.*QPCIBus.*, .*QStrictCustomBus.*\]\n  params:\ni440FX\n  aid = __1\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = i440FX\n    addr = 00\n    bus = pci.0\nPIIX4_PM\n  aid = __2\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX4_PM\n    addr = 01.3\n    bus = pci.0\nPIIX3\n  aid = __3\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX3\n    addr = 01\n    bus = pci.0\npiix3-ide\n  aid = __4\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[▻.*QIDEBus.*◅\]\n  params:\n    driver = piix3-ide\n    addr = 01.1\n    bus = pci.0\nfdc\n  aid = __5\n  aobject = None\n  parent_bus = \(\)\n  child_bus = \[.*QFloppyBus.*\]\n  params:
漏洞原因：β1 = .* β2 = QIDEBus.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：50
攻击字符串："Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci\u00000\n  parent_bus = \n  child_bus = [QPCIBus, QStrictCustomBus]\n  params:\ni440FX\n  aid = __1\n  aobject = None\n  parent_bus = {'aobject': 'pci\u00000'},\n  child_bus = []\n  params:\n    driver = i440FX\n    addr = 00\n    bus = pci\u00000\nPIIX4_PM\n  aid = __2\n  aobject = None\n  parent_bus = {'aobject': 'pci\u00000'},\n  child_bus = []\n  params:\n    driver = PIIX4_PM\n    addr = 01\u00003\n    bus = pci\u00000\nPIIX3\n  aid = __3\n  aobject = None\n  parent_bus = {'aobject': 'pci\u00000'},\n  child_bus = []\n  params:\n    driver = PIIX3\n    addr = 01\n    bus = pci\u00000\npiix3-ide\n  aid = __4\n  aobject = None\n  parent_bus = {'aobject': 'pci\u00000'},\n  child_bus = [ "+"QIDEBus"*5000+"@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1005
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci.0\n  parent_bus = ()\n  child_bus = \[.*QPCIBus.*, .*QStrictCustomBus.*\]\n  params:\ni440FX\n  aid = __1\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = i440FX\n    addr = 00\n    bus = pci.0\nPIIX4_PM\n  aid = __2\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX4_PM\n    addr = 01.3\n    bus = pci.0\nPIIX3\n  aid = __3\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX3\n    addr = 01\n    bus = pci.0\npiix3-ide\n  aid = __4\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[▻.*QIDEBus.*◅\]\n  params:\n    driver = piix3-ide\n    addr = 01.1\n    bus = pci.0\nfdc\n  aid = __5\n  aobject = None\n  parent_bus = \(\)\n  child_bus = \[.*QFloppyBus.*\]\n  params:
漏洞原因：β1 = .* β2 = QIDEBus.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：51
攻击字符串："Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci10\n  parent_bus = \n  child_bus = [QPCIBus, QStrictCustomBus]\n  params:\ni440FX\n  aid = __1\n  aobject = None\n  parent_bus = {'aobject': 'pci10'},\n  child_bus = []\n  params:\n    driver = i440FX\n    addr = 00\n    bus = pci10\nPIIX4_PM\n  aid = __2\n  aobject = None\n  parent_bus = {'aobject': 'pci10'},\n  child_bus = []\n  params:\n    driver = PIIX4_PM\n    addr = 0113\n    bus = pci10\nPIIX3\n  aid = __3\n  aobject = None\n  parent_bus = {'aobject': 'pci10'},\n  child_bus = []\n  params:\n    driver = PIIX3\n    addr = 01\n    bus = pci10\npiix3-ide\n  aid = __4\n  aobject = None\n  parent_bus = {'aobject': 'pci10'},\n  child_bus = ["+"QIDEBus"*5000+"\n1\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1005
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci.0\n  parent_bus = ()\n  child_bus = \[.*QPCIBus.*, .*QStrictCustomBus.*\]\n  params:\ni440FX\n  aid = __1\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = i440FX\n    addr = 00\n    bus = pci.0\nPIIX4_PM\n  aid = __2\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX4_PM\n    addr = 01.3\n    bus = pci.0\nPIIX3\n  aid = __3\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX3\n    addr = 01\n    bus = pci.0\npiix3-ide\n  aid = __4\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[▻.*QIDEBus.*◅\]\n  params:\n    driver = piix3-ide\n    addr = 01.1\n    bus = pci.0\nfdc\n  aid = __5\n  aobject = None\n  parent_bus = \(\)\n  child_bus = \[.*QFloppyBus.*\]\n  params:
漏洞原因：β1 = .* β2 = QIDEBus.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：52
攻击字符串："Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci\u00000\n  parent_bus = \n  child_bus = [QPCIBus, QStrictCustomBus]\n  params:\ni440FX\n  aid = __1\n  aobject = None\n  parent_bus = {'aobject': 'pci\u00000'},\n  child_bus = []\n  params:\n    driver = i440FX\n    addr = 00\n    bus = pci\u00000\nPIIX4_PM\n  aid = __2\n  aobject = None\n  parent_bus = {'aobject': 'pci\u00000'},\n  child_bus = []\n  params:\n    driver = PIIX4_PM\n    addr = 01\u00003\n    bus = pci\u00000\nPIIX3\n  aid = __3\n  aobject = None\n  parent_bus = {'aobject': 'pci\u00000'},\n  child_bus = []\n  params:\n    driver = PIIX3\n    addr = 01\n    bus = pci\u00000\npiix3-ide\n  aid = __4\n  aobject = None\n  parent_bus = {'aobject': 'pci\u00000'},\n  child_bus = [ "+"QIDEBus"*5000+"\n1\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1002
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci.0\n  parent_bus = ()\n  child_bus = \[.*QPCIBus.*, .*QStrictCustomBus.*\]\n  params:\ni440FX\n  aid = __1\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = i440FX\n    addr = 00\n    bus = pci.0\nPIIX4_PM\n  aid = __2\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX4_PM\n    addr = 01.3\n    bus = pci.0\nPIIX3\n  aid = __3\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX3\n    addr = 01\n    bus = pci.0\npiix3-ide\n  aid = __4\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[▻.*QIDEBus.*◅\]\n  params:\n    driver = piix3-ide\n    addr = 01.1\n    bus = pci.0\nfdc\n  aid = __5\n  aobject = None\n  parent_bus = \(\)\n  child_bus = \[.*QFloppyBus.*\]\n  params:
漏洞原因：β1 = .* β2 = QIDEBus.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：53
攻击字符串："Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci10\n  parent_bus = \n  child_bus = [QPCIBus, QStrictCustomBus]\n  params:\ni440FX\n  aid = __1\n  aobject = None\n  parent_bus = {'aobject': 'pci10'},\n  child_bus = []\n  params:\n    driver = i440FX\n    addr = 00\n    bus = pci10\nPIIX4_PM\n  aid = __2\n  aobject = None\n  parent_bus = {'aobject': 'pci10'},\n  child_bus = []\n  params:\n    driver = PIIX4_PM\n    addr = 0113\n    bus = pci10\nPIIX3\n  aid = __3\n  aobject = None\n  parent_bus = {'aobject': 'pci10'},\n  child_bus = []\n  params:\n    driver = PIIX3\n    addr = 01\n    bus = pci10\npiix3-ide\n  aid = __4\n  aobject = None\n  parent_bus = {'aobject': 'pci10'},\n  child_bus = ["+"QIDEBus"*5000+"\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1005
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci.0\n  parent_bus = ()\n  child_bus = \[.*QPCIBus.*, .*QStrictCustomBus.*\]\n  params:\ni440FX\n  aid = __1\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = i440FX\n    addr = 00\n    bus = pci.0\nPIIX4_PM\n  aid = __2\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX4_PM\n    addr = 01.3\n    bus = pci.0\nPIIX3\n  aid = __3\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX3\n    addr = 01\n    bus = pci.0\npiix3-ide\n  aid = __4\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[▻.*QIDEBus.*◅\]\n  params:\n    driver = piix3-ide\n    addr = 01.1\n    bus = pci.0\nfdc\n  aid = __5\n  aobject = None\n  parent_bus = \(\)\n  child_bus = \[.*QFloppyBus.*\]\n  params:
漏洞原因：β1 = .* β2 = QIDEBus.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：54
攻击字符串："Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci\u00000\n  parent_bus = \n  child_bus = [QPCIBus, QStrictCustomBus]\n  params:\ni440FX\n  aid = __1\n  aobject = None\n  parent_bus = {'aobject': 'pci\u00000'},\n  child_bus = []\n  params:\n    driver = i440FX\n    addr = 00\n    bus = pci\u00000\nPIIX4_PM\n  aid = __2\n  aobject = None\n  parent_bus = {'aobject': 'pci\u00000'},\n  child_bus = []\n  params:\n    driver = PIIX4_PM\n    addr = 01\u00003\n    bus = pci\u00000\nPIIX3\n  aid = __3\n  aobject = None\n  parent_bus = {'aobject': 'pci\u00000'},\n  child_bus = []\n  params:\n    driver = PIIX3\n    addr = 01\n    bus = pci\u00000\npiix3-ide\n  aid = __4\n  aobject = None\n  parent_bus = {'aobject': 'pci\u00000'},\n  child_bus = [ "+"QIDEBus"*5000+"\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1013
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci.0\n  parent_bus = ()\n  child_bus = \[.*QPCIBus.*, .*QStrictCustomBus.*\]\n  params:\ni440FX\n  aid = __1\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = i440FX\n    addr = 00\n    bus = pci.0\nPIIX4_PM\n  aid = __2\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX4_PM\n    addr = 01.3\n    bus = pci.0\nPIIX3\n  aid = __3\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX3\n    addr = 01\n    bus = pci.0\npiix3-ide\n  aid = __4\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[▻.*QIDEBus.*◅\]\n  params:\n    driver = piix3-ide\n    addr = 01.1\n    bus = pci.0\nfdc\n  aid = __5\n  aobject = None\n  parent_bus = \(\)\n  child_bus = \[.*QFloppyBus.*\]\n  params:
漏洞原因：β1 = .* β2 = QIDEBus.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：55
攻击字符串："Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci10\n  parent_bus = \n  child_bus = [QPCIBus, QStrictCustomBus]\n  params:\ni440FX\n  aid = __1\n  aobject = None\n  parent_bus = {'aobject': 'pci10'},\n  child_bus = []\n  params:\n    driver = i440FX\n    addr = 00\n    bus = pci10\nPIIX4_PM\n  aid = __2\n  aobject = None\n  parent_bus = {'aobject': 'pci10'},\n  child_bus = []\n  params:\n    driver = PIIX4_PM\n    addr = 0113\n    bus = pci10\nPIIX3\n  aid = __3\n  aobject = None\n  parent_bus = {'aobject': 'pci10'},\n  child_bus = []\n  params:\n    driver = PIIX3\n    addr = 01\n    bus = pci10\npiix3-ide\n  aid = __4\n  aobject = None\n  parent_bus = {'aobject': 'pci10'},\n  child_bus = ["+"QIDEBus"*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1016
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci.0\n  parent_bus = ()\n  child_bus = \[.*QPCIBus.*, .*QStrictCustomBus.*\]\n  params:\ni440FX\n  aid = __1\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = i440FX\n    addr = 00\n    bus = pci.0\nPIIX4_PM\n  aid = __2\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX4_PM\n    addr = 01.3\n    bus = pci.0\nPIIX3\n  aid = __3\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX3\n    addr = 01\n    bus = pci.0\npiix3-ide\n  aid = __4\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[▻.*QIDEBus.*◅\]\n  params:\n    driver = piix3-ide\n    addr = 01.1\n    bus = pci.0\nfdc\n  aid = __5\n  aobject = None\n  parent_bus = \(\)\n  child_bus = \[.*QFloppyBus.*\]\n  params:
漏洞原因：β1 = .* β2 = QIDEBus.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：56
攻击字符串："Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci\u00000\n  parent_bus = \n  child_bus = [QPCIBus, QStrictCustomBus]\n  params:\ni440FX\n  aid = __1\n  aobject = None\n  parent_bus = {'aobject': 'pci\u00000'},\n  child_bus = []\n  params:\n    driver = i440FX\n    addr = 00\n    bus = pci\u00000\nPIIX4_PM\n  aid = __2\n  aobject = None\n  parent_bus = {'aobject': 'pci\u00000'},\n  child_bus = []\n  params:\n    driver = PIIX4_PM\n    addr = 01\u00003\n    bus = pci\u00000\nPIIX3\n  aid = __3\n  aobject = None\n  parent_bus = {'aobject': 'pci\u00000'},\n  child_bus = []\n  params:\n    driver = PIIX3\n    addr = 01\n    bus = pci\u00000\npiix3-ide\n  aid = __4\n  aobject = None\n  parent_bus = {'aobject': 'pci\u00000'},\n  child_bus = [ "+"QIDEBus"*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1015
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci.0\n  parent_bus = ()\n  child_bus = \[.*QPCIBus.*, .*QStrictCustomBus.*\]\n  params:\ni440FX\n  aid = __1\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = i440FX\n    addr = 00\n    bus = pci.0\nPIIX4_PM\n  aid = __2\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX4_PM\n    addr = 01.3\n    bus = pci.0\nPIIX3\n  aid = __3\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX3\n    addr = 01\n    bus = pci.0\npiix3-ide\n  aid = __4\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[▻.*QIDEBus.*◅\]\n  params:\n    driver = piix3-ide\n    addr = 01.1\n    bus = pci.0\nfdc\n  aid = __5\n  aobject = None\n  parent_bus = \(\)\n  child_bus = \[.*QFloppyBus.*\]\n  params:
漏洞原因：β1 = .* β2 = QIDEBus.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：57
攻击字符串："Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci10\n  parent_bus = \n  child_bus = [QPCIBus, QStrictCustomBus]\n  params:\ni440FX\n  aid = __1\n  aobject = None\n  parent_bus = {'aobject': 'pci10'},\n  child_bus = []\n  params:\n    driver = i440FX\n    addr = 00\n    bus = pci10\nPIIX4_PM\n  aid = __2\n  aobject = None\n  parent_bus = {'aobject': 'pci10'},\n  child_bus = []\n  params:\n    driver = PIIX4_PM\n    addr = 0113\n    bus = pci10\nPIIX3\n  aid = __3\n  aobject = None\n  parent_bus = {'aobject': 'pci10'},\n  child_bus = []\n  params:\n    driver = PIIX3\n    addr = 01\n    bus = pci10\npiix3-ide\n  aid = __4\n  aobject = None\n  parent_bus = {'aobject': 'pci10'},\n  child_bus = [QIDEBus]\n  params:\n    driver = piix3-ide\n    addr = 0111\n    bus = pci10\nfdc\n  aid = __5\n  aobject = None\n  parent_bus = ()\n  child_bus = ["+"QFloppyBus"*5000+"@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1011
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci.0\n  parent_bus = ()\n  child_bus = \[.*QPCIBus.*, .*QStrictCustomBus.*\]\n  params:\ni440FX\n  aid = __1\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = i440FX\n    addr = 00\n    bus = pci.0\nPIIX4_PM\n  aid = __2\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX4_PM\n    addr = 01.3\n    bus = pci.0\nPIIX3\n  aid = __3\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX3\n    addr = 01\n    bus = pci.0\npiix3-ide\n  aid = __4\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[.*QIDEBus.*\]\n  params:\n    driver = piix3-ide\n    addr = 01.1\n    bus = pci.0\nfdc\n  aid = __5\n  aobject = None\n  parent_bus = \(\)\n  child_bus = \[▻.*QFloppyBus.*◅\]\n  params:
漏洞原因：β1 = .* β2 = QFloppyBus.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：58
攻击字符串："Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci\u00000\n  parent_bus = \n  child_bus = [QPCIBus, QStrictCustomBus]\n  params:\ni440FX\n  aid = __1\n  aobject = None\n  parent_bus = {'aobject': 'pci\u00000'},\n  child_bus = []\n  params:\n    driver = i440FX\n    addr = 00\n    bus = pci\u00000\nPIIX4_PM\n  aid = __2\n  aobject = None\n  parent_bus = {'aobject': 'pci\u00000'},\n  child_bus = []\n  params:\n    driver = PIIX4_PM\n    addr = 01\u00003\n    bus = pci\u00000\nPIIX3\n  aid = __3\n  aobject = None\n  parent_bus = {'aobject': 'pci\u00000'},\n  child_bus = []\n  params:\n    driver = PIIX3\n    addr = 01\n    bus = pci\u00000\npiix3-ide\n  aid = __4\n  aobject = None\n  parent_bus = {'aobject': 'pci\u00000'},\n  child_bus = [QIDEBus]\n  params:\n    driver = piix3-ide\n    addr = 01\u00001\n    bus = pci\u00000\nfdc\n  aid = __5\n  aobject = None\n  parent_bus = ()\n  child_bus = [ "+"QFloppyBus"*5000+"@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1011
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci.0\n  parent_bus = ()\n  child_bus = \[.*QPCIBus.*, .*QStrictCustomBus.*\]\n  params:\ni440FX\n  aid = __1\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = i440FX\n    addr = 00\n    bus = pci.0\nPIIX4_PM\n  aid = __2\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX4_PM\n    addr = 01.3\n    bus = pci.0\nPIIX3\n  aid = __3\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX3\n    addr = 01\n    bus = pci.0\npiix3-ide\n  aid = __4\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[.*QIDEBus.*\]\n  params:\n    driver = piix3-ide\n    addr = 01.1\n    bus = pci.0\nfdc\n  aid = __5\n  aobject = None\n  parent_bus = \(\)\n  child_bus = \[▻.*QFloppyBus.*◅\]\n  params:
漏洞原因：β1 = .* β2 = QFloppyBus.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：59
攻击字符串："Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci10\n  parent_bus = \n  child_bus = [QPCIBus, QStrictCustomBus]\n  params:\ni440FX\n  aid = __1\n  aobject = None\n  parent_bus = {'aobject': 'pci10'},\n  child_bus = []\n  params:\n    driver = i440FX\n    addr = 00\n    bus = pci10\nPIIX4_PM\n  aid = __2\n  aobject = None\n  parent_bus = {'aobject': 'pci10'},\n  child_bus = []\n  params:\n    driver = PIIX4_PM\n    addr = 0113\n    bus = pci10\nPIIX3\n  aid = __3\n  aobject = None\n  parent_bus = {'aobject': 'pci10'},\n  child_bus = []\n  params:\n    driver = PIIX3\n    addr = 01\n    bus = pci10\npiix3-ide\n  aid = __4\n  aobject = None\n  parent_bus = {'aobject': 'pci10'},\n  child_bus = [QIDEBus]\n  params:\n    driver = piix3-ide\n    addr = 0111\n    bus = pci10\nfdc\n  aid = __5\n  aobject = None\n  parent_bus = ()\n  child_bus = ["+"QFloppyBus"*5000+""
攻击是否成功：ATTACK_SUCCESS
攻击时间：1008
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci.0\n  parent_bus = ()\n  child_bus = \[.*QPCIBus.*, .*QStrictCustomBus.*\]\n  params:\ni440FX\n  aid = __1\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = i440FX\n    addr = 00\n    bus = pci.0\nPIIX4_PM\n  aid = __2\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX4_PM\n    addr = 01.3\n    bus = pci.0\nPIIX3\n  aid = __3\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX3\n    addr = 01\n    bus = pci.0\npiix3-ide\n  aid = __4\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[.*QIDEBus.*\]\n  params:\n    driver = piix3-ide\n    addr = 01.1\n    bus = pci.0\nfdc\n  aid = __5\n  aobject = None\n  parent_bus = \(\)\n  child_bus = \[▻.*QFloppyBus.*◅\]\n  params:
漏洞原因：β1 = .* β2 = QFloppyBus.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：60
攻击字符串："Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci\u00000\n  parent_bus = \n  child_bus = [QPCIBus, QStrictCustomBus]\n  params:\ni440FX\n  aid = __1\n  aobject = None\n  parent_bus = {'aobject': 'pci\u00000'},\n  child_bus = []\n  params:\n    driver = i440FX\n    addr = 00\n    bus = pci\u00000\nPIIX4_PM\n  aid = __2\n  aobject = None\n  parent_bus = {'aobject': 'pci\u00000'},\n  child_bus = []\n  params:\n    driver = PIIX4_PM\n    addr = 01\u00003\n    bus = pci\u00000\nPIIX3\n  aid = __3\n  aobject = None\n  parent_bus = {'aobject': 'pci\u00000'},\n  child_bus = []\n  params:\n    driver = PIIX3\n    addr = 01\n    bus = pci\u00000\npiix3-ide\n  aid = __4\n  aobject = None\n  parent_bus = {'aobject': 'pci\u00000'},\n  child_bus = [QIDEBus]\n  params:\n    driver = piix3-ide\n    addr = 01\u00001\n    bus = pci\u00000\nfdc\n  aid = __5\n  aobject = None\n  parent_bus = ()\n  child_bus = [ "+"QFloppyBus"*5000+""
攻击是否成功：ATTACK_SUCCESS
攻击时间：1006
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci.0\n  parent_bus = ()\n  child_bus = \[.*QPCIBus.*, .*QStrictCustomBus.*\]\n  params:\ni440FX\n  aid = __1\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = i440FX\n    addr = 00\n    bus = pci.0\nPIIX4_PM\n  aid = __2\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX4_PM\n    addr = 01.3\n    bus = pci.0\nPIIX3\n  aid = __3\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX3\n    addr = 01\n    bus = pci.0\npiix3-ide\n  aid = __4\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[.*QIDEBus.*\]\n  params:\n    driver = piix3-ide\n    addr = 01.1\n    bus = pci.0\nfdc\n  aid = __5\n  aobject = None\n  parent_bus = \(\)\n  child_bus = \[▻.*QFloppyBus.*◅\]\n  params:
漏洞原因：β1 = .* β2 = QFloppyBus.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：61
攻击字符串："Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci10\n  parent_bus = \n  child_bus = [QPCIBus, QStrictCustomBus]\n  params:\ni440FX\n  aid = __1\n  aobject = None\n  parent_bus = {'aobject': 'pci10'},\n  child_bus = []\n  params:\n    driver = i440FX\n    addr = 00\n    bus = pci10\nPIIX4_PM\n  aid = __2\n  aobject = None\n  parent_bus = {'aobject': 'pci10'},\n  child_bus = []\n  params:\n    driver = PIIX4_PM\n    addr = 0113\n    bus = pci10\nPIIX3\n  aid = __3\n  aobject = None\n  parent_bus = {'aobject': 'pci10'},\n  child_bus = []\n  params:\n    driver = PIIX3\n    addr = 01\n    bus = pci10\npiix3-ide\n  aid = __4\n  aobject = None\n  parent_bus = {'aobject': 'pci10'},\n  child_bus = [QIDEBus]\n  params:\n    driver = piix3-ide\n    addr = 0111\n    bus = pci10\nfdc\n  aid = __5\n  aobject = None\n  parent_bus = ()\n  child_bus = ["+"QFloppyBus"*5000+"\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1008
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci.0\n  parent_bus = ()\n  child_bus = \[.*QPCIBus.*, .*QStrictCustomBus.*\]\n  params:\ni440FX\n  aid = __1\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = i440FX\n    addr = 00\n    bus = pci.0\nPIIX4_PM\n  aid = __2\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX4_PM\n    addr = 01.3\n    bus = pci.0\nPIIX3\n  aid = __3\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX3\n    addr = 01\n    bus = pci.0\npiix3-ide\n  aid = __4\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[.*QIDEBus.*\]\n  params:\n    driver = piix3-ide\n    addr = 01.1\n    bus = pci.0\nfdc\n  aid = __5\n  aobject = None\n  parent_bus = \(\)\n  child_bus = \[▻.*QFloppyBus.*◅\]\n  params:
漏洞原因：β1 = .* β2 = QFloppyBus.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：62
攻击字符串："Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci\u00000\n  parent_bus = \n  child_bus = [QPCIBus, QStrictCustomBus]\n  params:\ni440FX\n  aid = __1\n  aobject = None\n  parent_bus = {'aobject': 'pci\u00000'},\n  child_bus = []\n  params:\n    driver = i440FX\n    addr = 00\n    bus = pci\u00000\nPIIX4_PM\n  aid = __2\n  aobject = None\n  parent_bus = {'aobject': 'pci\u00000'},\n  child_bus = []\n  params:\n    driver = PIIX4_PM\n    addr = 01\u00003\n    bus = pci\u00000\nPIIX3\n  aid = __3\n  aobject = None\n  parent_bus = {'aobject': 'pci\u00000'},\n  child_bus = []\n  params:\n    driver = PIIX3\n    addr = 01\n    bus = pci\u00000\npiix3-ide\n  aid = __4\n  aobject = None\n  parent_bus = {'aobject': 'pci\u00000'},\n  child_bus = [QIDEBus]\n  params:\n    driver = piix3-ide\n    addr = 01\u00001\n    bus = pci\u00000\nfdc\n  aid = __5\n  aobject = None\n  parent_bus = ()\n  child_bus = [ "+"QFloppyBus"*5000+"\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1008
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci.0\n  parent_bus = ()\n  child_bus = \[.*QPCIBus.*, .*QStrictCustomBus.*\]\n  params:\ni440FX\n  aid = __1\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = i440FX\n    addr = 00\n    bus = pci.0\nPIIX4_PM\n  aid = __2\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX4_PM\n    addr = 01.3\n    bus = pci.0\nPIIX3\n  aid = __3\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX3\n    addr = 01\n    bus = pci.0\npiix3-ide\n  aid = __4\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[.*QIDEBus.*\]\n  params:\n    driver = piix3-ide\n    addr = 01.1\n    bus = pci.0\nfdc\n  aid = __5\n  aobject = None\n  parent_bus = \(\)\n  child_bus = \[▻.*QFloppyBus.*◅\]\n  params:
漏洞原因：β1 = .* β2 = QFloppyBus.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：63
攻击字符串："Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci10\n  parent_bus = \n  child_bus = [QPCIBus, QStrictCustomBus]\n  params:\ni440FX\n  aid = __1\n  aobject = None\n  parent_bus = {'aobject': 'pci10'},\n  child_bus = []\n  params:\n    driver = i440FX\n    addr = 00\n    bus = pci10\nPIIX4_PM\n  aid = __2\n  aobject = None\n  parent_bus = {'aobject': 'pci10'},\n  child_bus = []\n  params:\n    driver = PIIX4_PM\n    addr = 0113\n    bus = pci10\nPIIX3\n  aid = __3\n  aobject = None\n  parent_bus = {'aobject': 'pci10'},\n  child_bus = []\n  params:\n    driver = PIIX3\n    addr = 01\n    bus = pci10\npiix3-ide\n  aid = __4\n  aobject = None\n  parent_bus = {'aobject': 'pci10'},\n  child_bus = [QIDEBus]\n  params:\n    driver = piix3-ide\n    addr = 0111\n    bus = pci10\nfdc\n  aid = __5\n  aobject = None\n  parent_bus = ()\n  child_bus = ["+"QFloppyBus"*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1014
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci.0\n  parent_bus = ()\n  child_bus = \[.*QPCIBus.*, .*QStrictCustomBus.*\]\n  params:\ni440FX\n  aid = __1\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = i440FX\n    addr = 00\n    bus = pci.0\nPIIX4_PM\n  aid = __2\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX4_PM\n    addr = 01.3\n    bus = pci.0\nPIIX3\n  aid = __3\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX3\n    addr = 01\n    bus = pci.0\npiix3-ide\n  aid = __4\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[.*QIDEBus.*\]\n  params:\n    driver = piix3-ide\n    addr = 01.1\n    bus = pci.0\nfdc\n  aid = __5\n  aobject = None\n  parent_bus = \(\)\n  child_bus = \[▻.*QFloppyBus.*◅\]\n  params:
漏洞原因：β1 = .* β2 = QFloppyBus.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：64
攻击字符串："Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci\u00000\n  parent_bus = \n  child_bus = [QPCIBus, QStrictCustomBus]\n  params:\ni440FX\n  aid = __1\n  aobject = None\n  parent_bus = {'aobject': 'pci\u00000'},\n  child_bus = []\n  params:\n    driver = i440FX\n    addr = 00\n    bus = pci\u00000\nPIIX4_PM\n  aid = __2\n  aobject = None\n  parent_bus = {'aobject': 'pci\u00000'},\n  child_bus = []\n  params:\n    driver = PIIX4_PM\n    addr = 01\u00003\n    bus = pci\u00000\nPIIX3\n  aid = __3\n  aobject = None\n  parent_bus = {'aobject': 'pci\u00000'},\n  child_bus = []\n  params:\n    driver = PIIX3\n    addr = 01\n    bus = pci\u00000\npiix3-ide\n  aid = __4\n  aobject = None\n  parent_bus = {'aobject': 'pci\u00000'},\n  child_bus = [QIDEBus]\n  params:\n    driver = piix3-ide\n    addr = 01\u00001\n    bus = pci\u00000\nfdc\n  aid = __5\n  aobject = None\n  parent_bus = ()\n  child_bus = [ "+"QFloppyBus"*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1012
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：Devices of vm1:\nmachine\n  aid = __0\n  aobject = pci.0\n  parent_bus = ()\n  child_bus = \[.*QPCIBus.*, .*QStrictCustomBus.*\]\n  params:\ni440FX\n  aid = __1\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = i440FX\n    addr = 00\n    bus = pci.0\nPIIX4_PM\n  aid = __2\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX4_PM\n    addr = 01.3\n    bus = pci.0\nPIIX3\n  aid = __3\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[\]\n  params:\n    driver = PIIX3\n    addr = 01\n    bus = pci.0\npiix3-ide\n  aid = __4\n  aobject = None\n  parent_bus = ({'aobject': 'pci.0'},)\n  child_bus = \[.*QIDEBus.*\]\n  params:\n    driver = piix3-ide\n    addr = 01.1\n    bus = pci.0\nfdc\n  aid = __5\n  aobject = None\n  parent_bus = \(\)\n  child_bus = \[▻.*QFloppyBus.*◅\]\n  params:
漏洞原因：β1 = .* β2 = QFloppyBus.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:109
正则表达式:File '([^\n]*)'.*?:creating '([^\n]*)'
是否是ReDos漏洞：RESULT-TRUE
攻击字符串如下:
------------------------
编号：1
攻击字符串："File ' "+"'"*10000+"@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1005
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：File '(▻[^\n]*◅)▻'.*?◅:creating '([^\n]*)'
漏洞原因：β1 = [^\n]* β2 = '.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：2
攻击字符串："File '"+"'"*10000+"@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1005
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：File '(▻[^\n]*◅)▻'.*?◅:creating '([^\n]*)'
漏洞原因：β1 = [^\n]* β2 = '.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：3
攻击字符串："File ' "+"'"*10000+"\nA\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1013
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：File '(▻[^\n]*◅)▻'.*?◅:creating '([^\n]*)'
漏洞原因：β1 = [^\n]* β2 = '.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：4
攻击字符串："File '"+"'"*10000+"\nA\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1010
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：File '(▻[^\n]*◅)▻'.*?◅:creating '([^\n]*)'
漏洞原因：β1 = [^\n]* β2 = '.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：5
攻击字符串："File ' "+"'"*10000+"\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1005
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：File '(▻[^\n]*◅)▻'.*?◅:creating '([^\n]*)'
漏洞原因：β1 = [^\n]* β2 = '.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：6
攻击字符串："File '"+"'"*10000+"\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1008
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：File '(▻[^\n]*◅)▻'.*?◅:creating '([^\n]*)'
漏洞原因：β1 = [^\n]* β2 = '.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：7
攻击字符串："File ' "+"'"*10000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1014
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：File '(▻[^\n]*◅)▻'.*?◅:creating '([^\n]*)'
漏洞原因：β1 = [^\n]* β2 = '.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：8
攻击字符串："File '"+"'"*10000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1016
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：File '(▻[^\n]*◅)▻'.*?◅:creating '([^\n]*)'
漏洞原因：β1 = [^\n]* β2 = '.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：9
攻击字符串："File ' "+"':creating '"*5000+"@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1003
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：File '(▻[^\n]*◅)▻'.*?:creating '◅(▻[^\n]*◅)'
漏洞原因：β1 = [^\n]* β2 = '.*:creating '[^\n]* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：10
攻击字符串："File '"+"':creating '"*5000+"@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1007
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：File '(▻[^\n]*◅)▻'.*?:creating '◅(▻[^\n]*◅)'
漏洞原因：β1 = [^\n]* β2 = '.*:creating '[^\n]* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：11
攻击字符串："File ' "+"':creating '"*5000+"\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1010
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：File '(▻[^\n]*◅)▻'.*?:creating '◅(▻[^\n]*◅)'
漏洞原因：β1 = [^\n]* β2 = '.*:creating '[^\n]* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：12
攻击字符串："File '"+"':creating '"*5000+"\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1008
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：File '(▻[^\n]*◅)▻'.*?:creating '◅(▻[^\n]*◅)'
漏洞原因：β1 = [^\n]* β2 = '.*:creating '[^\n]* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：13
攻击字符串："File ''"+":creating '"*5000+"@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1014
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：File '([^\n]*)'▻.*?:creating '◅(▻[^\n]*◅)'
漏洞原因：β1 = .* β2 = :creating '[^\n]* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：14
攻击字符串："File '' "+":creating '"*5000+"@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1011
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：File '([^\n]*)'▻.*?:creating '◅(▻[^\n]*◅)'
漏洞原因：β1 = .* β2 = :creating '[^\n]* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：15
攻击字符串："File ''"+":creating '"*5000+"\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1013
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：File '([^\n]*)'▻.*?:creating '◅(▻[^\n]*◅)'
漏洞原因：β1 = .* β2 = :creating '[^\n]* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：16
攻击字符串："File '' "+":creating '"*5000+"\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1008
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：File '([^\n]*)'▻.*?:creating '◅(▻[^\n]*◅)'
漏洞原因：β1 = .* β2 = :creating '[^\n]* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：17
攻击字符串：""+"File '"*5000+"\u0000"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1007
时间复杂度：POLYNOMIAL
漏洞模式：SLQ2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：18
攻击字符串：""+"File ''"*5000+"\u0000"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1008
时间复杂度：POLYNOMIAL
漏洞模式：SLQ2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：19
攻击字符串：""+"File '"*5000+"\n@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1006
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：20
攻击字符串：""+"File 'A'"*5000+"\n@@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1008
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:110
正则表达式:I couldn't open style file
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:111
正则表达式:INFO: T.* (has been created by T.* at this point|is program's main thread)
是否是ReDos漏洞：RESULT-TRUE
攻击字符串如下:
------------------------
编号：1
攻击字符串："INFO: T"+" has been created by T"*5000+"@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1011
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：INFO: T▻.* ◅(▻has been created by T.*◅ at this point|is program's main thread)
漏洞原因：β1 = .* β2 =  has been created by T.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：2
攻击字符串："INFO: T "+" has been created by T"*5000+"@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1011
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：INFO: T▻.* ◅(▻has been created by T.*◅ at this point|is program's main thread)
漏洞原因：β1 = .* β2 =  has been created by T.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：3
攻击字符串："INFO: T"+" has been created by T"*5000+""
攻击是否成功：ATTACK_SUCCESS
攻击时间：1007
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：INFO: T▻.* ◅(▻has been created by T.*◅ at this point|is program's main thread)
漏洞原因：β1 = .* β2 =  has been created by T.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：4
攻击字符串："INFO: T "+" has been created by T"*5000+""
攻击是否成功：ATTACK_SUCCESS
攻击时间：1015
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：INFO: T▻.* ◅(▻has been created by T.*◅ at this point|is program's main thread)
漏洞原因：β1 = .* β2 =  has been created by T.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：5
攻击字符串："INFO: T"+" has been created by T"*5000+"\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1013
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：INFO: T▻.* ◅(▻has been created by T.*◅ at this point|is program's main thread)
漏洞原因：β1 = .* β2 =  has been created by T.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：6
攻击字符串："INFO: T "+" has been created by T"*5000+"\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1006
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：INFO: T▻.* ◅(▻has been created by T.*◅ at this point|is program's main thread)
漏洞原因：β1 = .* β2 =  has been created by T.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：7
攻击字符串："INFO: T"+" has been created by T"*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1006
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：INFO: T▻.* ◅(▻has been created by T.*◅ at this point|is program's main thread)
漏洞原因：β1 = .* β2 =  has been created by T.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：8
攻击字符串："INFO: T "+" has been created by T"*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1010
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：INFO: T▻.* ◅(▻has been created by T.*◅ at this point|is program's main thread)
漏洞原因：β1 = .* β2 =  has been created by T.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：9
攻击字符串：""+"INFO: T"*5000+" "
攻击是否成功：ATTACK_SUCCESS
攻击时间：1010
时间复杂度：POLYNOMIAL
漏洞模式：SLQ2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：10
攻击字符串：""+"INFO: T has been created by T"*5000+" "
攻击是否成功：ATTACK_SUCCESS
攻击时间：1005
时间复杂度：POLYNOMIAL
漏洞模式：SLQ2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：11
攻击字符串：""+"INFO: T"*5000+"\n@@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1003
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：12
攻击字符串：""+"INFO: T has been created by T"*5000+"@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1003
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：13
攻击字符串：""+"INFO: T has been created by T"*5000+"@\n@@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1005
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:112
正则表达式:LOCALROOT.'([^']*?)'
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:113
正则表达式:PREFIX\('.*?'\)(.*?)\(.*
是否是ReDos漏洞：RESULT-TRUE
攻击字符串如下:
------------------------
编号：1
攻击字符串："PREFIX('"+"')"*5000+"@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1002
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：PREFIX\('▻.*?'\)◅(▻.*?◅)\(.*
漏洞原因：β1 = .* β2 = '\).* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：2
攻击字符串："PREFIX(' "+"')"*5000+"@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1007
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：PREFIX\('▻.*?'\)◅(▻.*?◅)\(.*
漏洞原因：β1 = .* β2 = '\).* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：3
攻击字符串："PREFIX('"+"')"*5000+"\n1\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1009
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：PREFIX\('▻.*?'\)◅(▻.*?◅)\(.*
漏洞原因：β1 = .* β2 = '\).* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：4
攻击字符串："PREFIX(' "+"')"*5000+"\n1\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1004
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：PREFIX\('▻.*?'\)◅(▻.*?◅)\(.*
漏洞原因：β1 = .* β2 = '\).* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：5
攻击字符串："PREFIX('"+"')"*5000+"\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1003
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：PREFIX\('▻.*?'\)◅(▻.*?◅)\(.*
漏洞原因：β1 = .* β2 = '\).* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：6
攻击字符串："PREFIX(' "+"')"*5000+"\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1016
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：PREFIX\('▻.*?'\)◅(▻.*?◅)\(.*
漏洞原因：β1 = .* β2 = '\).* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：7
攻击字符串："PREFIX('"+"')"*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1001
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：PREFIX\('▻.*?'\)◅(▻.*?◅)\(.*
漏洞原因：β1 = .* β2 = '\).* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：8
攻击字符串："PREFIX(' "+"')"*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1003
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：PREFIX\('▻.*?'\)◅(▻.*?◅)\(.*
漏洞原因：β1 = .* β2 = '\).* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：9
攻击字符串："PREFIX('"+"')("*5000+"\n1\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1002
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：PREFIX\('▻.*?'\)(.*?)\(.*◅
漏洞原因：β1 = .* β2 = '\)(.*)\(.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：10
攻击字符串："PREFIX(' "+"')("*5000+"\n1\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1013
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：PREFIX\('▻.*?'\)(.*?)\(.*◅
漏洞原因：β1 = .* β2 = '\)(.*)\(.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：11
攻击字符串："PREFIX('"+"')("*5000+"\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1008
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：PREFIX\('▻.*?'\)(.*?)\(.*◅
漏洞原因：β1 = .* β2 = '\)(.*)\(.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：12
攻击字符串："PREFIX(' "+"')("*5000+"\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1014
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：PREFIX\('▻.*?'\)(.*?)\(.*◅
漏洞原因：β1 = .* β2 = '\)(.*)\(.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：13
攻击字符串："PREFIX('"+"')("*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1010
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：PREFIX\('▻.*?'\)(.*?)\(.*◅
漏洞原因：β1 = .* β2 = '\)(.*)\(.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：14
攻击字符串："PREFIX(' "+"')("*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1016
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：PREFIX\('▻.*?'\)(.*?)\(.*◅
漏洞原因：β1 = .* β2 = '\)(.*)\(.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：15
攻击字符串："PREFIX('')"+"("*20000+"\n1\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1003
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：PREFIX\('.*?'\)(▻.*?◅)▻\(.*◅
漏洞原因：β1 = .* β2 = \(.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：16
攻击字符串："PREFIX('') "+"("*20000+"\n1\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1004
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：PREFIX\('.*?'\)(▻.*?◅)▻\(.*◅
漏洞原因：β1 = .* β2 = \(.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：17
攻击字符串："PREFIX('')"+"("*20000+"\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1006
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：PREFIX\('.*?'\)(▻.*?◅)▻\(.*◅
漏洞原因：β1 = .* β2 = \(.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：18
攻击字符串："PREFIX('') "+"("*20000+"\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1007
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：PREFIX\('.*?'\)(▻.*?◅)▻\(.*◅
漏洞原因：β1 = .* β2 = \(.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：19
攻击字符串："PREFIX('')"+"("*20000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1002
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：PREFIX\('.*?'\)(▻.*?◅)▻\(.*◅
漏洞原因：β1 = .* β2 = \(.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：20
攻击字符串："PREFIX('') "+"("*20000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1014
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：PREFIX\('.*?'\)(▻.*?◅)▻\(.*◅
漏洞原因：β1 = .* β2 = \(.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：21
攻击字符串：""+"PREFIX('"*5000+"\u0000"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1008
时间复杂度：POLYNOMIAL
漏洞模式：SLQ2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：22
攻击字符串：""+"PREFIX('"*5000+"\n@@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1016
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:114
正则表达式:ProtEOnlineLoad\((.*), 'false'\);
是否是ReDos漏洞：RESULT-TRUE
攻击字符串如下:
------------------------
编号：1
攻击字符串：""+"ProtEOnlineLoad("*5000+"\u0000"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1012
时间复杂度：POLYNOMIAL
漏洞模式：SLQ2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：2
攻击字符串：""+"ProtEOnlineLoad("*5000+"\n@◎"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1002
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:115
正则表达式:Success: created profile .* at '([^']+)'
是否是ReDos漏洞：RESULT-TRUE
攻击字符串如下:
------------------------
编号：1
攻击字符串：""+"Success: created profile "*5000+" "
攻击是否成功：ATTACK_SUCCESS
攻击时间：1007
时间复杂度：POLYNOMIAL
漏洞模式：SLQ2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：2
攻击字符串：""+"Success: created profile "*5000+"\n@@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1006
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:116
正则表达式:This module \'\w+\' is auto-generated with f2py
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:117
正则表达式:USINGXAMPP.'([^']*?)'
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:118
正则表达式:Unused options for buildout: 'eggs' 'scripts'\.
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:119
正则表达式:VERSION = '([^']*)'
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:120
正则表达式:VERSION = '([^']+)'
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:121
正则表达式:VERSION.*'(.+)'
是否是ReDos漏洞：RESULT-TRUE
攻击字符串如下:
------------------------
编号：1
攻击字符串："VERSION"+"'\u0000"*10000+"@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1010
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：VERSION▻.*'◅(▻.+◅)'
漏洞原因：β1 = .* β2 = '.+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：2
攻击字符串："VERSION "+"'\u0000"*10000+"@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1016
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：VERSION▻.*'◅(▻.+◅)'
漏洞原因：β1 = .* β2 = '.+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：3
攻击字符串："VERSION"+"'\u0000"*10000+""
攻击是否成功：ATTACK_SUCCESS
攻击时间：1006
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：VERSION▻.*'◅(▻.+◅)'
漏洞原因：β1 = .* β2 = '.+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：4
攻击字符串："VERSION "+"'\u0000"*10000+""
攻击是否成功：ATTACK_SUCCESS
攻击时间：1015
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：VERSION▻.*'◅(▻.+◅)'
漏洞原因：β1 = .* β2 = '.+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：5
攻击字符串："VERSION"+"'\u0000"*10000+"\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1010
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：VERSION▻.*'◅(▻.+◅)'
漏洞原因：β1 = .* β2 = '.+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：6
攻击字符串："VERSION "+"'\u0000"*10000+"\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1013
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：VERSION▻.*'◅(▻.+◅)'
漏洞原因：β1 = .* β2 = '.+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：7
攻击字符串："VERSION"+"'\u0000"*10000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1012
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：VERSION▻.*'◅(▻.+◅)'
漏洞原因：β1 = .* β2 = '.+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：8
攻击字符串："VERSION "+"'\u0000"*10000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1003
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：VERSION▻.*'◅(▻.+◅)'
漏洞原因：β1 = .* β2 = '.+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：9
攻击字符串：""+"VERSION"*5000+"\u0000"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1008
时间复杂度：POLYNOMIAL
漏洞模式：SLQ2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：10
攻击字符串：""+"VERSION"*5000+"\n@@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1008
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:122
正则表达式:Warning--I didn't find a database entry
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:123
正则表达式:XAMPPPATH.'([^']*?)'
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:124
正则表达式:[$^#\\']
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:125
正则表达式:[- \n\t\ra-zA-Z0-9'()+,.\/:=?;!*#@$_%]*
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:126
正则表达式:[-A-Za-z0-9!\#$%&'*+/=?^_`{|}~]
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:127
正则表达式:[/!:?\-,\']
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:128
正则表达式:[A-Za-z0-9;\/?:@&=+$,\-_\.!~*'\(\)%#]+$
是否是ReDos漏洞：RESULT-TRUE
攻击字符串如下:
------------------------
编号：1
攻击字符串：""+"A"*5000+"`"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1008
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_1
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:129
正则表达式:[Ee]rr(or)?: (.+?(Syntax error at \'(.+?)\'; expected \'.+\')) at \/.+?:(\d+)?
是否是ReDos漏洞：RESULT-TRUE
攻击字符串如下:
------------------------
编号：1
攻击字符串："Err: "+"\u0000Syntax error at '\u0000"*5000+"A"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1013
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：[Ee]rr(or)?: (?P<error>▻.+?◅(▻Syntax error at \'◅(?P<near>▻.+?◅)\'; expected \'.+\')) at \/.+?:(?P<line>\d+)?
漏洞原因：β1 = .+ β2 = Syntax error at \'.+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：2
攻击字符串："Err: \u0000"+"\u0000Syntax error at '\u0000"*5000+"A"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1011
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：[Ee]rr(or)?: (?P<error>▻.+?◅(▻Syntax error at \'◅(?P<near>▻.+?◅)\'; expected \'.+\')) at \/.+?:(?P<line>\d+)?
漏洞原因：β1 = .+ β2 = Syntax error at \'.+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：3
攻击字符串："Err: "+"\u0000Syntax error at '\u0000"*5000+"!1!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1015
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：[Ee]rr(or)?: (?P<error>▻.+?◅(▻Syntax error at \'◅(?P<near>▻.+?◅)\'; expected \'.+\')) at \/.+?:(?P<line>\d+)?
漏洞原因：β1 = .+ β2 = Syntax error at \'.+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：4
攻击字符串："Err: \u0000"+"\u0000Syntax error at '\u0000"*5000+"!1!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1005
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：[Ee]rr(or)?: (?P<error>▻.+?◅(▻Syntax error at \'◅(?P<near>▻.+?◅)\'; expected \'.+\')) at \/.+?:(?P<line>\d+)?
漏洞原因：β1 = .+ β2 = Syntax error at \'.+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：5
攻击字符串："Err: "+"\u0000Syntax error at '\u0000"*5000+"\n!\n!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1014
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：[Ee]rr(or)?: (?P<error>▻.+?◅(▻Syntax error at \'◅(?P<near>▻.+?◅)\'; expected \'.+\')) at \/.+?:(?P<line>\d+)?
漏洞原因：β1 = .+ β2 = Syntax error at \'.+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：6
攻击字符串："Err: \u0000"+"\u0000Syntax error at '\u0000"*5000+"\n!\n!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1004
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：[Ee]rr(or)?: (?P<error>▻.+?◅(▻Syntax error at \'◅(?P<near>▻.+?◅)\'; expected \'.+\')) at \/.+?:(?P<line>\d+)?
漏洞原因：β1 = .+ β2 = Syntax error at \'.+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：7
攻击字符串："Err: "+"\u0000Syntax error at '\u0000"*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1012
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：[Ee]rr(or)?: (?P<error>▻.+?◅(▻Syntax error at \'◅(?P<near>▻.+?◅)\'; expected \'.+\')) at \/.+?:(?P<line>\d+)?
漏洞原因：β1 = .+ β2 = Syntax error at \'.+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：8
攻击字符串："Err: \u0000"+"\u0000Syntax error at '\u0000"*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1000
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：[Ee]rr(or)?: (?P<error>▻.+?◅(▻Syntax error at \'◅(?P<near>▻.+?◅)\'; expected \'.+\')) at \/.+?:(?P<line>\d+)?
漏洞原因：β1 = .+ β2 = Syntax error at \'.+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：9
攻击字符串："Err: "+"\u0000Syntax error at '\u0000'; expected '\u0000"*5000+"A"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1006
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：[Ee]rr(or)?: (?P<error>▻.+?◅(▻Syntax error at \'(?P<near>.+?)\'; expected \'.+◅\')) at \/.+?:(?P<line>\d+)?
漏洞原因：β1 = .+ β2 = Syntax error at \'(.+)\'; expected \'.+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：10
攻击字符串："Err: \u0000"+"\u0000Syntax error at '\u0000'; expected '\u0000"*5000+"A"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1013
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：[Ee]rr(or)?: (?P<error>▻.+?◅(▻Syntax error at \'(?P<near>.+?)\'; expected \'.+◅\')) at \/.+?:(?P<line>\d+)?
漏洞原因：β1 = .+ β2 = Syntax error at \'(.+)\'; expected \'.+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：11
攻击字符串："Err: "+"\u0000Syntax error at '\u0000'; expected '\u0000"*5000+"!1!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1004
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：[Ee]rr(or)?: (?P<error>▻.+?◅(▻Syntax error at \'(?P<near>.+?)\'; expected \'.+◅\')) at \/.+?:(?P<line>\d+)?
漏洞原因：β1 = .+ β2 = Syntax error at \'(.+)\'; expected \'.+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：12
攻击字符串："Err: \u0000"+"\u0000Syntax error at '\u0000'; expected '\u0000"*5000+"!1!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1002
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：[Ee]rr(or)?: (?P<error>▻.+?◅(▻Syntax error at \'(?P<near>.+?)\'; expected \'.+◅\')) at \/.+?:(?P<line>\d+)?
漏洞原因：β1 = .+ β2 = Syntax error at \'(.+)\'; expected \'.+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：13
攻击字符串："Err: "+"\u0000Syntax error at '\u0000'; expected '\u0000"*5000+"\n!\n!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1012
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：[Ee]rr(or)?: (?P<error>▻.+?◅(▻Syntax error at \'(?P<near>.+?)\'; expected \'.+◅\')) at \/.+?:(?P<line>\d+)?
漏洞原因：β1 = .+ β2 = Syntax error at \'(.+)\'; expected \'.+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：14
攻击字符串："Err: \u0000"+"\u0000Syntax error at '\u0000'; expected '\u0000"*5000+"\n!\n!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1001
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：[Ee]rr(or)?: (?P<error>▻.+?◅(▻Syntax error at \'(?P<near>.+?)\'; expected \'.+◅\')) at \/.+?:(?P<line>\d+)?
漏洞原因：β1 = .+ β2 = Syntax error at \'(.+)\'; expected \'.+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：15
攻击字符串："Err: "+"\u0000Syntax error at '\u0000'; expected '\u0000"*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1007
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：[Ee]rr(or)?: (?P<error>▻.+?◅(▻Syntax error at \'(?P<near>.+?)\'; expected \'.+◅\')) at \/.+?:(?P<line>\d+)?
漏洞原因：β1 = .+ β2 = Syntax error at \'(.+)\'; expected \'.+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：16
攻击字符串："Err: \u0000"+"\u0000Syntax error at '\u0000'; expected '\u0000"*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1009
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：[Ee]rr(or)?: (?P<error>▻.+?◅(▻Syntax error at \'(?P<near>.+?)\'; expected \'.+◅\')) at \/.+?:(?P<line>\d+)?
漏洞原因：β1 = .+ β2 = Syntax error at \'(.+)\'; expected \'.+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：17
攻击字符串："Err: "+"\u0000Syntax error at '\u0000'; expected '\u0000' at /\u0000"*5000+"A"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1008
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：[Ee]rr(or)?: (?P<error>▻.+?(Syntax error at \'(?P<near>.+?)\'; expected \'.+\')◅)▻ at \/.+?◅:(?P<line>\d+)?
漏洞原因：β1 = .+ β2 = (Syntax error at \'(.+)\'; expected \'.+\') at \/.+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：18
攻击字符串："Err: \u0000"+"\u0000Syntax error at '\u0000'; expected '\u0000' at /\u0000"*5000+"A"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1005
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：[Ee]rr(or)?: (?P<error>▻.+?(Syntax error at \'(?P<near>.+?)\'; expected \'.+\')◅)▻ at \/.+?◅:(?P<line>\d+)?
漏洞原因：β1 = .+ β2 = (Syntax error at \'(.+)\'; expected \'.+\') at \/.+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：19
攻击字符串："Err: "+"\u0000Syntax error at '\u0000'; expected '\u0000' at /\u0000"*5000+"!1!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1016
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：[Ee]rr(or)?: (?P<error>▻.+?(Syntax error at \'(?P<near>.+?)\'; expected \'.+\')◅)▻ at \/.+?◅:(?P<line>\d+)?
漏洞原因：β1 = .+ β2 = (Syntax error at \'(.+)\'; expected \'.+\') at \/.+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：20
攻击字符串："Err: \u0000"+"\u0000Syntax error at '\u0000'; expected '\u0000' at /\u0000"*5000+"!1!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1010
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：[Ee]rr(or)?: (?P<error>▻.+?(Syntax error at \'(?P<near>.+?)\'; expected \'.+\')◅)▻ at \/.+?◅:(?P<line>\d+)?
漏洞原因：β1 = .+ β2 = (Syntax error at \'(.+)\'; expected \'.+\') at \/.+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：21
攻击字符串："Err: "+"\u0000Syntax error at '\u0000'; expected '\u0000' at /\u0000"*5000+"\n!\n!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1006
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：[Ee]rr(or)?: (?P<error>▻.+?(Syntax error at \'(?P<near>.+?)\'; expected \'.+\')◅)▻ at \/.+?◅:(?P<line>\d+)?
漏洞原因：β1 = .+ β2 = (Syntax error at \'(.+)\'; expected \'.+\') at \/.+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：22
攻击字符串："Err: \u0000"+"\u0000Syntax error at '\u0000'; expected '\u0000' at /\u0000"*5000+"\n!\n!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1014
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：[Ee]rr(or)?: (?P<error>▻.+?(Syntax error at \'(?P<near>.+?)\'; expected \'.+\')◅)▻ at \/.+?◅:(?P<line>\d+)?
漏洞原因：β1 = .+ β2 = (Syntax error at \'(.+)\'; expected \'.+\') at \/.+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：23
攻击字符串："Err: "+"\u0000Syntax error at '\u0000'; expected '\u0000' at /\u0000"*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1014
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：[Ee]rr(or)?: (?P<error>▻.+?(Syntax error at \'(?P<near>.+?)\'; expected \'.+\')◅)▻ at \/.+?◅:(?P<line>\d+)?
漏洞原因：β1 = .+ β2 = (Syntax error at \'(.+)\'; expected \'.+\') at \/.+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：24
攻击字符串："Err: \u0000"+"\u0000Syntax error at '\u0000'; expected '\u0000' at /\u0000"*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1008
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：[Ee]rr(or)?: (?P<error>▻.+?(Syntax error at \'(?P<near>.+?)\'; expected \'.+\')◅)▻ at \/.+?◅:(?P<line>\d+)?
漏洞原因：β1 = .+ β2 = (Syntax error at \'(.+)\'; expected \'.+\') at \/.+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：25
攻击字符串："Err: "+"\u0000Syntax error at '\u0000'; expected '\u0000' at /\u0000:0"*5000+" "
攻击是否成功：ATTACK_SUCCESS
攻击时间：1011
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：[Ee]rr(or)?: (?P<error>▻.+?(Syntax error at \'(?P<near>.+?)\'; expected \'.+\')◅)▻ at \/.+?:◅(?P<line>▻\d+◅)?
漏洞原因：β1 = .+ β2 = (Syntax error at \'(.+)\'; expected \'.+\') at \/.+:\d+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：26
攻击字符串："Err: \u0000"+"\u0000Syntax error at '\u0000'; expected '\u0000' at /\u0000:0"*5000+" "
攻击是否成功：ATTACK_SUCCESS
攻击时间：1008
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：[Ee]rr(or)?: (?P<error>▻.+?(Syntax error at \'(?P<near>.+?)\'; expected \'.+\')◅)▻ at \/.+?:◅(?P<line>▻\d+◅)?
漏洞原因：β1 = .+ β2 = (Syntax error at \'(.+)\'; expected \'.+\') at \/.+:\d+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：27
攻击字符串："Err: "+"\u0000Syntax error at '\u0000'; expected '\u0000' at /\u0000:0"*5000+"A"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1002
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：[Ee]rr(or)?: (?P<error>▻.+?(Syntax error at \'(?P<near>.+?)\'; expected \'.+\')◅)▻ at \/.+?:◅(?P<line>▻\d+◅)?
漏洞原因：β1 = .+ β2 = (Syntax error at \'(.+)\'; expected \'.+\') at \/.+:\d+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：28
攻击字符串："Err: \u0000"+"\u0000Syntax error at '\u0000'; expected '\u0000' at /\u0000:0"*5000+"A"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1002
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：[Ee]rr(or)?: (?P<error>▻.+?(Syntax error at \'(?P<near>.+?)\'; expected \'.+\')◅)▻ at \/.+?:◅(?P<line>▻\d+◅)?
漏洞原因：β1 = .+ β2 = (Syntax error at \'(.+)\'; expected \'.+\') at \/.+:\d+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：29
攻击字符串："Err: "+"\u0000Syntax error at '\u0000'; expected '\u0000' at /\u0000:0"*5000+"!1!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1005
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：[Ee]rr(or)?: (?P<error>▻.+?(Syntax error at \'(?P<near>.+?)\'; expected \'.+\')◅)▻ at \/.+?:◅(?P<line>▻\d+◅)?
漏洞原因：β1 = .+ β2 = (Syntax error at \'(.+)\'; expected \'.+\') at \/.+:\d+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：30
攻击字符串："Err: \u0000"+"\u0000Syntax error at '\u0000'; expected '\u0000' at /\u0000:0"*5000+"!1!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1010
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：[Ee]rr(or)?: (?P<error>▻.+?(Syntax error at \'(?P<near>.+?)\'; expected \'.+\')◅)▻ at \/.+?:◅(?P<line>▻\d+◅)?
漏洞原因：β1 = .+ β2 = (Syntax error at \'(.+)\'; expected \'.+\') at \/.+:\d+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：31
攻击字符串："Err: "+"\u0000Syntax error at '\u0000'; expected '\u0000' at /\u0000:0"*5000+"\n!\n!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：901
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：32
攻击字符串："Err: \u0000"+"\u0000Syntax error at '\u0000'; expected '\u0000' at /\u0000:0"*5000+"\n!\n!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1014
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：[Ee]rr(or)?: (?P<error>▻.+?(Syntax error at \'(?P<near>.+?)\'; expected \'.+\')◅)▻ at \/.+?:◅(?P<line>▻\d+◅)?
漏洞原因：β1 = .+ β2 = (Syntax error at \'(.+)\'; expected \'.+\') at \/.+:\d+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：33
攻击字符串："Err: \u0000Syntax error at '\u0000"+"\u0000'; expected '\u0000"*5000+"A"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1007
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：[Ee]rr(or)?: (?P<error>.+?(Syntax error at \'(?P<near>▻.+?◅)▻\'; expected \'.+◅\')) at \/.+?:(?P<line>\d+)?
漏洞原因：β1 = .+ β2 = \'; expected \'.+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：34
攻击字符串："Err: 1Syntax error at '"+"\u0000'; expected '\u0000"*5000+"A"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1004
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：[Ee]rr(or)?: (?P<error>.+?(Syntax error at \'(?P<near>▻.+?◅)▻\'; expected \'.+◅\')) at \/.+?:(?P<line>\d+)?
漏洞原因：β1 = .+ β2 = \'; expected \'.+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：35
攻击字符串："Err: \u0000Syntax error at '\u0000"+"\u0000'; expected '\u0000"*5000+"!1!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1004
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：[Ee]rr(or)?: (?P<error>.+?(Syntax error at \'(?P<near>▻.+?◅)▻\'; expected \'.+◅\')) at \/.+?:(?P<line>\d+)?
漏洞原因：β1 = .+ β2 = \'; expected \'.+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：36
攻击字符串："Err: 1Syntax error at '"+"\u0000'; expected '\u0000"*5000+"!1!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1004
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：[Ee]rr(or)?: (?P<error>.+?(Syntax error at \'(?P<near>▻.+?◅)▻\'; expected \'.+◅\')) at \/.+?:(?P<line>\d+)?
漏洞原因：β1 = .+ β2 = \'; expected \'.+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：37
攻击字符串："Err: \u0000Syntax error at '\u0000"+"\u0000'; expected '\u0000"*5000+"\n!\n!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1006
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：[Ee]rr(or)?: (?P<error>.+?(Syntax error at \'(?P<near>▻.+?◅)▻\'; expected \'.+◅\')) at \/.+?:(?P<line>\d+)?
漏洞原因：β1 = .+ β2 = \'; expected \'.+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：38
攻击字符串："Err: 1Syntax error at '"+"\u0000'; expected '\u0000"*5000+"\n!\n!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1011
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：[Ee]rr(or)?: (?P<error>.+?(Syntax error at \'(?P<near>▻.+?◅)▻\'; expected \'.+◅\')) at \/.+?:(?P<line>\d+)?
漏洞原因：β1 = .+ β2 = \'; expected \'.+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：39
攻击字符串："Err: \u0000Syntax error at '\u0000"+"\u0000'; expected '\u0000"*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1004
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：[Ee]rr(or)?: (?P<error>.+?(Syntax error at \'(?P<near>▻.+?◅)▻\'; expected \'.+◅\')) at \/.+?:(?P<line>\d+)?
漏洞原因：β1 = .+ β2 = \'; expected \'.+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：40
攻击字符串："Err: 1Syntax error at '"+"\u0000'; expected '\u0000"*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1011
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：[Ee]rr(or)?: (?P<error>.+?(Syntax error at \'(?P<near>▻.+?◅)▻\'; expected \'.+◅\')) at \/.+?:(?P<line>\d+)?
漏洞原因：β1 = .+ β2 = \'; expected \'.+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：41
攻击字符串："Err: \u0000Syntax error at '\u0000"+"\u0000'; expected '\u0000' at /\u0000"*5000+"A"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1005
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：[Ee]rr(or)?: (?P<error>.+?(Syntax error at \'(?P<near>▻.+?◅)▻\'; expected \'.+\'◅))▻ at \/.+?◅:(?P<line>\d+)?
漏洞原因：β1 = .+ β2 = \'; expected \'.+\' at \/.+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：42
攻击字符串："Err: 1Syntax error at '"+"\u0000'; expected '\u0000' at /\u0000"*5000+"A"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1015
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：[Ee]rr(or)?: (?P<error>.+?(Syntax error at \'(?P<near>▻.+?◅)▻\'; expected \'.+\'◅))▻ at \/.+?◅:(?P<line>\d+)?
漏洞原因：β1 = .+ β2 = \'; expected \'.+\' at \/.+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：43
攻击字符串："Err: \u0000Syntax error at '\u0000"+"\u0000'; expected '\u0000' at /\u0000"*5000+"!1!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1008
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：[Ee]rr(or)?: (?P<error>.+?(Syntax error at \'(?P<near>▻.+?◅)▻\'; expected \'.+\'◅))▻ at \/.+?◅:(?P<line>\d+)?
漏洞原因：β1 = .+ β2 = \'; expected \'.+\' at \/.+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：44
攻击字符串："Err: 1Syntax error at '"+"\u0000'; expected '\u0000' at /\u0000"*5000+"!1!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1005
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：[Ee]rr(or)?: (?P<error>.+?(Syntax error at \'(?P<near>▻.+?◅)▻\'; expected \'.+\'◅))▻ at \/.+?◅:(?P<line>\d+)?
漏洞原因：β1 = .+ β2 = \'; expected \'.+\' at \/.+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：45
攻击字符串："Err: \u0000Syntax error at '\u0000"+"\u0000'; expected '\u0000' at /\u0000"*5000+"\n!\n!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1015
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：[Ee]rr(or)?: (?P<error>.+?(Syntax error at \'(?P<near>▻.+?◅)▻\'; expected \'.+\'◅))▻ at \/.+?◅:(?P<line>\d+)?
漏洞原因：β1 = .+ β2 = \'; expected \'.+\' at \/.+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：46
攻击字符串："Err: 1Syntax error at '"+"\u0000'; expected '\u0000' at /\u0000"*5000+"\n!\n!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1015
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：[Ee]rr(or)?: (?P<error>.+?(Syntax error at \'(?P<near>▻.+?◅)▻\'; expected \'.+\'◅))▻ at \/.+?◅:(?P<line>\d+)?
漏洞原因：β1 = .+ β2 = \'; expected \'.+\' at \/.+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：47
攻击字符串："Err: \u0000Syntax error at '\u0000"+"\u0000'; expected '\u0000' at /\u0000"*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1017
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：[Ee]rr(or)?: (?P<error>.+?(Syntax error at \'(?P<near>▻.+?◅)▻\'; expected \'.+\'◅))▻ at \/.+?◅:(?P<line>\d+)?
漏洞原因：β1 = .+ β2 = \'; expected \'.+\' at \/.+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：48
攻击字符串："Err: 1Syntax error at '"+"\u0000'; expected '\u0000' at /\u0000"*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1008
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：[Ee]rr(or)?: (?P<error>.+?(Syntax error at \'(?P<near>▻.+?◅)▻\'; expected \'.+\'◅))▻ at \/.+?◅:(?P<line>\d+)?
漏洞原因：β1 = .+ β2 = \'; expected \'.+\' at \/.+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：49
攻击字符串："Err: \u0000Syntax error at '\u0000"+"\u0000'; expected '\u0000' at /\u0000:0"*5000+" "
攻击是否成功：ATTACK_SUCCESS
攻击时间：1011
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：[Ee]rr(or)?: (?P<error>.+?(Syntax error at \'(?P<near>▻.+?◅)▻\'; expected \'.+\'◅))▻ at \/.+?:◅(?P<line>▻\d+◅)?
漏洞原因：β1 = .+ β2 = \'; expected \'.+\' at \/.+:\d+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：50
攻击字符串："Err: 1Syntax error at '"+"\u0000'; expected '\u0000' at /\u0000:0"*5000+" "
攻击是否成功：ATTACK_SUCCESS
攻击时间：1005
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：[Ee]rr(or)?: (?P<error>.+?(Syntax error at \'(?P<near>▻.+?◅)▻\'; expected \'.+\'◅))▻ at \/.+?:◅(?P<line>▻\d+◅)?
漏洞原因：β1 = .+ β2 = \'; expected \'.+\' at \/.+:\d+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：51
攻击字符串："Err: \u0000Syntax error at '\u0000"+"\u0000'; expected '\u0000' at /\u0000:0"*5000+"A"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1007
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：[Ee]rr(or)?: (?P<error>.+?(Syntax error at \'(?P<near>▻.+?◅)▻\'; expected \'.+\'◅))▻ at \/.+?:◅(?P<line>▻\d+◅)?
漏洞原因：β1 = .+ β2 = \'; expected \'.+\' at \/.+:\d+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：52
攻击字符串："Err: 1Syntax error at '"+"\u0000'; expected '\u0000' at /\u0000:0"*5000+"A"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1002
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：[Ee]rr(or)?: (?P<error>.+?(Syntax error at \'(?P<near>▻.+?◅)▻\'; expected \'.+\'◅))▻ at \/.+?:◅(?P<line>▻\d+◅)?
漏洞原因：β1 = .+ β2 = \'; expected \'.+\' at \/.+:\d+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：53
攻击字符串："Err: \u0000Syntax error at '\u0000"+"\u0000'; expected '\u0000' at /\u0000:0"*5000+"!1!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1010
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：[Ee]rr(or)?: (?P<error>.+?(Syntax error at \'(?P<near>▻.+?◅)▻\'; expected \'.+\'◅))▻ at \/.+?:◅(?P<line>▻\d+◅)?
漏洞原因：β1 = .+ β2 = \'; expected \'.+\' at \/.+:\d+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：54
攻击字符串："Err: 1Syntax error at '"+"\u0000'; expected '\u0000' at /\u0000:0"*5000+"!1!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1015
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：[Ee]rr(or)?: (?P<error>.+?(Syntax error at \'(?P<near>▻.+?◅)▻\'; expected \'.+\'◅))▻ at \/.+?:◅(?P<line>▻\d+◅)?
漏洞原因：β1 = .+ β2 = \'; expected \'.+\' at \/.+:\d+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：55
攻击字符串："Err: \u0000Syntax error at '\u0000"+"\u0000'; expected '\u0000' at /\u0000:0"*5000+"\n!\n!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1010
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：[Ee]rr(or)?: (?P<error>.+?(Syntax error at \'(?P<near>▻.+?◅)▻\'; expected \'.+\'◅))▻ at \/.+?:◅(?P<line>▻\d+◅)?
漏洞原因：β1 = .+ β2 = \'; expected \'.+\' at \/.+:\d+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：56
攻击字符串："Err: 1Syntax error at '"+"\u0000'; expected '\u0000' at /\u0000:0"*5000+"\n!\n!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1016
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：[Ee]rr(or)?: (?P<error>.+?(Syntax error at \'(?P<near>▻.+?◅)▻\'; expected \'.+\'◅))▻ at \/.+?:◅(?P<line>▻\d+◅)?
漏洞原因：β1 = .+ β2 = \'; expected \'.+\' at \/.+:\d+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：57
攻击字符串："Err: \u0000Syntax error at '\u0000'; expected '\u0000"+"\u0000' at /\u0000"*5000+"A"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1009
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：[Ee]rr(or)?: (?P<error>.+?(Syntax error at \'(?P<near>.+?)\'; expected \'▻.+\'◅))▻ at \/.+?◅:(?P<line>\d+)?
漏洞原因：β1 = .+ β2 = \' at \/.+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：58
攻击字符串："Err: 1Syntax error at '1'; expected '"+"\u0000' at /\u0000"*5000+"A"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1014
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：[Ee]rr(or)?: (?P<error>.+?(Syntax error at \'(?P<near>.+?)\'; expected \'▻.+\'◅))▻ at \/.+?◅:(?P<line>\d+)?
漏洞原因：β1 = .+ β2 = \' at \/.+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：59
攻击字符串："Err: \u0000Syntax error at '\u0000'; expected '\u0000"+"\u0000' at /\u0000"*5000+"!1!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1006
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：[Ee]rr(or)?: (?P<error>.+?(Syntax error at \'(?P<near>.+?)\'; expected \'▻.+\'◅))▻ at \/.+?◅:(?P<line>\d+)?
漏洞原因：β1 = .+ β2 = \' at \/.+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：60
攻击字符串："Err: 1Syntax error at '1'; expected '"+"\u0000' at /\u0000"*5000+"!1!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1004
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：[Ee]rr(or)?: (?P<error>.+?(Syntax error at \'(?P<near>.+?)\'; expected \'▻.+\'◅))▻ at \/.+?◅:(?P<line>\d+)?
漏洞原因：β1 = .+ β2 = \' at \/.+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：61
攻击字符串："Err: \u0000Syntax error at '\u0000'; expected '\u0000"+"\u0000' at /\u0000"*5000+"\n!\n!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1005
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：[Ee]rr(or)?: (?P<error>.+?(Syntax error at \'(?P<near>.+?)\'; expected \'▻.+\'◅))▻ at \/.+?◅:(?P<line>\d+)?
漏洞原因：β1 = .+ β2 = \' at \/.+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：62
攻击字符串："Err: 1Syntax error at '1'; expected '"+"\u0000' at /\u0000"*5000+"\n!\n!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1007
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：[Ee]rr(or)?: (?P<error>.+?(Syntax error at \'(?P<near>.+?)\'; expected \'▻.+\'◅))▻ at \/.+?◅:(?P<line>\d+)?
漏洞原因：β1 = .+ β2 = \' at \/.+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：63
攻击字符串："Err: \u0000Syntax error at '\u0000'; expected '\u0000"+"\u0000' at /\u0000"*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1004
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：[Ee]rr(or)?: (?P<error>.+?(Syntax error at \'(?P<near>.+?)\'; expected \'▻.+\'◅))▻ at \/.+?◅:(?P<line>\d+)?
漏洞原因：β1 = .+ β2 = \' at \/.+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：64
攻击字符串："Err: 1Syntax error at '1'; expected '"+"\u0000' at /\u0000"*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1010
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：[Ee]rr(or)?: (?P<error>.+?(Syntax error at \'(?P<near>.+?)\'; expected \'▻.+\'◅))▻ at \/.+?◅:(?P<line>\d+)?
漏洞原因：β1 = .+ β2 = \' at \/.+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：65
攻击字符串："Err: \u0000Syntax error at '\u0000'; expected '\u0000"+"\u0000' at /\u0000:0"*5000+" "
攻击是否成功：ATTACK_SUCCESS
攻击时间：1014
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：[Ee]rr(or)?: (?P<error>.+?(Syntax error at \'(?P<near>.+?)\'; expected \'▻.+\'◅))▻ at \/.+?:◅(?P<line>▻\d+◅)?
漏洞原因：β1 = .+ β2 = \' at \/.+:\d+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：66
攻击字符串："Err: 1Syntax error at '1'; expected '"+"\u0000' at /\u0000:0"*5000+" "
攻击是否成功：ATTACK_SUCCESS
攻击时间：1012
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：[Ee]rr(or)?: (?P<error>.+?(Syntax error at \'(?P<near>.+?)\'; expected \'▻.+\'◅))▻ at \/.+?:◅(?P<line>▻\d+◅)?
漏洞原因：β1 = .+ β2 = \' at \/.+:\d+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：67
攻击字符串："Err: \u0000Syntax error at '\u0000'; expected '\u0000"+"\u0000' at /\u0000:0"*5000+"A"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1015
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：[Ee]rr(or)?: (?P<error>.+?(Syntax error at \'(?P<near>.+?)\'; expected \'▻.+\'◅))▻ at \/.+?:◅(?P<line>▻\d+◅)?
漏洞原因：β1 = .+ β2 = \' at \/.+:\d+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：68
攻击字符串："Err: 1Syntax error at '1'; expected '"+"\u0000' at /\u0000:0"*5000+"A"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1008
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：[Ee]rr(or)?: (?P<error>.+?(Syntax error at \'(?P<near>.+?)\'; expected \'▻.+\'◅))▻ at \/.+?:◅(?P<line>▻\d+◅)?
漏洞原因：β1 = .+ β2 = \' at \/.+:\d+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：69
攻击字符串："Err: \u0000Syntax error at '\u0000'; expected '\u0000"+"\u0000' at /\u0000:0"*5000+"!1!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1010
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：[Ee]rr(or)?: (?P<error>.+?(Syntax error at \'(?P<near>.+?)\'; expected \'▻.+\'◅))▻ at \/.+?:◅(?P<line>▻\d+◅)?
漏洞原因：β1 = .+ β2 = \' at \/.+:\d+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：70
攻击字符串："Err: 1Syntax error at '1'; expected '"+"\u0000' at /\u0000:0"*5000+"!1!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1004
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：[Ee]rr(or)?: (?P<error>.+?(Syntax error at \'(?P<near>.+?)\'; expected \'▻.+\'◅))▻ at \/.+?:◅(?P<line>▻\d+◅)?
漏洞原因：β1 = .+ β2 = \' at \/.+:\d+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：71
攻击字符串："Err: \u0000Syntax error at '\u0000'; expected '\u0000"+"\u0000' at /\u0000:0"*5000+"\n!\n!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1001
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：[Ee]rr(or)?: (?P<error>.+?(Syntax error at \'(?P<near>.+?)\'; expected \'▻.+\'◅))▻ at \/.+?:◅(?P<line>▻\d+◅)?
漏洞原因：β1 = .+ β2 = \' at \/.+:\d+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：72
攻击字符串："Err: 1Syntax error at '1'; expected '"+"\u0000' at /\u0000:0"*5000+"\n!\n!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1003
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：[Ee]rr(or)?: (?P<error>.+?(Syntax error at \'(?P<near>.+?)\'; expected \'▻.+\'◅))▻ at \/.+?:◅(?P<line>▻\d+◅)?
漏洞原因：β1 = .+ β2 = \' at \/.+:\d+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：73
攻击字符串：""+"Err: "*5000+"\u0000"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1013
时间复杂度：POLYNOMIAL
漏洞模式：SLQ2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：74
攻击字符串：""+"Err: \u0000Syntax error at '"*5000+"\u0000"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1006
时间复杂度：POLYNOMIAL
漏洞模式：SLQ2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：75
攻击字符串：""+"Err: \u0000Syntax error at '\u0000'; expected '"*5000+"\u0000"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1001
时间复杂度：POLYNOMIAL
漏洞模式：SLQ2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：76
攻击字符串：""+"Err: 1"*5000+"@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1008
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：77
攻击字符串：""+"Err: 1"*5000+"@\n@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1013
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：78
攻击字符串："1Err: "+"Syntax error at '"*5000+"@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1002
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：79
攻击字符串："1Err: "+"Syntax error at '"*5000+"@\n@◎"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1001
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：80
攻击字符串：""+"1Err: Syntax error at '"*5000+"@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1012
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：81
攻击字符串：""+"1Err: Syntax error at '"*5000+"@\n@◎"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1012
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：82
攻击字符串："1Err: "+"Syntax error at '1'; expected '"*5000+"@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1011
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：83
攻击字符串："1Err: "+"Syntax error at '1'; expected '"*5000+"@\n@◎"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1001
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：84
攻击字符串：""+"1Err: Syntax error at '1'; expected '"*5000+"@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1004
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：85
攻击字符串：""+"1Err: Syntax error at '1'; expected '"*5000+"@\n@◎"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1006
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:130
正则表达式:[[\s $({?*\`#~';<>&|]
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:131
正则表达式:[\']([a-zA-Z0-9]+)[\']
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:132
正则表达式:[\s'\\]
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:133
正则表达式:[\w!\#$%&'*+-\/=?^_`{|}~]+
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:134
正则表达式:[\w']+
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:135
正则表达式:[\w\-\'_\/&]+
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:136
正则表达式:[\t\n #$%&'()*;<=>?[{|}~]|^$
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:137
正则表达式:[^ ']*::[^ ']*
是否是ReDos漏洞：RESULT-TRUE
攻击字符串如下:
------------------------
编号：1
攻击字符串：""+"::"*5000+" "
攻击是否成功：ATTACK_SUCCESS
攻击时间：1009
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻[^ ']*::[^ ']*◅
漏洞原因：β1 = [^ ']* β2 = ::[^ ']* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：2
攻击字符串："\r"+"::"*5000+" "
攻击是否成功：ATTACK_SUCCESS
攻击时间：1011
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻[^ ']*::[^ ']*◅
漏洞原因：β1 = [^ ']* β2 = ::[^ ']* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：3
攻击字符串：""+"::"*5000+"'"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1006
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻[^ ']*::[^ ']*◅
漏洞原因：β1 = [^ ']* β2 = ::[^ ']* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：4
攻击字符串："\r"+"::"*5000+"'"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1011
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻[^ ']*::[^ ']*◅
漏洞原因：β1 = [^ ']* β2 = ::[^ ']* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：5
攻击字符串：""+"::"*5000+"'A'"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1010
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻[^ ']*::[^ ']*◅
漏洞原因：β1 = [^ ']* β2 = ::[^ ']* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：6
攻击字符串："\r"+"::"*5000+"'A'"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1015
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻[^ ']*::[^ ']*◅
漏洞原因：β1 = [^ ']* β2 = ::[^ ']* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：7
攻击字符串：""+"\u0000"*10000+"\u0000"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1014
时间复杂度：POLYNOMIAL
漏洞模式：SLQ2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：8
攻击字符串：""+"A"*10000+"@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1010
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_1
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：9
攻击字符串：""+"A"*10000+"'"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1006
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:138
正则表达式:[^'\\]*(?:\\.[^'\\]*)*'
是否是ReDos漏洞：RESULT-TRUE
攻击字符串如下:
------------------------
编号：1
攻击字符串：""+"\u0000"*10000+"\u0000"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1014
时间复杂度：POLYNOMIAL
漏洞模式：SLQ2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：2
攻击字符串：""+"A"*10000+"◎"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1007
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_1
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:139
正则表达式:[^']*
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:140
正则表达式:[^']*'([^']*)'.*
是否是ReDos漏洞：RESULT-TRUE
攻击字符串如下:
------------------------
编号：1
攻击字符串：""+"\u0000"*10000+"\u0000"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1014
时间复杂度：POLYNOMIAL
漏洞模式：SLQ2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：2
攻击字符串：""+"A"*10000+"@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1005
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_1
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：3
攻击字符串：""+"A"*10000+"'"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1008
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:141
正则表达式:[^']*('[^']*'[^']*)*\:(CLOB\('([^']+|'')*'\))
是否是ReDos漏洞：RESULT-TRUE
攻击字符串如下:
------------------------
编号：1
攻击字符串：":CLOB('\u0000"+"\u0000"*32+""
攻击是否成功：ATTACK_SUCCESS
攻击时间：1011
时间复杂度：EXPONENT
漏洞模式：NQ
漏洞位置：[^']*('[^']*'[^']*)*\:(?P<clob>CLOB\('►(▻[^']+◅|'')*◄'\))
漏洞原因：There is a nested quantifier node [^']+ in ([^']+|'')*.
------------------------
------------------------
编号：2
攻击字符串：":CLOB('\u0000"+"\u0000"*32+"'"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1006
时间复杂度：EXPONENT
漏洞模式：NQ
漏洞位置：[^']*('[^']*'[^']*)*\:(?P<clob>CLOB\('►(▻[^']+◅|'')*◄'\))
漏洞原因：There is a nested quantifier node [^']+ in ([^']+|'')*.
------------------------
------------------------
编号：3
攻击字符串：":CLOB('\u0000"+"\u0000"*32+"'◎'◎'◎'◎'◎'◎'"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1009
时间复杂度：EXPONENT
漏洞模式：NQ
漏洞位置：[^']*('[^']*'[^']*)*\:(?P<clob>CLOB\('►(▻[^']+◅|'')*◄'\))
漏洞原因：There is a nested quantifier node [^']+ in ([^']+|'')*.
------------------------
------------------------
编号：4
攻击字符串：":CLOB('\u0000"+"!"*32+""
攻击是否成功：ATTACK_SUCCESS
攻击时间：1012
时间复杂度：EXPONENT
漏洞模式：NQ
漏洞位置：[^']*('[^']*'[^']*)*\:(?P<clob>CLOB\('►(▻[^']+◅|'')*◄'\))
漏洞原因：There is a nested quantifier node [^']+ in ([^']+|'')*.
------------------------
------------------------
编号：5
攻击字符串：":CLOB('\u0000"+"!"*32+"'"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1001
时间复杂度：EXPONENT
漏洞模式：NQ
漏洞位置：[^']*('[^']*'[^']*)*\:(?P<clob>CLOB\('►(▻[^']+◅|'')*◄'\))
漏洞原因：There is a nested quantifier node [^']+ in ([^']+|'')*.
------------------------
------------------------
编号：6
攻击字符串：":CLOB('\u0000"+"!"*32+"'◎'◎'◎'◎'◎'◎'"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1004
时间复杂度：EXPONENT
漏洞模式：NQ
漏洞位置：[^']*('[^']*'[^']*)*\:(?P<clob>CLOB\('►(▻[^']+◅|'')*◄'\))
漏洞原因：There is a nested quantifier node [^']+ in ([^']+|'')*.
------------------------
------------------------
编号：7
攻击字符串："''"+"'\u0000\u0000\u0000\u0000\u0000'"*1024+"'"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1013
时间复杂度：EXPONENT
漏洞模式：EOA_i1
漏洞位置：[^']*►(▻'[^']*'[^']*◅)*◄\:(?P<clob>CLOB\('([^']+|'')*'\))
漏洞原因：β1 = ' β2 = [^']*'[^']* (β1.followLast ∪ β1.last) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：8
攻击字符串：""+"'\u0000\u0000\u0000\u0000\u0000'"*1024+"'"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1014
时间复杂度：EXPONENT
漏洞模式：EOA_i1
漏洞位置：[^']*►(▻'[^']*'[^']*◅)*◄\:(?P<clob>CLOB\('([^']+|'')*'\))
漏洞原因：β1 = ' β2 = [^']*'[^']* (β1.followLast ∪ β1.last) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：9
攻击字符串："''"+"'\u0000\u0000\u0000\u0000\u0000'"*1024+"'◎'◎'◎'◎'◎'◎'"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1005
时间复杂度：EXPONENT
漏洞模式：EOA_i1
漏洞位置：[^']*►(▻'[^']*'[^']*◅)*◄\:(?P<clob>CLOB\('([^']+|'')*'\))
漏洞原因：β1 = ' β2 = [^']*'[^']* (β1.followLast ∪ β1.last) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：10
攻击字符串：""+"'\u0000\u0000\u0000\u0000\u0000'"*1024+"'◎'◎'◎'◎'◎'◎'"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1006
时间复杂度：EXPONENT
漏洞模式：EOA_i1
漏洞位置：[^']*►(▻'[^']*'[^']*◅)*◄\:(?P<clob>CLOB\('([^']+|'')*'\))
漏洞原因：β1 = ' β2 = [^']*'[^']* (β1.followLast ∪ β1.last) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：11
攻击字符串："''"+"'\u0000\u0000\u0000\u0000\u0000'"*1024+"'A'"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1002
时间复杂度：EXPONENT
漏洞模式：EOA_i1
漏洞位置：[^']*►(▻'[^']*'[^']*◅)*◄\:(?P<clob>CLOB\('([^']+|'')*'\))
漏洞原因：β1 = ' β2 = [^']*'[^']* (β1.followLast ∪ β1.last) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：12
攻击字符串：""+"'\u0000\u0000\u0000\u0000\u0000'"*1024+"'A'"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1004
时间复杂度：EXPONENT
漏洞模式：EOA_i1
漏洞位置：[^']*►(▻'[^']*'[^']*◅)*◄\:(?P<clob>CLOB\('([^']+|'')*'\))
漏洞原因：β1 = ' β2 = [^']*'[^']* (β1.followLast ∪ β1.last) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：13
攻击字符串："''"+"'\u0000\u0000\u0000\u0000\u0000'"*1024+"~"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1011
时间复杂度：EXPONENT
漏洞模式：EOA_i1
漏洞位置：[^']*►(▻'[^']*'[^']*◅)*◄\:(?P<clob>CLOB\('([^']+|'')*'\))
漏洞原因：β1 = ' β2 = [^']*'[^']* (β1.followLast ∪ β1.last) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：14
攻击字符串：""+"'\u0000\u0000\u0000\u0000\u0000'"*1024+"~"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1003
时间复杂度：EXPONENT
漏洞模式：EOA_i1
漏洞位置：[^']*►(▻'[^']*'[^']*◅)*◄\:(?P<clob>CLOB\('([^']+|'')*'\))
漏洞原因：β1 = ' β2 = [^']*'[^']* (β1.followLast ∪ β1.last) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：15
攻击字符串：""+"\u0000"*10000+"\u0000"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1001
时间复杂度：POLYNOMIAL
漏洞模式：SLQ2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：16
攻击字符串：""+":CLOB(''"*1010+"\u0000"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1003
时间复杂度：EXPONENT
漏洞模式：SLQ2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：17
攻击字符串：""+"A"*10000+"@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1002
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_1
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：18
攻击字符串：""+"A"*10000+"'"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1014
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：19
攻击字符串："CLOB(':"+"A"*10000+"◎"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1012
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：20
攻击字符串："CLOB(':"+"A"*10000+"◎@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1015
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：21
攻击字符串："CLOB(':"+"A"*10000+"◎@'"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1014
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：22
攻击字符串：":"+"CLOB('"*1510+"◎"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1010
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：23
攻击字符串：":"+"CLOB('"*1510+"◎'@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1011
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：24
攻击字符串：""+":CLOB('"*510+"◎"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1016
时间复杂度：EXPONENT
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：25
攻击字符串：""+":CLOB('"*510+"◎'@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1005
时间复杂度：EXPONENT
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：26
攻击字符串：""+"CLOB(':A"*1010+"◎"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1008
时间复杂度：EXPONENT
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：27
攻击字符串：""+"CLOB(':A"*1010+"◎@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1012
时间复杂度：EXPONENT
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：28
攻击字符串：""+"CLOB(':A"*1010+"◎@'"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1001
时间复杂度：EXPONENT
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:142
正则表达式:[^']+
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:143
正则表达式:[^<']*
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:144
正则表达式:[^A-Za-z0-9\-_.~!*'();:@&=+$,/?%#[\]]
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:145
正则表达式:[^A-Za-z\-0-9 $&\.\,:;/'\!\(\)]
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:146
正则表达式:[^\w!#$%&'*+,.:;<=>?^`|~-]
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:147
正则表达式:[a-z\-' \n\t]
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:148
正则表达式:[uU]('.*?')
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:149
正则表达式:\'
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:150
正则表达式:\*(\w(\w|')*)\*(.*)
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:151
正则表达式:\.(\w+)'>
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:152
正则表达式:\?\?[=/\'\(\)\!<>\-]
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:153
正则表达式:\[(\w+)\]\s*\=\s*\'(\w+)\'
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:154
正则表达式:\\'
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:155
正则表达式:\\(['`:*~\\[\]{}@\$+\-.#])
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:156
正则表达式:\\openout.*`(.*)'
是否是ReDos漏洞：RESULT-TRUE
攻击字符串如下:
------------------------
编号：1
攻击字符串："\\openout "+"`"*10000+""
攻击是否成功：ATTACK_SUCCESS
攻击时间：1009
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：\\openout▻.*`◅(▻.*◅)'
漏洞原因：β1 = .* β2 = `.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：2
攻击字符串："\\openout"+"`"*10000+""
攻击是否成功：ATTACK_SUCCESS
攻击时间：1007
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：\\openout▻.*`◅(▻.*◅)'
漏洞原因：β1 = .* β2 = `.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：3
攻击字符串："\\openout "+"`"*10000+"\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1013
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：\\openout▻.*`◅(▻.*◅)'
漏洞原因：β1 = .* β2 = `.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：4
攻击字符串："\\openout"+"`"*10000+"\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1010
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：\\openout▻.*`◅(▻.*◅)'
漏洞原因：β1 = .* β2 = `.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：5
攻击字符串："\\openout "+"`"*10000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1003
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：\\openout▻.*`◅(▻.*◅)'
漏洞原因：β1 = .* β2 = `.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：6
攻击字符串："\\openout"+"`"*10000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1014
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：\\openout▻.*`◅(▻.*◅)'
漏洞原因：β1 = .* β2 = `.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：7
攻击字符串："\\openout "+"`"*10000+"◎"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1014
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：\\openout▻.*`◅(▻.*◅)'
漏洞原因：β1 = .* β2 = `.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：8
攻击字符串："\\openout"+"`"*10000+"◎"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1002
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：\\openout▻.*`◅(▻.*◅)'
漏洞原因：β1 = .* β2 = `.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：9
攻击字符串：""+"\\openout"*5000+"`"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1011
时间复杂度：POLYNOMIAL
漏洞模式：SLQ2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：10
攻击字符串：""+"\\openout`"*5000+"\u0000"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1006
时间复杂度：POLYNOMIAL
漏洞模式：SLQ2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：11
攻击字符串：""+"\\openout"*5000+"\n@@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1005
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：12
攻击字符串：""+"\\openout1`"*5000+"\n@@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1013
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:157
正则表达式:\\openout.*`(.*\.aux)'
是否是ReDos漏洞：RESULT-TRUE
攻击字符串如下:
------------------------
编号：1
攻击字符串："\\openout "+"`"*10000+""
攻击是否成功：ATTACK_SUCCESS
攻击时间：1013
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：\\openout▻.*`◅(▻.*◅\.aux)'
漏洞原因：β1 = .* β2 = `.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：2
攻击字符串："\\openout"+"`"*10000+""
攻击是否成功：ATTACK_SUCCESS
攻击时间：1015
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：\\openout▻.*`◅(▻.*◅\.aux)'
漏洞原因：β1 = .* β2 = `.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：3
攻击字符串："\\openout "+"`"*10000+"\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1001
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：\\openout▻.*`◅(▻.*◅\.aux)'
漏洞原因：β1 = .* β2 = `.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：4
攻击字符串："\\openout"+"`"*10000+"\n"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1002
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：\\openout▻.*`◅(▻.*◅\.aux)'
漏洞原因：β1 = .* β2 = `.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：5
攻击字符串："\\openout "+"`"*10000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1014
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：\\openout▻.*`◅(▻.*◅\.aux)'
漏洞原因：β1 = .* β2 = `.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：6
攻击字符串："\\openout"+"`"*10000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1014
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：\\openout▻.*`◅(▻.*◅\.aux)'
漏洞原因：β1 = .* β2 = `.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：7
攻击字符串："\\openout "+"`"*10000+"◎"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1006
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：\\openout▻.*`◅(▻.*◅\.aux)'
漏洞原因：β1 = .* β2 = `.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：8
攻击字符串："\\openout"+"`"*10000+"◎"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1016
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：\\openout▻.*`◅(▻.*◅\.aux)'
漏洞原因：β1 = .* β2 = `.* (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：9
攻击字符串：""+"\\openout"*5000+"`"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1011
时间复杂度：POLYNOMIAL
漏洞模式：SLQ2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：10
攻击字符串：""+"\\openout`"*5000+"."
攻击是否成功：ATTACK_SUCCESS
攻击时间：1015
时间复杂度：POLYNOMIAL
漏洞模式：SLQ2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：11
攻击字符串：""+"\\openout"*5000+"\n@@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1001
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：12
攻击字符串：""+"\\openout`1"*5000+"@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1006
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：13
攻击字符串：""+"\\openout`1"*5000+"@\n@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1005
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:158
正则表达式:\`(Tr|IX)\' not defined|No such file or directory|(can\'t break|cannot adjust) line
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:159
正则表达式:\b'(?=\d{2}s)
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:160
正则表达式:\bsub\s+(\w+(::|'))*\w+$
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:161
正则表达式:\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2},\d{3} (\d|\.)+  players: \['(\w+)', '(\w+)', '(\w+)', '(\w+)'\] winner (\w+)
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:162
正则表达式:\s*<?xml\b.*\bencoding='([^']+)'
是否是ReDos漏洞：RESULT-TRUE
攻击字符串如下:
------------------------
编号：1
攻击字符串：""+" "*10000+"@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1005
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_1
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：2
攻击字符串：""+" "*10000+"!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1011
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：3
攻击字符串：""+" <xml"*5000+"\n@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1005
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:163
正则表达式:\s*SELECT\s+.+?\s+FROM\s+[']?(\w+)
是否是ReDos漏洞：RESULT-TRUE
攻击字符串如下:
------------------------
编号：1
攻击字符串："SELECT "+"\t\t"*5000+"!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1016
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：\s*SELECT▻\s+.+?◅\s+FROM\s+[']?(\w+)
漏洞原因：β1 = \s+ β2 = .+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：2
攻击字符串："SELECT "+"\t "*5000+"!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1003
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：\s*SELECT▻\s+.+?◅\s+FROM\s+[']?(\w+)
漏洞原因：β1 = \s+ β2 = .+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：3
攻击字符串："SELECT"+"\t\t"*5000+"!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1010
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：\s*SELECT▻\s+.+?◅\s+FROM\s+[']?(\w+)
漏洞原因：β1 = \s+ β2 = .+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：4
攻击字符串："SELECT"+"\t "*5000+"!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1016
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：\s*SELECT▻\s+.+?◅\s+FROM\s+[']?(\w+)
漏洞原因：β1 = \s+ β2 = .+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：5
攻击字符串："SELECT "+"\t\t"*5000+"!1!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1005
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：\s*SELECT▻\s+.+?◅\s+FROM\s+[']?(\w+)
漏洞原因：β1 = \s+ β2 = .+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：6
攻击字符串："SELECT "+"\t "*5000+"!1!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1001
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：\s*SELECT▻\s+.+?◅\s+FROM\s+[']?(\w+)
漏洞原因：β1 = \s+ β2 = .+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：7
攻击字符串："SELECT"+"\t\t"*5000+"!1!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1013
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：\s*SELECT▻\s+.+?◅\s+FROM\s+[']?(\w+)
漏洞原因：β1 = \s+ β2 = .+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：8
攻击字符串："SELECT"+"\t "*5000+"!1!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1002
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：\s*SELECT▻\s+.+?◅\s+FROM\s+[']?(\w+)
漏洞原因：β1 = \s+ β2 = .+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：9
攻击字符串："SELECT "+"\t\t"*5000+"!\n!\n!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1014
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：\s*SELECT▻\s+.+?◅\s+FROM\s+[']?(\w+)
漏洞原因：β1 = \s+ β2 = .+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：10
攻击字符串："SELECT "+"\t "*5000+"!\n!\n!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1004
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：\s*SELECT▻\s+.+?◅\s+FROM\s+[']?(\w+)
漏洞原因：β1 = \s+ β2 = .+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：11
攻击字符串："SELECT"+"\t\t"*5000+"!\n!\n!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1007
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：\s*SELECT▻\s+.+?◅\s+FROM\s+[']?(\w+)
漏洞原因：β1 = \s+ β2 = .+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：12
攻击字符串："SELECT"+"\t "*5000+"!\n!\n!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1006
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：\s*SELECT▻\s+.+?◅\s+FROM\s+[']?(\w+)
漏洞原因：β1 = \s+ β2 = .+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：13
攻击字符串："SELECT "+"\t\t"*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1014
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：\s*SELECT▻\s+.+?◅\s+FROM\s+[']?(\w+)
漏洞原因：β1 = \s+ β2 = .+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：14
攻击字符串："SELECT "+"\t "*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1003
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：\s*SELECT▻\s+.+?◅\s+FROM\s+[']?(\w+)
漏洞原因：β1 = \s+ β2 = .+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：15
攻击字符串："SELECT"+"\t\t"*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1013
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：\s*SELECT▻\s+.+?◅\s+FROM\s+[']?(\w+)
漏洞原因：β1 = \s+ β2 = .+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：16
攻击字符串："SELECT"+"\t "*5000+"\r"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1003
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：\s*SELECT▻\s+.+?◅\s+FROM\s+[']?(\w+)
漏洞原因：β1 = \s+ β2 = .+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：17
攻击字符串："SELECT "+"\t\t "*5000+"\u0000"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1016
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：\s*SELECT▻\s+.+?\s+◅FROM\s+[']?(\w+)
漏洞原因：β1 = \s+ β2 = .+\s+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：18
攻击字符串："SELECT "+"\t\t\t"*5000+"\u0000"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1014
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：\s*SELECT▻\s+.+?\s+◅FROM\s+[']?(\w+)
漏洞原因：β1 = \s+ β2 = .+\s+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：19
攻击字符串："SELECT"+"\t\t "*5000+"\u0000"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1014
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：\s*SELECT▻\s+.+?\s+◅FROM\s+[']?(\w+)
漏洞原因：β1 = \s+ β2 = .+\s+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：20
攻击字符串："SELECT"+"\t\t\t"*5000+"\u0000"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1001
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：\s*SELECT▻\s+.+?\s+◅FROM\s+[']?(\w+)
漏洞原因：β1 = \s+ β2 = .+\s+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：21
攻击字符串："SELECT "+"\t\t "*5000+"!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1014
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：\s*SELECT▻\s+.+?\s+◅FROM\s+[']?(\w+)
漏洞原因：β1 = \s+ β2 = .+\s+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：22
攻击字符串："SELECT "+"\t\t\t"*5000+"!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1006
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：\s*SELECT▻\s+.+?\s+◅FROM\s+[']?(\w+)
漏洞原因：β1 = \s+ β2 = .+\s+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：23
攻击字符串："SELECT"+"\t\t "*5000+"!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1002
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：\s*SELECT▻\s+.+?\s+◅FROM\s+[']?(\w+)
漏洞原因：β1 = \s+ β2 = .+\s+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：24
攻击字符串："SELECT"+"\t\t\t"*5000+"!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1003
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：\s*SELECT▻\s+.+?\s+◅FROM\s+[']?(\w+)
漏洞原因：β1 = \s+ β2 = .+\s+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：25
攻击字符串："SELECT "+"\t\t "*5000+"!1!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1008
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：\s*SELECT▻\s+.+?\s+◅FROM\s+[']?(\w+)
漏洞原因：β1 = \s+ β2 = .+\s+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：26
攻击字符串："SELECT "+"\t\t\t"*5000+"!1!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1015
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：\s*SELECT▻\s+.+?\s+◅FROM\s+[']?(\w+)
漏洞原因：β1 = \s+ β2 = .+\s+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：27
攻击字符串："SELECT"+"\t\t "*5000+"!1!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1004
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：\s*SELECT▻\s+.+?\s+◅FROM\s+[']?(\w+)
漏洞原因：β1 = \s+ β2 = .+\s+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：28
攻击字符串："SELECT"+"\t\t\t"*5000+"!1!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1006
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：\s*SELECT▻\s+.+?\s+◅FROM\s+[']?(\w+)
漏洞原因：β1 = \s+ β2 = .+\s+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：29
攻击字符串："SELECT "+"\t\t "*5000+"!\n!\n!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1009
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：\s*SELECT▻\s+.+?\s+◅FROM\s+[']?(\w+)
漏洞原因：β1 = \s+ β2 = .+\s+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：30
攻击字符串："SELECT "+"\t\t\t"*5000+"!\n!\n!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1008
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：\s*SELECT▻\s+.+?\s+◅FROM\s+[']?(\w+)
漏洞原因：β1 = \s+ β2 = .+\s+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：31
攻击字符串："SELECT"+"\t\t "*5000+"!\n!\n!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：93
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：32
攻击字符串："SELECT"+"\t\t\t"*5000+"!\n!\n!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1014
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：\s*SELECT▻\s+.+?\s+◅FROM\s+[']?(\w+)
漏洞原因：β1 = \s+ β2 = .+\s+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：33
攻击字符串："SELECT "+"\t\t"*5000+"\u0000"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1004
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：\s*SELECT\s+▻.+?\s+◅FROM\s+[']?(\w+)
漏洞原因：β1 = .+ β2 = \s+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：34
攻击字符串："SELECT "+"\t "*5000+"\u0000"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1005
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：\s*SELECT\s+▻.+?\s+◅FROM\s+[']?(\w+)
漏洞原因：β1 = .+ β2 = \s+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：35
攻击字符串："SELECT\t\u0000"+"\t\t"*5000+"\u0000"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1014
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：\s*SELECT\s+▻.+?\s+◅FROM\s+[']?(\w+)
漏洞原因：β1 = .+ β2 = \s+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：36
攻击字符串："SELECT\t\u0000"+"\t "*5000+"\u0000"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1013
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：\s*SELECT\s+▻.+?\s+◅FROM\s+[']?(\w+)
漏洞原因：β1 = .+ β2 = \s+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：37
攻击字符串："SELECT "+"\t\t"*5000+" "
攻击是否成功：ATTACK_SUCCESS
攻击时间：1010
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：\s*SELECT\s+▻.+?\s+◅FROM\s+[']?(\w+)
漏洞原因：β1 = .+ β2 = \s+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：38
攻击字符串："SELECT "+"\t "*5000+" "
攻击是否成功：ATTACK_SUCCESS
攻击时间：1007
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：\s*SELECT\s+▻.+?\s+◅FROM\s+[']?(\w+)
漏洞原因：β1 = .+ β2 = \s+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：39
攻击字符串："SELECT\t\u0000"+"\t\t"*5000+" "
攻击是否成功：ATTACK_SUCCESS
攻击时间：1004
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：\s*SELECT\s+▻.+?\s+◅FROM\s+[']?(\w+)
漏洞原因：β1 = .+ β2 = \s+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：40
攻击字符串："SELECT\t\u0000"+"\t "*5000+" "
攻击是否成功：ATTACK_SUCCESS
攻击时间：1012
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：\s*SELECT\s+▻.+?\s+◅FROM\s+[']?(\w+)
漏洞原因：β1 = .+ β2 = \s+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：41
攻击字符串："SELECT\t\u0000"+"\t\t"*5000+"!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1014
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：\s*SELECT\s+▻.+?\s+◅FROM\s+[']?(\w+)
漏洞原因：β1 = .+ β2 = \s+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：42
攻击字符串："SELECT\t\u0000"+"\t "*5000+"!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1005
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：\s*SELECT\s+▻.+?\s+◅FROM\s+[']?(\w+)
漏洞原因：β1 = .+ β2 = \s+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：43
攻击字符串："SELECT\t\u0000"+"\t\t"*5000+"!1!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1006
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：\s*SELECT\s+▻.+?\s+◅FROM\s+[']?(\w+)
漏洞原因：β1 = .+ β2 = \s+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：44
攻击字符串："SELECT\t\u0000"+"\t "*5000+"!1!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1014
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：\s*SELECT\s+▻.+?\s+◅FROM\s+[']?(\w+)
漏洞原因：β1 = .+ β2 = \s+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：45
攻击字符串："SELECT\t\u0000"+"\t\t"*5000+"!\n!\n!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1016
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：\s*SELECT\s+▻.+?\s+◅FROM\s+[']?(\w+)
漏洞原因：β1 = .+ β2 = \s+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：46
攻击字符串："SELECT\t\u0000"+"\t "*5000+"!\n!\n!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1006
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：\s*SELECT\s+▻.+?\s+◅FROM\s+[']?(\w+)
漏洞原因：β1 = .+ β2 = \s+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：47
攻击字符串："SELECT "+"\t\t "*5000+" "
攻击是否成功：ATTACK_SUCCESS
攻击时间：1013
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻\s*◅SELECT\s+▻.+?\s+◅FROM\s+[']?(\w+)
漏洞原因：β1 = \s+.+ β2 = \s+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：48
攻击字符串："SELECT "+"\t\t\t"*5000+" "
攻击是否成功：ATTACK_SUCCESS
攻击时间：1004
时间复杂度：POLYNOMIAL
漏洞模式：POA
漏洞位置：▻\s*◅SELECT\s+▻.+?\s+◅FROM\s+[']?(\w+)
漏洞原因：β1 = \s+.+ β2 = \s+ (β1.followLast) ∩ (β2.first) ≠ ∅
------------------------
------------------------
编号：49
攻击字符串：""+" "*20000+"\u0000"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1014
时间复杂度：POLYNOMIAL
漏洞模式：SLQ2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：50
攻击字符串：""+"SELECT "*5000+" "
攻击是否成功：ATTACK_SUCCESS
攻击时间：1011
时间复杂度：POLYNOMIAL
漏洞模式：SLQ2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：51
攻击字符串：""+" "*20000+"@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1001
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_1
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：52
攻击字符串：""+" "*20000+"!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1001
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：53
攻击字符串：""+" SELECT"*5000+"!@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1013
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：54
攻击字符串：""+" SELECT "*5000+"\n@!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1014
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：55
攻击字符串：""+" SELECT 1"*5000+"!\n@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1005
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：56
攻击字符串：""+" SELECT 1 FROM '"*5000+"!A"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1005
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:164
正则表达式:\s*index.append\('(.+)'\)\s*
是否是ReDos漏洞：RESULT-TRUE
攻击字符串如下:
------------------------
编号：1
攻击字符串：""+" "*20000+"\u0000"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1011
时间复杂度：POLYNOMIAL
漏洞模式：SLQ2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：2
攻击字符串：""+"index\u0000append('"*5000+"\u0000"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1006
时间复杂度：POLYNOMIAL
漏洞模式：SLQ2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：3
攻击字符串：""+" "*20000+"@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1009
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_1
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：4
攻击字符串：""+" "*20000+"!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1003
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：5
攻击字符串：""+" index1append('"*5000+"\n@@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1012
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:165
正则表达式:\s+\(default:\s+\'(.*)\'\)$
是否是ReDos漏洞：RESULT-TRUE
攻击字符串如下:
------------------------
编号：1
攻击字符串：""+" "*20000+"\u0000"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1009
时间复杂度：POLYNOMIAL
漏洞模式：SLQ2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：2
攻击字符串：""+"\t(default:\t'"*5000+"\u0000"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1001
时间复杂度：POLYNOMIAL
漏洞模式：SLQ2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：3
攻击字符串：""+" "*20000+"◎"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1003
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_1
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：4
攻击字符串：""+" "*20000+"!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1006
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：5
攻击字符串：""+" (default: '"*5000+"\n@◎"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1006
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:166
正则表达式:\svalues\s*(\(((?<!\\)'[^\)]*?\)[^\)]*(?<!\\)?'|[^\(\)]|(?:\([^\)]*\)))+\))
是否是ReDos漏洞：RESULT-TRUE
攻击字符串如下:
------------------------
编号：1
攻击字符串：""+"\tvalues(("*5000+"\u0000"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1005
时间复杂度：POLYNOMIAL
漏洞模式：SLQ2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：2
攻击字符串：""+" values("*5000+"!"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1005
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
------------------------
编号：3
攻击字符串：""+" values("*5000+"!@"
攻击是否成功：ATTACK_SUCCESS
攻击时间：1008
时间复杂度：POLYNOMIAL
漏洞模式：SLQ_2
漏洞位置：Unable to locate Vulnerability position
漏洞原因：Unable to find Vulnerability source
------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
id:167
正则表达式:\{([a-zA-Z\']+)\}
是否是ReDos漏洞：RESULT-FALSE
攻击字符串如下:
并非ReDos,攻击字符串为空
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
